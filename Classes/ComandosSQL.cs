using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Windows.Forms;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using clModelo.funcoes;
using Microsoft.Reporting.WinForms;
using System.IO;
using System.Drawing.Printing;
using System.Drawing.Imaging;
using System.Reflection;
using System.Globalization;
using System.Media;

namespace MarbaSoftware
{
    public class ComandosSQL
    {
        #region Inicialização
        Conexao conexao = new Conexao();
        SqlCommand comando = new SqlCommand();
        public ComandosSQL() //Construtor
        {

        }
        #endregion

        #region Métodos Genéricos
        private void AtualizarDataGrid()
        {
            DataGridView dataGridViewLista = new DataGridView();

            int linha_selecionada = 0, primeira_linha = 0;
            if (dataGridViewLista.CurrentRow != null)
            {
                primeira_linha = dataGridViewLista.FirstDisplayedScrollingRowIndex;
                linha_selecionada = dataGridViewLista.CurrentRow.Index;
            }

            dataGridViewLista.Rows.Clear();

            //foreach ()
            //{            
            //    dataGridViewLista.Rows.Add();
            //}

            try
            {
                dataGridViewLista.FirstDisplayedScrollingRowIndex = primeira_linha;
                dataGridViewLista.CurrentCell = dataGridViewLista.Rows[linha_selecionada].Cells[0];
            }
            catch { }
        }
        public bool verificarLogin(string login, string senha)
        {
            bool confirmacao = false;
            string comando = "SELECT * FROM tbl_Colaboradores WHERE Login_Sistema = @usuario AND Senha = @senha";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@usuario", login);
            select.Parameters.AddWithValue("@senha", senha);

            try
            {
                SqlDataReader leitor = select.ExecuteReader();
                if (leitor.HasRows)
                {
                    confirmacao = true;
                }
                leitor.Close();
            }
            catch (SqlException)
            {
                MessageBox.Show("Erro ao se conectar");
            }

            return confirmacao;
        }
        public bool verificarMatricula(string matricula, string senha)
        {
            bool confirmacao = false;
            string comando = "SELECT * FROM tbl_Colaboradores WHERE Matricula = @usuario AND Senha = @senha";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@usuario", matricula);
            select.Parameters.AddWithValue("@senha", senha);

            try
            {
                SqlDataReader leitor = select.ExecuteReader();

                if (leitor.HasRows)
                {
                    confirmacao = true;
                }
                leitor.Close();
            }
            catch (SqlException)
            {
                MessageBox.Show("Erro ao se conectar");
            }

            return confirmacao;
        }
        public bool verificarPermissaoAtravesDaMatricula(string matricula, string permissao)
        {
            string comando = "SELECT COUNT(*) FROM tbl_PermissoesDeAcesso WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND ID_Acesso = (SELECT ID_Acesso FROM tbl_Acessos WHERE Descricao = @permissao)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            select.Parameters.AddWithValue("@permissao", permissao);

            bool verificar;
            if (Convert.ToInt32(select.ExecuteScalar()) > 0) { verificar = true; }
            else { verificar = false; }

            return verificar;
        }
        public bool verificarPermissaoAtravesDoLogin(string login, string permissao)
        {
            string comando = "SELECT COUNT(*) FROM tbl_PermissoesDeAcesso WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Login_Sistema = @login) AND ID_Acesso = (SELECT ID_Acesso FROM tbl_Acessos WHERE Descricao = @permissao)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@login", login);
            select.Parameters.AddWithValue("@permissao", permissao);

            bool verificar;
            if (Convert.ToInt32(select.ExecuteScalar()) > 0) { verificar = true; }
            else { verificar = false; }

            return verificar;
        }
        public List<Digital> PreencherListaDeDigitais()
        {
            List<Digital> lista_digitais = new List<Digital>();
            string comando1 = "SELECT Impressao_Digital1, ID_Colaborador, Nome_Colaborador FROM tbl_Colaboradores";
            SqlCommand select1 = new SqlCommand(comando1, conexao.Conectar());
            SqlDataReader leitor1 = select1.ExecuteReader();
            while (leitor1.Read())
            {
                lista_digitais.Add(new Digital
                {
                    Impressao_Digital = Convert.ToInt32(leitor1[0]),
                    ID_Colaborador = Convert.ToInt32(leitor1[1]),
                    Colaborador = leitor1[2].ToString()
                });
            }
            leitor1.Close();
            conexao.Desconectar();

            string comando2 = "SELECT Impressao_Digital2, ID_Colaborador, Nome_Colaborador FROM tbl_Colaboradores";
            SqlCommand select2 = new SqlCommand(comando2, conexao.Conectar());
            SqlDataReader leitor2 = select2.ExecuteReader();
            while (leitor2.Read())
            {
                lista_digitais.Add(new Digital
                {
                    Impressao_Digital = Convert.ToInt32(leitor2[0]),
                    ID_Colaborador = Convert.ToInt32(leitor2[1]),
                    Colaborador = leitor2[2].ToString()
                });
            }
            leitor2.Close();
            conexao.Desconectar();

            string comando3 = "SELECT Impressao_Digital3, ID_Colaborador, Nome_Colaborador FROM tbl_Colaboradores";
            SqlCommand select3 = new SqlCommand(comando3, conexao.Conectar());
            SqlDataReader leitor3 = select3.ExecuteReader();
            while (leitor3.Read())
            {
                lista_digitais.Add(new Digital
                {
                    Impressao_Digital = Convert.ToInt32(leitor3[0]),
                    ID_Colaborador = Convert.ToInt32(leitor3[1]),
                    Colaborador = leitor3[2].ToString()
                });
            }
            leitor3.Close();
            conexao.Desconectar();

            return lista_digitais;
        }
        public bool VerificarServidorAberto()
        {
            string comando = "SELECT IIF(COUNT(*) > 0, 1, 0) FROM tbl_Servidor WHERE Status = 'Aberto'";
            bool verificar;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                verificar = Convert.ToBoolean(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return verificar;
        }
        public bool VerificarComputadorRegistrado(string computador, string usuario, string id_computador)
        {
            string comando = "SELECT COUNT (*) FROM tbl_CPUs WHERE Nome_Computador = @computador AND Nome_Usuario = @usuario AND ID_Unico = @id_computador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@computador", computador);
            select.Parameters.AddWithValue("@usuario", usuario);
            select.Parameters.AddWithValue("@id_computador", id_computador);
            int registros = Convert.ToInt32(select.ExecuteScalar());
            bool verificar;
            if (registros > 0) { verificar = true; }
            else { verificar = false; }

            conexao.Desconectar();

            return verificar;
        }
        public void RegistrarComputador(CPU cpu)
        {
            string comando = "INSERT INTO tbl_CPUs (Nome_Computador, Nome_Usuario, ID_Unico, Impressora_A4, Impressora_Termica, Porta_Serial, ID_Reparticao) VALUES (@computador, @usuario, @id, @a4, @termica, @serial, @id_reparticao)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());

            insert.Parameters.AddWithValue("@computador", cpu.Computador);
            insert.Parameters.AddWithValue("@usuario", cpu.Usuario);
            insert.Parameters.AddWithValue("@id", cpu.ID);
            insert.Parameters.AddWithValue("@a4", cpu.Impressora_A4);
            insert.Parameters.AddWithValue("@termica", cpu.Impressora_Termica);
            insert.Parameters.AddWithValue("@serial", cpu.Porta_Serial);
            insert.Parameters.AddWithValue("@id_reparticao", cpu.ID_Reparticao);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Computador registrado!\r\nEsta máquina está habilitada para acessar os recursos do MarbaSoftware.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public CPU TrazerInformacoesDoComputador(string id_unico, string usuario)
        {
            CPU cpu = new CPU();
            string comando = "SELECT Impressora_A4, Impressora_Termica, Porta_Serial, (SELECT CONVERT(VARCHAR(10), ID_Reparticao) + '. ' + Descricao + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = tbl_ReparticoesEstabelecimentos.ID_Estabelecimento) FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_CPUs.ID_Reparticao) FROM tbl_CPUs WHERE ID_Unico = @id AND Nome_Usuario = @usuario";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id_unico);
            select.Parameters.AddWithValue("@usuario", usuario);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                cpu.Impressora_A4 = leitor[0].ToString();
                cpu.Impressora_Termica = leitor[1].ToString();
                cpu.Porta_Serial = leitor[2].ToString();
                cpu.Reparticao = leitor[3].ToString();
            }
            leitor.Close();

            string[] separar_id = cpu.Reparticao.Split('.');
            try { cpu.ID_Reparticao = Convert.ToInt32(separar_id[0]); }
            catch { cpu.ID_Reparticao = 0; }

            return cpu;
        }
        public bool VerificarDiretorExecutivo()
        {
            string cargo = VerificarCargo();
            bool verificar;
            if (cargo == "Diretor Executivo")
            {
                verificar = true;
            }
            else
            {
                verificar = false;
            }
            return verificar;
        }
        public string PrimeiraLetraMaiuscula(string inserir)
        {
            if (String.IsNullOrEmpty(inserir))
                throw new ArgumentException("Insira uma palavra");
            return inserir.Length > 1 ? char.ToUpper(inserir[0]) + inserir.Substring(1) : inserir.ToUpper();
        }
        public string EncontrarSobrenome()
        {
            string matricula = Program.matricula;
            comando.Connection = conexao.Conectar();
            comando.CommandText = "SELECT Sobrenome FROM tbl_Colaboradores WHERE Matricula = @matricula";
            comando.Parameters.AddWithValue("@matricula", matricula);
            string sobrenome = Convert.ToString(comando.ExecuteScalar());
            conexao.Desconectar();
            return sobrenome;
        }
        public decimal ObterValorDoParametro(string parametro)
        {
            decimal valor;
            string comando = "SELECT Valor_Parametro FROM tbl_Parametros WHERE Nome_Parametro = @parametro";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@parametro", parametro);
                valor = Convert.ToDecimal(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return valor;
        }

        public bool ObterValorDoParametroBooleano(string parametro)
        {
            bool valor;
            string comando = "SELECT Valor_Parametro FROM tbl_ParametrosBooleanos WHERE Nome_Parametro = @parametro";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@parametro", parametro);
                valor = Convert.ToBoolean(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return valor;

        }
        public string ObterValorDoParametroDeTexto(string parametro)
        {
            string valor;
            string comando = "SELECT Valor_Parametro FROM tbl_ParametrosTexto WHERE Nome_Parametro = @parametro";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@parametro", parametro);
            valor = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return valor;
        }
        public int ArredondarInt32(int valor, int significancia)
        {
            int resultado = 0;
            try
            {
                int divisao = valor / significancia; //1
                decimal resto = valor % significancia; //0,9

                if (resto > 0)
                {
                    divisao++;
                    resultado = divisao * significancia;
                }
                else
                {
                    resultado = valor;
                }
            }
            catch { }
            return resultado;
        }
        public decimal ArredondarDecimal(decimal valor, decimal significancia)
        {
            decimal resultado = 0;
            //try
            //{
            int divisao = Convert.ToInt32(valor / significancia); //1
            decimal resto = valor % significancia; //0,9
            if (resto > 0)
            {
                divisao++;
                resultado = divisao * significancia;
            }
            else
            {
                resultado = valor;
            }
            //}
            //catch { }
            return resultado;
        }
        public string ConverterStringParaCod128(string chaine)
        {
            int ind = 1;
            int checksum = 0;
            int mini;
            int dummy;
            bool tableB;
            String code128;
            int longueur;

            code128 = "";
            longueur = chaine.Length;


            if (longueur == 0)
            {
                Console.WriteLine("\n chaine vide");
            }
            else
            {
                for (ind = 0; ind < longueur; ind++)
                {
                    if ((chaine[ind] < 32) || (chaine[ind] > 126))
                    {
                        Console.WriteLine("\n chaine invalide");
                    }
                }
            }


            tableB = true;
            ind = 0;



            while (ind < longueur)
            {

                if (tableB == true)
                {
                    if ((ind == 0) || (ind + 3 == longueur - 1))
                    {
                        mini = 4;
                    }
                    else
                    {
                        mini = 6;
                    }

                    mini = mini - 1;

                    if ((ind + mini) <= longueur - 1)
                    {
                        while (mini >= 0)
                        {
                            if ((chaine[ind + mini] < 48) || (chaine[ind + mini] > 57))
                            {
                                Console.WriteLine("\n exit");
                                break;
                            }
                            mini = mini - 1;
                        }
                    }


                    if (mini < 0)
                    {
                        if (ind == 0)
                        {
                            code128 = Char.ToString((char)205);

                        }
                        else
                        {
                            code128 = code128 + Char.ToString((char)199);

                        }
                        tableB = false;
                    }
                    else
                    {

                        if (ind == 0)
                        {
                            code128 = Char.ToString((char)204);
                        }
                    }
                }

                if (tableB == false)
                {
                    mini = 2;
                    mini = mini - 1;
                    if (ind + mini < longueur)
                    {
                        while (mini >= 0)
                        {

                            if (((chaine[ind + mini]) < 48) || ((chaine[ind]) > 57))
                            {
                                break;
                            }
                            mini = mini - 1;
                        }
                    }
                    if (mini < 0)
                    {
                        dummy = Int32.Parse(chaine.Substring(ind, 2));

                        Console.WriteLine("\n  dummy ici : " + dummy);

                        if (dummy < 95)
                        {
                            dummy = dummy + 32;
                        }
                        else
                        {
                            dummy = dummy + 100;
                        }
                        code128 = code128 + (char)(dummy);

                        ind = ind + 2;
                    }
                    else
                    {
                        code128 = code128 + Char.ToString((char)200);
                        tableB = true;
                    }
                }
                if (tableB == true)
                {

                    code128 = code128 + chaine[ind];
                    ind = ind + 1;
                }
            }

            for (ind = 0; ind <= code128.Length - 1; ind++)
            {
                dummy = code128[ind];
                Console.WriteLine("\n  et voila dummy : " + dummy);
                if (dummy < 127)
                {
                    dummy = dummy - 32;
                }
                else
                {
                    dummy = dummy - 100;
                }
                if (ind == 0)
                {
                    checksum = dummy;
                }
                checksum = (checksum + (ind) * dummy) % 103;
            }

            if (checksum < 95)
            {
                checksum = checksum + 32;
            }
            else
            {
                checksum = checksum + 100;
            }
            code128 = code128 + Char.ToString((char)checksum)
                    + Char.ToString((char)206);

            return code128;
        }

        public void LimparPontoEVirgulaOuEspacoNoFinalDasPalavras()
        {
            List<string> lista = new List<string>();
            string cmd = "SELECT Utensílio FROM u$";
            SqlCommand select = new SqlCommand(cmd, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(leitor[0].ToString());
            }
            leitor.Close();
            conexao.Desconectar();

            foreach (string x in lista)
            {
                string a = x.Substring(x.Length - 1, 1);
                string b;
                if (a == ";" || a == " ")
                {
                    b = x.Remove(x.Length - 1);
                }
                else
                {
                    b = x;
                }

                string comando = "UPDATE u$ SET Utensílio = @b WHERE Utensílio = @x";
                SqlCommand update = new SqlCommand(comando, conexao.Conectar());
                update.Parameters.AddWithValue("@b", b);
                update.Parameters.AddWithValue("@x", x);
                update.ExecuteNonQuery();
                conexao.Desconectar();
            }

        }
        public void Beep()
        {
            SystemSounds.Hand.Play();
        }
        public string TurnoDoDia()
        {
            string cumprimento = string.Empty;
            DateTime agora = DateTime.Now;
            DateTime manha = Convert.ToDateTime("00:00");
            DateTime tarde = Convert.ToDateTime("12:00");
            DateTime noite = Convert.ToDateTime("18:00");
            DateTime fim_da_noite = Convert.ToDateTime("23:59");

            if (agora >= manha && agora < tarde)
            {
                cumprimento = "Bom dia";
            }
            else if (agora >= tarde && agora < noite)
            {
                cumprimento = "Boa tarde";
            }
            else if (agora >= noite && agora <= fim_da_noite)
            {
                cumprimento = "Boa noite";
            }
            return cumprimento;
        }
        public void MensagemDeCorrecao()
        {
            MessageBox.Show("Corrigir código");
        }
        public decimal ConverterDinheiroEmDecimal(string dinheiro)
        {
            decimal valor;

            try
            {
                string[] partir = dinheiro.Split('$');
                valor = Convert.ToDecimal(partir[1]);

                if (partir[0] != "R")
                {
                    valor = -valor;
                }
            }
            catch { valor = 0; }

            return valor;
        }
        public string ConverterDecimalEmDinheiro(decimal valor)
        {
            string dinheiro;
            try { dinheiro = valor.ToString("C"); }
            catch { dinheiro = "R$0,00"; }

            return dinheiro;
        }

        public decimal ConverterPercentualEmDecimal(string percentual)
        {
            decimal valor;

            try
            {
                string[] partir = percentual.Split('%');
                valor = Convert.ToDecimal(partir[0]);
            }
            catch { valor = 0; }

            return valor;
        }
        public string ConverterDecimalEmPercentual(decimal valor)
        {
            string percentual = valor.ToString("F") + "%";

            return percentual;
        }
        public string ConverterDataParaDiaDaSemana(DateTime data)
        {
            CultureInfo cultura = new CultureInfo("pt-BR");
            DateTimeFormatInfo formato = cultura.DateTimeFormat;

            string dia_da_semana = formato.GetDayName(data.DayOfWeek).PrimeiraLetraMaiuscula();
            return dia_da_semana;
        }
        public int ConverterMesPorExtensoParaInteiro(string mes)
        {
            int Mes;
            mes = mes.ToUpper();
            //Transforma qualquer valor informado em maiúsculo, para que não importe se o valor recebido foi minúsculo ou maiúsculo.

            if (mes == "JANEIRO") { Mes = 1; }
            else if (mes == "FEVEREIRO") { Mes = 2; }
            else if (mes == "MARÇO") { Mes = 3; }
            else if (mes == "ABRIL") { Mes = 4; }
            else if (mes == "MAIO") { Mes = 5; }
            else if (mes == "JUNHO") { Mes = 6; }
            else if (mes == "JULHO") { Mes = 7; }
            else if (mes == "AGOSTO") { Mes = 8; }
            else if (mes == "SETEMBRO") { Mes = 9; }
            else if (mes == "OUTUBRO") { Mes = 10; }
            else if (mes == "NOVEMBRO") { Mes = 11; }
            else if (mes == "DEZEMBRO") { Mes = 12; }
            else { Mes = 0; }

            return Mes;
        }
        #endregion

        #region Imagens

        public void CadastrarImagem()
        {

        }

        public byte[] ConverteImagemParaArrayDeBytes(Image imagem)
        {
            try
            {
                using (MemoryStream mStream = new MemoryStream())
                {
                    imagem.Save(mStream, imagem.RawFormat);
                    return mStream.ToArray();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Image ConverterArrayDeBytesParaImagem(byte[] imagemEmBytes)
        {
            using (MemoryStream ms = new MemoryStream(imagemEmBytes, 0, imagemEmBytes.Length))
            {
                ms.Write(imagemEmBytes, 0, imagemEmBytes.Length);
                Image imagem = Image.FromStream(ms, true);
                return imagem;
            }
        }

        public Image TrazerImagemPeloNome(string descricao)
        {
            string comando = "SELECT Imagem FROM tbl_Imagens WHERE Descricao = @descricao";

            Image imagem;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@descricao", descricao);
                byte[] imagem_byte = (byte[])select.ExecuteScalar();
                imagem = ConverterArrayDeBytesParaImagem(imagem_byte);
            }
            conexao.Desconectar();

            return imagem;
        }

        public Image TrazerImagemPeloID(int id_imagem)
        {
            string comando = "SELECT Imagem FROM tbl_Imagens WHERE ID_Imagem = @id_imagem";

            Image imagem;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_imagem", id_imagem);
                byte[] imagem_byte = (byte[])select.ExecuteScalar();
                imagem = ConverterArrayDeBytesParaImagem(imagem_byte);
            }
            conexao.Desconectar();

            return imagem;
        }

        #endregion

        #region Métodos do Formulário Produtos

        #region Métodos para Atualizar o Utensílio
        public List<Validacao> ListaDeStatusUtensilios(string utensilio)//Utilizado para o cadastramento. 
        {
            string consulta = "SELECT DISTINCT tbl_Utensilios.Nome_utensilio, Nome_Produto, Preco_Custo, tbl_Produtos.Ativacao, tbl_Produtos.Validacao, tbl_Produtos.Disponibilidade, tbl_Produtos._Status FROM tbl_Produtos INNER JOIN tbl_Utensilios ON tbl_Utensilios.ID_Utensilio = tbl_Produtos.ID_Utensilio ORDER BY Nome_utensilio, Preco_Custo";
            List<Validacao> listaValidacao = new List<Validacao>();
            SqlCommand select = new SqlCommand(consulta, conexao.Conectar());
            select.Parameters.AddWithValue("@utensilio", utensilio);
            select.CommandType = CommandType.Text;
            SqlDataReader leitor = select.ExecuteReader();
            int i = 0;
            while (leitor.Read())
            {
                i++;
                listaValidacao.Add(new Validacao()
                {
                    Index = i,
                    Utensilio = leitor[0].ToString(),
                    Produto = leitor[1].ToString(),
                    Custo = Convert.ToDouble(leitor[2]),
                    Ativacao = leitor[3].ToString(),
                    _Validacao = leitor[4].ToString(),
                    Disponibilidade = leitor[5].ToString(),
                    Status = leitor[3].ToString()
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return listaValidacao;
        }
        public bool VerificarDisponibilidadeDoProduto(int id_produto)
        {
            string comando = "SELECT Disponibilidade FROM tbl_Produtos WHERE ID_Produto = @id_produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_produto", id_produto);
            bool disponivel;
            if (select.ExecuteScalar() == null) { disponivel = false; }
            else if (select.ExecuteScalar().ToString() == "Não") { disponivel = false; }
            else { disponivel = true; }
            conexao.Desconectar();
            return disponivel;
        }
        public bool VerificarAtivacaoDoProduto(int id_produto)
        {
            string comando = "SELECT Ativacao FROM tbl_Produtos WHERE ID_Produto = @id_produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_produto", id_produto);
            bool ativacao;
            if (select.ExecuteScalar() == null) { ativacao = false; }
            else if (select.ExecuteScalar().ToString() == "Inativo") { ativacao = false; }
            else { ativacao = true; }
            conexao.Desconectar();
            return ativacao;
        }
        public void AlterarStatusDoProduto(string ativacao, int id_produto)
        {
            bool encapsulado = VerificarSeProdutoJaEstaEncapsulado(id_produto);
            bool disponivel = VerificarDisponibilidadeDoProduto(id_produto);

            string status;
            if (encapsulado && disponivel && ativacao == "Ativo") { status = "Ativo"; }
            else if (!encapsulado && disponivel && ativacao == "Ativo") { status = "Desabilitado"; }
            else if (!disponivel && ativacao == "Ativo") { status = "Indisponível"; }
            else { status = "Inativo"; }

            //MessageBox.Show("Encapsulamento: " + encapsulado.ToString() + "\r\nDisponivel: " + disponivel.ToString() + "\r\nAtivacao: " + ativacao + "\r\nStatus: " + status);

            string comando = "UPDATE tbl_Produtos SET Status = @status WHERE ID_Produto = @id_produto";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@status", status);
            update.Parameters.AddWithValue("@id_produto", id_produto);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }
        #endregion

        #region Conjuntos
        public void PreencherDataGridConjuntos(BindingSource bindingSource, DataGridView dataGridView)
        {
            string comando = "SELECT ID_Conjunto, Cod_Extra, Nome_Original, Qtd_Produtos AS Produtos, Preco_Base AS Custo, IIF(Tipo_Conjunto = 'IDÊNTICOS', 'Produtos idênticos', 'Produtos distintos') AS Tipo,IIF(Tipo_Venda = 'UNIDADE', 'Unitário', 'Conjunto') AS Venda FROM tbl_Conjuntos ORDER BY Nome_Original";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGridView.DataSource = bindingSource;
            }
            conexao.Desconectar();
        }
        public void CadastrarConjunto(Conjunto Conjunto)
        {
            string comando = "INSERT INTO tbl_Conjuntos (Tipo_Conjunto, ID_Fabricante, Nome_Original, Qtd_Produtos, Tipo_Venda, Aliquota_ICMS, Aliquota_IPI, Preco_Base, Cod_Extra) VALUES (@tipo_conjunto, (SELECT ID_Fabricante FROM tbl_Fabricantes WHERE Fabricante = @fabricante), @conjunto, @qtd_produtos, @tipo_venda, @aliquota_icms, @aliquota_ipi, @base_custo, @cod_extra)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@tipo_conjunto", Conjunto.Tipo_Conjunto);
            insert.Parameters.AddWithValue("@fabricante", Conjunto.Fabricante);
            insert.Parameters.AddWithValue("@conjunto", Conjunto.Nome_Conjunto);
            insert.Parameters.AddWithValue("@qtd_produtos", Conjunto.Qtd_Produtos);
            insert.Parameters.AddWithValue("@tipo_venda", Conjunto.Tipo_Venda);
            insert.Parameters.AddWithValue("@aliquota_icms", Conjunto.Aliquota_ICMS);
            insert.Parameters.AddWithValue("@aliquota_ipi", Conjunto.Aliquota_IPI);
            insert.Parameters.AddWithValue("@base_custo", Conjunto.Custo_Base);
            insert.Parameters.AddWithValue("@cod_extra", Conjunto.Cod_Extra);
            insert.ExecuteNonQuery();

            conexao.Desconectar();
        }
        public void AtribuirConjuntoAoProduto(int id_produto)
        {
            string comando = "UPDATE tbl_Produtos2 SET ID_Conjunto = (SELECT TOP(1) ID_Conjunto FROM tbl_Conjuntos ORDER BY ID_Conjunto DESC) WHERE ID_Produto = @id_produto";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_produto", id_produto);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public string VerificarSeProdutoDerivaDeConjunto(int id_produto)
        {
            string comando = "SELECT Nome_Original FROM tbl_Conjuntos WHERE ID_Conjunto = (SELECT ID_Conjunto FROM tbl_Produtos2 WHERE ID_Produto = @id_produto)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_produto", id_produto);

            string conjunto;
            if (select.ExecuteScalar() == null) { conjunto = string.Empty; }
            else { conjunto = select.ExecuteScalar().ToString(); }
            conexao.Desconectar();

            return conjunto;
        }
        #endregion

        #region Etiquetas

        public string DefinirNomeDoPreco(string produto)
        {
            string[] palavras = produto.Split(' ');
            int vetores = palavras.Length;
            string novo_nome;

            if (vetores == 1)
            {
                novo_nome = produto;
            }
            else
            {
                novo_nome = string.Empty;
                int vetor_atual = 1;

                foreach (string palavra in palavras)
                {

                    if (vetor_atual == 1) { novo_nome = TrazerAbreviacao(palavra); }
                    else { novo_nome = novo_nome + " " + TrazerAbreviacao(palavra); }
                    vetor_atual++;
                }
            }

            if (novo_nome.Length > 30) { novo_nome = novo_nome.Substring(0, 30); } //Retorna o nome do preço abreviado com no máximo 30 caracteres

            return novo_nome;
        }

        public string NomeDoPreco(int id_produtoVariacao)
        {
            string comando = "SELECT Nome_Preco FROM tbl_Catalogo WHERE ID_ProdutoVariacao = @id_produtoVariacao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_produtoVariacao", id_produtoVariacao);

            string conjunto;
            if (select.ExecuteScalar() == null) { conjunto = string.Empty; }
            else { conjunto = select.ExecuteScalar().ToString(); }
            conexao.Desconectar();

            return conjunto;
        }

        public DataTable ComboBoxPedidosConfirmados()
        {
            DataTable dataTablePedidos = new DataTable("Pedidos");
            using (SqlCommand Command = new SqlCommand("SELECT (CONVERT(VARCHAR(15), ID_Pedido) + ' - ' + (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_Pedidos.ID_Fornecedor)) as Pedido FROM tbl_Pedidos WHERE Status = 'Confirmado' ORDER BY ID_Pedido DESC", conexao.Conectar()))
            {
                dataTablePedidos.Load(Command.ExecuteReader());
            }
            conexao.Desconectar();
            return dataTablePedidos;
        }

        public DataTable ComboBoxFornecedoresEntradas()
        {
            string comando = "SELECT DISTINCT (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_Entradas.ID_Fornecedor) as Fornecedor FROM tbl_Entradas ORDER BY Fornecedor";
            DataTable dataTableEntradas = new DataTable("Pedidos");
            using (SqlCommand Command = new SqlCommand(comando, conexao.Conectar()))
            {
                dataTableEntradas.Load(Command.ExecuteReader());
            }
            conexao.Desconectar();
            return dataTableEntradas;
        }

        public List<ProdutoEtiqueta> TrazerProdutosDaUltimaImpressao()
        {
            string comando = "SELECT Produto, Fornecedor, Codigo, Venda, Codigo128, Venda_Promocional FROM tbl_Precos_e_Etiquetas WHERE Produto <> ''";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            List<ProdutoEtiqueta> lista = new List<ProdutoEtiqueta>();

            while (leitor.Read())
            {
                lista.Add(new ProdutoEtiqueta
                {
                    Produto = leitor[0].ToString(),
                    Fornecedor = leitor[1].ToString(),
                    Codigo = leitor[2].ToString(),
                    Venda = leitor[3].ToString(),
                    Codigo128 = leitor[4].ToString(),
                    Venda_Promocional = leitor[5].ToString(),
                    Quantidade = 1,
                    Imprimir = true
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<ProdutoEtiqueta> TrazerProdutosDoPedido(int id)
        {
            string comando = "SELECT (SELECT Nome_Preco FROM tbl_Encapsulamento WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto) AS Produto, (SELECT Cod_Barras FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto) AS Codigo, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto)) AS Fornecedor, (SELECT Preco_Venda FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto) AS Venda, Pedido FROM tbl_ProdutosPedido WHERE ID_Pedido = @id AND Status = 'Confirmado' AND Custo = Preco_Confirmacao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            SqlDataReader leitor = select.ExecuteReader();

            List<ProdutoEtiqueta> lista = new List<ProdutoEtiqueta>();

            while (leitor.Read())
            {
                string produto = leitor[0].ToString();
                string codigo = leitor[1].ToString();
                string fornecedor = leitor[2].ToString();
                string venda = leitor[3].ToString();
                string codigo128 = ConverterStringParaCod128(leitor[1].ToString());
                int quantidade = Convert.ToInt32(leitor[4]);

                for (int i = 0; i < quantidade; i++)
                {
                    lista.Add(new ProdutoEtiqueta
                    {
                        Produto = produto,
                        Fornecedor = fornecedor,
                        Codigo = codigo,
                        Venda = venda,
                        Codigo128 = codigo128,
                        Quantidade = 1,
                        Imprimir = true
                    });
                }
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<ProdutoEtiqueta> TrazerProdutosDaEntrada(string Fornecedor)
        {
            string comando = "SELECT (SELECT Nome_Preco FROM tbl_Encapsulamento WHERE ID_Produto = tbl_ProdutosEntrada.ID_Produto) AS Produto, (SELECT Cod_Barras FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosEntrada.ID_Produto) AS Codigo, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosEntrada.ID_Produto)) AS Fornecedor, (SELECT Preco_Venda FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosEntrada.ID_Produto) AS Venda, Quantidade FROM tbl_ProdutosEntrada WHERE ID_Entrada = (SELECT TOP (1) ID_Entrada FROM tbl_Entradas WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor) ORDER BY ID_Entrada DESC)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@fornecedor", Fornecedor);
            SqlDataReader leitor = select.ExecuteReader();

            List<ProdutoEtiqueta> lista = new List<ProdutoEtiqueta>();

            while (leitor.Read())
            {
                string produto = leitor[0].ToString();
                string codigo = leitor[1].ToString();
                string fornecedor = leitor[2].ToString();
                string venda = leitor[3].ToString();
                string codigo128 = ConverterStringParaCod128(leitor[1].ToString());
                int quantidade = Convert.ToInt32(leitor[4]);

                for (int i = 0; i < quantidade; i++)
                {
                    lista.Add(new ProdutoEtiqueta
                    {
                        Produto = produto,
                        Fornecedor = fornecedor,
                        Codigo = codigo,
                        Venda = venda,
                        Codigo128 = codigo128,
                        Quantidade = 1,
                        Imprimir = true
                    });
                }
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public void ListaParaImprimirEtiquetas(int inicial, List<ProdutoEtiqueta> lista)
        {
            List<ProdutoEtiqueta> lista_impressao = new List<ProdutoEtiqueta>();

            for (int i = 1; i < inicial; i++) //adicionando etiquetas em branco com base na posição inicial
            {
                ProdutoEtiqueta Produto = new ProdutoEtiqueta();
                Produto.Produto = string.Empty;
                Produto.Codigo = string.Empty;
                Produto.Venda = string.Empty;
                Produto.Codigo128 = string.Empty;
                lista_impressao.Add(Produto);
            }

            foreach (ProdutoEtiqueta Produto in lista)
            {
                lista_impressao.Add(Produto);
            }

            string comando = "DELETE FROM tbl_Precos_e_Etiquetas";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.ExecuteNonQuery();
            conexao.Desconectar();

            foreach (ProdutoEtiqueta row in lista_impressao)
            {
                string produto = row.Produto;
                string codigo = row.Codigo;
                string venda = row.Venda;
                string venda_promocional = row.Venda_Promocional;
                string codigo128 = row.Codigo128;

                string cmd = "INSERT INTO tbl_Precos_e_Etiquetas (Produto, Codigo, Venda, Codigo128, Venda_Promocional) VALUES(@produto, @codigo, @venda, @codigo128, @venda_promocional)";
                SqlCommand insert = new SqlCommand(cmd, conexao.Conectar());
                insert.Parameters.AddWithValue("@produto", produto);
                insert.Parameters.AddWithValue("@codigo", codigo);
                insert.Parameters.AddWithValue("@venda", venda);
                insert.Parameters.AddWithValue("@venda_promocional", venda_promocional);
                insert.Parameters.AddWithValue("@codigo128", codigo128);
                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        public void ImprimirPrecosPromocionais(List<ProdutoEtiqueta> Produtos)
        {
            foreach (ProdutoEtiqueta Produto in Produtos)
            {
                Produto.Venda_Promocional = TrazerPrecoPromocional(Produto.Codigo).ToString("F");
            }

            Form1 relatorio = new Form1();
            relatorio.reportViewer1.LocalReport.DataSources.Clear();
            relatorio.reportViewer1.LocalReport.DataSources.Add(new ReportDataSource("DataSetProdutos", Produtos));

            relatorio.reportViewer1.RefreshReport();

            relatorio.ShowDialog();
        }

        public decimal TrazerPrecoPromocional(string codigo)
        {
            decimal preco;
            string comando = "SELECT ISNULL(Preco, 0) FROM tbl_ProdutosPromocao WHERE ID_Produto = (SELECT ID_ProdutoVariacao FROM tbl_ProdutoVariacao WHERE Cod_Barras = @codigo)";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@codigo", codigo);
                preco = Convert.ToDecimal(select.ExecuteScalar());
            }

            conexao.Desconectar();
            return preco;
        }

        #endregion

        #region Acabamento

        public List<ProdutoAcabamento> ProdutosSemAcabamento()
        {
            string comando = "SELECT ID_Produto, (SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE ID_Produto = tbl_Produtos.ID_Produto) AS Produto, Tipo_Acabamento, Estoque_Atual, Sem_Acabamento FROM tbl_Produtos WHERE Sem_Acabamento > 0 AND (SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE ID_Produto = tbl_Produtos.ID_Produto) IS NOT NULL";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            List<ProdutoAcabamento> Produtos = new List<ProdutoAcabamento>();
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                int id_produto = 0;
                try { id_produto = Convert.ToInt32(leitor[0]); } catch { }
                string produto = leitor[1].ToString();
                string tipo_acabamento = leitor[2].ToString();
                int estoque_atual = 0;
                try { estoque_atual = Convert.ToInt32(leitor[3]); } catch { }
                int sem_acabamento = 0;
                try { sem_acabamento = Convert.ToInt32(leitor[4]); } catch { }
                Produtos.Add(new ProdutoAcabamento
                {
                    ID_Produto = id_produto,
                    Nome_Produto = produto,
                    Tipo_Acabamento = tipo_acabamento,
                    Estoque_Atual = estoque_atual,
                    Sem_Acabamento = sem_acabamento
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return Produtos;
        }
        public void RegistrarProdutosParaAcabamento(List<ProdutoAcabamento> Produtos, int id_colaborador)
        {
            string comando = "INSERT INTO tbl_Acabamento (ID_Colaborador, Data, Status) VALUES (@id_colaborador, GETDATE(), 'Pendente')";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            insert.ExecuteNonQuery();

            foreach (ProdutoAcabamento Produto in Produtos)
            {
                if (Produto.Confirmacao)
                {
                    string comand = "INSERT INTO tbl_ProdutosAcabamento (ID_Produto, Quantidade_Exigida, ID_Acabamento) VALUES (@id_produto, @quantidade, (SELECT TOP (1) ID_Acabamento FROM tbl_Acabamento WHERE ID_Colaborador = @id_colaborador ORDER BY ID_Acabamento DESC))";
                    SqlCommand insert2 = new SqlCommand(comand, conexao.Conectar());
                    insert2.Parameters.AddWithValue("@id_produto", Produto.ID_Produto);
                    insert2.Parameters.AddWithValue("@quantidade", Produto.Quantidade);
                    insert2.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                    insert2.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();
            MessageBox.Show("Produtos registrados com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public List<ProdutoAcabamento> TrazerProdutosExigidosParaAcabamento()
        {
            string matricula = Program.matricula;
            string comando = "SELECT ID_ProdutoAcabamento, (SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE ID_Produto = tbl_ProdutosAcabamento.ID_Produto) AS Produto, (SELECT Tipo_Acabamento FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosAcabamento.ID_Produto) AS Tipo, Quantidade_Exigida AS Quantidade FROM tbl_ProdutosAcabamento WHERE ID_Acabamento = (SELECT top (1) ID_Acabamento FROM tbl_Acabamento WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Pendente' ORDER BY ID_Acabamento DESC)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            SqlDataReader leitor = select.ExecuteReader();
            List<ProdutoAcabamento> Produtos = new List<ProdutoAcabamento>();
            while (leitor.Read())
            {
                int id_produto = Convert.ToInt32(leitor[0]);
                string produto = leitor[1].ToString();
                string tipo = leitor[2].ToString();
                int quantidade = Convert.ToInt32(leitor[3]);

                Produtos.Add(new ProdutoAcabamento
                {
                    ID_Produto = id_produto,
                    Nome_Produto = produto,
                    Tipo_Acabamento = tipo,
                    Quantidade = quantidade,
                    Quantidade_Realizada = 0
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return Produtos;
        }
        public void ConfirmarQuantidadesDoAcabamento(List<ProdutoAcabamento> Produtos)
        {
            foreach (ProdutoAcabamento Produto in Produtos)
            {
                string comando = "UPDATE tbl_ProdutosAcabamento SET Quantidade_Realizada = @quantidade_realizada WHERE ID_ProdutoAcabamento = @id_produto";
                SqlCommand update = new SqlCommand(comando, conexao.Conectar());
                update.Parameters.AddWithValue("@quantidade_realizada", Produto.Quantidade_Realizada);
                update.Parameters.AddWithValue("@id_produto", Produto.ID_Produto);
                update.ExecuteNonQuery();
            }
            conexao.Desconectar();

            int id_produto = Produtos.Select(x => x.ID_Produto).FirstOrDefault();
            string comand = "UPDATE tbl_Acabamento SET Status = 'Concluído' WHERE ID_Acabamento = (SELECT ID_Acabamento FROM tbl_ProdutosAcabamento WHERE ID_ProdutoAcabamento = @id_produto)";
            SqlCommand update2 = new SqlCommand(comand, conexao.Conectar());
            update2.Parameters.AddWithValue("@id_produto", id_produto);
            update2.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Produtos confirmados!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        #endregion

        #region Listas

        public void ListaParaConferencia(int id, string fornecedor, bool imprimir)
        {
            SqlCommand delete = new SqlCommand("DELETE FROM tbl_Lista_Impressao", conexao.Conectar());
            delete.ExecuteNonQuery();

            string comando = "INSERT INTO tbl_Lista_Impressao (Produto, Codigo, Fornecedor, Venda, Quantidade, Cod_Extra) SELECT (SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto), (SELECT Cod_Barras FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto) AS Codigo, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto)) AS Fornecedor, (SELECT Preco_Venda FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto) AS Venda, Pedido, (SELECT Cod_Extra FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto) FROM tbl_ProdutosPedido WHERE ID_Pedido = @id AND Status = 'Confirmado'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            select.ExecuteNonQuery();
            conexao.Desconectar();

            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();
            string operador = Program.colaborador.Nome_Colaborador;

            formRepListaConferencia lista_conferencia = new formRepListaConferencia();
            lista_conferencia.reportViewer1.LocalReport.SetParameters(new ReportParameter("fornecedor", fornecedor));
            lista_conferencia.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            lista_conferencia.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            lista_conferencia.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));
            lista_conferencia.GerarListasTableAdapter.Fill(lista_conferencia.DataSetGerarListas.GerarListas);

            if (imprimir)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(false, lista_conferencia.reportViewer1.LocalReport);
                autoprintme.PrinterSettings.PrinterName = ObterValorDoParametroDeTexto("Impressora A4 Padrão");
                autoprintme.Print();
            }
            else
            {
                lista_conferencia.ShowDialog();
            }
        }
        public void ListaDeReajustes(string fonte, int id, string fornecedor, bool imprimir)
        {
            SqlCommand delete = new SqlCommand("DELETE FROM tbl_Lista_Impressao", conexao.Conectar());
            delete.ExecuteNonQuery();

            string comando = "";
            if (fonte == "Entrada")
                comando = "INSERT INTO tbl_Lista_Impressao (Produto, Codigo, Fornecedor, Venda, Quantidade, Cod_Extra) SELECT (SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE tbl_Encapsulamento.ID_Produto = tbl_Reajustes.ID_Produto) AS Produto, (SELECT Cod_Barras FROM tbl_Produtos WHERE tbl_Produtos.ID_Produto = tbl_Reajustes.ID_Produto) AS Codigo, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Produtos WHERE tbl_Produtos.ID_Produto = tbl_Reajustes.ID_Produto)) AS Fornecedor, Venda_Novo AS Venda, (SELECT Quantidade FROM tbl_ProdutosEntrada WHERE tbl_Reajustes.ID_Produto = tbl_ProdutosEntrada.ID_Produto AND tbl_Reajustes.ID_Entrada = tbl_ProdutosEntrada.ID_Entrada) AS Quantidade, (SELECT Cod_Extra FROM tbl_Produtos WHERE tbl_Produtos.ID_Produto = tbl_Reajustes.ID_Produto) AS Cod_Extra FROM tbl_Reajustes WHERE Motivo = (SELECT 'Entrada - ' + (CONVERT(VARCHAR(15), (SELECT TOP(1) ID_Entrada FROM tbl_Entradas WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor) ORDER BY ID_Entrada DESC))))";
            else if (fonte == "Pedido")
                comando = "INSERT INTO tbl_Lista_Impressao (Produto, Codigo, Fornecedor, Venda, Quantidade, Cod_Extra) SELECT (SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto), (SELECT Cod_Barras FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto) AS Codigo, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto)) AS Fornecedor, (SELECT Preco_Venda FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto) AS Venda, Pedido, (SELECT Cod_Extra FROM tbl_Produtos WHERE ID_Produto = tbl_ProdutosPedido.ID_Produto) FROM tbl_ProdutosPedido WHERE ID_Pedido = @id AND Status = 'Confirmado' AND Custo <> Preco_Confirmacao";

            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            select.Parameters.AddWithValue("@fornecedor", fornecedor);
            select.ExecuteNonQuery();
            conexao.Desconectar();

            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();
            string operador = Program.colaborador.Nome_Colaborador;

            formRepListaReajustes lista_reajustes = new formRepListaReajustes();
            lista_reajustes.reportViewer1.LocalReport.SetParameters(new ReportParameter("fornecedor", fornecedor));
            lista_reajustes.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            lista_reajustes.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            lista_reajustes.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));
            lista_reajustes.GerarListasTableAdapter.Fill(lista_reajustes.DataSetGerarListas.GerarListas);

            if (imprimir)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(false, lista_reajustes.reportViewer1.LocalReport);
                autoprintme.PrinterSettings.PrinterName = ObterValorDoParametroDeTexto("Impressora A4 Padrão");
                autoprintme.Print();
            }
            else
            {
                lista_reajustes.ShowDialog();
            }
        }
        public void ListaDeProdutosZerados()
        {

        }
        public string TrazerFornecedorPeloPedido(int id)
        {
            string comando = "SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Pedidos WHERE ID_Pedido = @id)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            string Fornecedor = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return Fornecedor;
        }

        #endregion

        #region Tela Principal

        public void ApagarProduto(int id_produto)
        {
            string comando = "DELETE FROM tbl_Produtos2 WHERE ID_Produto = @id_produto";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id_produto", id_produto);
            delete.ExecuteNonQuery();
            conexao.Desconectar();

            ApagarVariacaoAPartirDoProduto(id_produto);
            ApagarVinculoDeFornecedoresDoProduto(id_produto);
            ApagarVinculoDePecasDoProduto(id_produto);

            MessageBox.Show("O produto foi excluído!", "Excluído!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarVariacaoAPartirDoProduto(int id_produto)
        {
            string comando = "DELETE FROM tbl_ProdutoVariacao WHERE ID_Produto = @id_produto";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id_produto", id_produto);
            delete.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void ApagarVinculoDeFornecedoresDoProduto(int id_produto)
        {
            string comando = "DELETE FROM tbl_ProdutosFornecedores WHERE ID_Produto = (SELECT ID_ProdutoVariacao FROM tbl_ProdutoVariacao WHERE ID_Produto = @id_produto)";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id_produto", id_produto);
            delete.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void ApagarVinculoDePecasDoProduto(int id_produto)
        {
            string comando = "DELETE FROM tbl_ProdutosPecas WHERE ID_Produto = @id_produto";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id_produto", id_produto);
            delete.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void PreencherDataGridViewProdutos(DataGridView dataGridView, BindingSource bindingSource, int id_reparticao)
        {
            string comando = "SELECT ID_Produto, Nome_Produto, Cod_Barras, (SELECT Nome_Utensilio FROM tbl_Utensilios WHERE ID_Utensilio = tbl_Produtos2.ID_Utensilio) AS Utensilio, (SELECT Fabricante FROM tbl_Fabricantes WHERE ID_Fabricante = tbl_Produtos2.ID_Fabricante) AS Fabricante, (SELECT Material FROM tbl_MateriaPrima WHERE ID_MateriaPrima = tbl_Produtos2.ID_Material) AS Material, Altura, Largura, Comprimento, Diametro, Capacidade, Data_Cadastramento, Especificacao, Cod_Extra,CONVERT(DECIMAL(7, 2), Preco_Base + (Preco_Base / 100 * Aliquota_IPI) + (Preco_Base / 100 * Aliquota_ICMS)) AS Custo, ISNULL((SELECT Preco_Venda FROM tbl_Catalogo WHERE ID_ProdutoVariacao = (SELECT TOP(1) ID_ProdutoVariacao FROM tbl_ProdutoVariacao WHERE ID_Produto = tbl_Produtos2.ID_Produto)), 0) AS Venda, Aliquota_IPI, Aliquota_ICMS, Caixa, Tipo, ISNULL((SELECT SUM(Quantidade) FROM tbl_ProdutosLote WHERE Disponibilidade = 1 AND (SELECT ID_Produto FROM tbl_Produtos2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Produtos2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Produtoslote.ID_ProdutoVariacao))) = tbl_Produtos2.ID_Produto), 0) AS Estoque_Atual, ISNULL((SELECT SUM(Quantidade) FROM tbl_ProdutosLote WHERE Disponibilidade = 1 AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = @id_reparticao AND (SELECT ID_Produto FROM tbl_Produtos2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Produtos2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Produtoslote.ID_ProdutoVariacao))) = tbl_Produtos2.ID_Produto), 0) AS Reparticao FROM tbl_Produtos2";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_reparticao", id_reparticao);
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGridView.DataSource = bindingSource;
            }

            conexao.Desconectar();
        }

        public List<Produto_Lote> QuantidadesDoProdutoPorReparticao(int id)
        {
            List<Produto_Lote> quantidades = new List<Produto_Lote>();

            string comando = "SELECT (SELECT Descricao + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = tbl_ReparticoesEstabelecimentos.ID_Estabelecimento) FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao)) AS Reparticao, COUNT(*) AS Quantidade FROM tbl_ProdutosLote WHERE (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao) = @id_produto AND Disponibilidade = 1 GROUP BY tbl_ProdutosLote.ID_Localizacao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_produto", id);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        quantidades.Add(new Produto_Lote
                        {
                            Localizacao = leitor[0].ToString(),
                            Quantidade = Convert.ToInt32(leitor[1])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return quantidades;
        }

        public decimal PesquisarPrecoDeCustoPeloNomeDoSistema(string nome_sistema)
        {
            SqlCommand comando = new SqlCommand("SELECT Preco_Custo FROM tbl_Produtos WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema)", conexao.Conectar());
            comando.Parameters.AddWithValue("@nome_sistema", nome_sistema);
            decimal custo = Convert.ToDecimal(comando.ExecuteScalar());
            conexao.Desconectar();
            return custo;
        }

        public decimal PesquisarPrecoDeVendaPeloNomeDoSistema(string nome_sistema)
        {
            SqlCommand comando = new SqlCommand("SELECT Preco_Venda FROM tbl_Produtos WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema)", conexao.Conectar());
            comando.Parameters.AddWithValue("@nome_sistema", nome_sistema);
            decimal custo = Convert.ToDecimal(comando.ExecuteScalar());
            conexao.Desconectar();
            return custo;
        }

        public decimal PesquisarPrecoDeVendaPeloNomeDoCatalogo(string nome)
        {
            decimal custo = 0;

            using (SqlCommand comando = new SqlCommand("SELECT Preco_Venda FROM tbl_Catalogo WHERE Nome = @nome", conexao.Conectar()))
            {
                comando.Parameters.AddWithValue("@nome", nome);
                custo = Convert.ToDecimal(comando.ExecuteScalar());
                conexao.Desconectar();
            }

            return custo;
        }

        public bool VerificarNomeDoSistema(string produto)
        {
            SqlCommand comando = new SqlCommand("SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE Nome_Sistema = @produto", conexao.Conectar());

            comando.Parameters.AddWithValue("@produto", produto);
            string resultado = Convert.ToString(comando.ExecuteScalar());
            bool verificar;
            if (resultado == string.Empty) { verificar = false; }
            else { verificar = true; }
            conexao.Desconectar();
            return verificar;
        }

        public void EncapsularProdutoTemporariamente(int id_produto)
        {
            string comando = "INSERT INTO tbl_Encapsulamento (ID_Utensilio, ID_Produto, Nome_Sistema, Data, Ativacao, Status, Estoque_Minimo, Estoque_Ideal, Ideal_Loja, Ideal_Estoque, Ideal_Deposito, CMR_Loja, CMR_Estoque) VALUES ((SELECT ID_Utensilio FROM tbl_Produtos WHERE ID_Produto = @id_produto), @id_produto, (SELECT Nome_Produto FROM tbl_Produtos WHERE ID_Produto = @id_produto), GETDATE(), 'Sim', 'Temporária', 0, 0, 0, 0, 0, 0, 0)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@id_produto", id_produto);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Produto temporariamente encapsulado.\r\nO sistema poderá apresentar problemas caso as informações\r\ncomplementares não sejam fornecidas.", "Encapsulado", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        #endregion

        #region Cadastramento / Edição

        public List<string> TrazerCategorias()//Preencher Combobox Categorias
        {
            List<string> Categorias = new List<string>();
            using (SqlCommand select = new SqlCommand("SELECT Nome_Categoria FROM tbl_Categorias ORDER BY Nome_Categoria", conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read()) { Categorias.Add(leitor[0].ToString()); }
                }
            }
            conexao.Desconectar();

            return Categorias;
        }

        public List<string> TrazerFabricantes()//Preencher Combobox Fabricantes
        {
            List<string> Fabricantes = new List<string>();
            using (SqlCommand select = new SqlCommand("SELECT Fabricante FROM tbl_Fabricantes ORDER BY Fabricante", conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read()) { Fabricantes.Add(leitor[0].ToString()); }
                }
            }
            conexao.Desconectar();

            return Fabricantes;
        }

        public List<string> TrazerMateriaPrima()//Preencher Combobox Matéria-prima
        {
            List<string> Materiais = new List<string>();
            using (SqlCommand select = new SqlCommand("SELECT Material FROM tbl_MateriaPrima ORDER BY Material", conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read()) { Materiais.Add(leitor[0].ToString()); }
                }
            }
            conexao.Desconectar();
            return Materiais;
        }

        public Fornecedor TrazerImpostoPeloFornecedor(string fornecedor)
        {
            Fornecedor Fornecedor = new Fornecedor();
            string comando = "SELECT TOP (1) ISNULL(IPI, 0), ISNULL(ICMS, 0) FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@fornecedor", fornecedor);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Fornecedor.IPI = Convert.ToDecimal(leitor[0]);
                Fornecedor.ICMS = Convert.ToDecimal(leitor[1]);
            }
            leitor.Close();
            conexao.Desconectar();
            return Fornecedor;
        }

        public AutoCompleteStringCollection AutoCompleteUtensilios()//Sugestão enquanto digita utensílio
        {
            SqlCommand comando = new SqlCommand("SELECT Nome_utensilio FROM tbl_Utensilios ORDER BY Nome_utensilio", conexao.Conectar());
            SqlDataReader leitor = comando.ExecuteReader();
            AutoCompleteStringCollection colecao = new AutoCompleteStringCollection();
            while (leitor.Read())
            {
                colecao.Add(leitor["Nome_Utensilio"].ToString());
            }
            leitor.Close();
            conexao.Desconectar();
            return colecao;
        }

        public bool ConfirmarUtensilio(string utensilio)//Veririfca se Utensílio já existe
        {
            string utensilioencontrado;
            SqlCommand comando = new SqlCommand("SELECT Nome_utensilio FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio", conexao.Conectar());
            comando.Parameters.AddWithValue("@utensilio", utensilio);
            utensilioencontrado = Convert.ToString(comando.ExecuteScalar());
            if (utensilio == utensilioencontrado)
            {
                conexao.Desconectar();
                return true;
            }
            else
            {
                conexao.Desconectar();
                return false;
            }
        }

        public List<string> TrazerUtensilios()//Preencher Combobox Utensílio
        {
            List<string> Utensilios = new List<string>();
            using (SqlCommand select = new SqlCommand("SELECT  Nome_utensilio FROM tbl_Utensilios ORDER BY Nome_Utensilio", conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read()) { Utensilios.Add(leitor[0].ToString()); }
                }
            }
            conexao.Desconectar();
            return Utensilios;
        }

        public int IdDoUltimoProdutoCadastrado(string produto)
        {
            string comando = "SELECT TOP (1) ID_Produto FROM tbl_Produtos2 WHERE Nome_Produto = @produto ORDER BY ID_Produto DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@produto", produto);
            int id = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();

            return id;
        }

        public void CadastrarProdutos(bool cadastrar_conjunto, Produto Produto, Conjunto Conjunto)
        {
            string produto;
            string utensilio;
            string conjunto = string.Empty;
            string tipo_conjunto;
            decimal aliquota_icms;
            decimal aliquota_ipi;
            decimal base_custo;
            string fabricante;

            if (cadastrar_conjunto)
            {
                tipo_conjunto = Conjunto.Tipo_Conjunto;
                string tipo_venda = Conjunto.Tipo_Venda;
                conjunto = Conjunto.Nome_Conjunto;
                fabricante = Conjunto.Fabricante;
                int qtd_produtos = Conjunto.Qtd_Produtos;
                base_custo = Conjunto.Custo_Base;
                aliquota_icms = Conjunto.Aliquota_ICMS;
                aliquota_ipi = Conjunto.Aliquota_IPI;
                string cod_extra = Conjunto.Cod_Extra;

                string comando = "INSERT INTO tbl_Conjuntos (Tipo_Conjunto, ID_Fabricante, Nome_Original, Qtd_Produtos, Tipo_Venda, Aliquota_ICMS, Aliquota_IPI, Preco_Base, Cod_Extra) VALUES (@tipo_conjunto, (SELECT ID_Fabricante FROM tbl_Fabricantes WHERE Fabricante = @fabricante), @conjunto, @qtd_produtos, @tipo_venda, @aliquota_icms, @aliquota_ipi, @base_custo, @cod_extra)";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@tipo_conjunto", tipo_conjunto);
                insert.Parameters.AddWithValue("@fabricante", fabricante);
                insert.Parameters.AddWithValue("@conjunto", conjunto);
                insert.Parameters.AddWithValue("@qtd_produtos", qtd_produtos);
                insert.Parameters.AddWithValue("@tipo_venda", tipo_venda);
                insert.Parameters.AddWithValue("@aliquota_icms", aliquota_icms);
                insert.Parameters.AddWithValue("@aliquota_ipi", aliquota_ipi);
                insert.Parameters.AddWithValue("@base_custo", base_custo);
                insert.Parameters.AddWithValue("@cod_extra", cod_extra);
                insert.ExecuteNonQuery();

                conexao.Desconectar();
            }


            produto = Produto.Nome_Produto;
            utensilio = Produto.Utensilio;
            fabricante = Produto.Fabricante;
            string material = Produto.MateriaPrima;
            string codbarras = Produto.Cod_Barras;

            string altura;
            if (Produto.Altura == null) { altura = string.Empty; }
            else { altura = Produto.Altura; }
            string largura;
            if (Produto.Largura == null) { largura = string.Empty; }
            else { largura = Produto.Largura; }
            string comprimento;
            if (Produto.Comprimento == null) { comprimento = string.Empty; }
            else { comprimento = Produto.Comprimento; }
            string diametro;
            if (Produto.Diametro == null) { diametro = string.Empty; }
            else { diametro = Produto.Diametro; }
            string capacidade;
            if (Produto.Capacidade == null) { capacidade = string.Empty; }
            else { capacidade = Produto.Capacidade; }
            string especificacao;
            if (Produto.Especificacao == null) { especificacao = string.Empty; }
            else { especificacao = Produto.Especificacao; }
            string codextra;
            if (Produto.Cod_Extra == null) { codextra = string.Empty; }
            else { codextra = Produto.Cod_Extra; }

            base_custo = Produto.Preco_Base;
            aliquota_icms = Produto.Aliquota_ICMS;
            aliquota_ipi = Produto.Aliquota_IPI;

            int caixa = Produto.Caixa;
            string tipo = "Produto";


            string comando2;

            if (!cadastrar_conjunto)
            {
                comando2 = "INSERT INTO tbl_Produtos2 (Nome_Produto, ID_Utensilio, ID_Fabricante, ID_Material, Altura, Largura, Comprimento, Diametro, Capacidade, Data_Cadastramento, Especificacao, Cod_Extra, Preco_Base, Aliquota_ICMS, Aliquota_IPI, Caixa, Tipo, Cod_Barras) VALUES (@produto, (SELECT ID_Utensilio FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio), (SELECT ID_Fabricante FROM tbl_Fabricantes WHERE Fabricante = @fabricante), (SELECT ID_MateriaPrima FROM tbl_MateriaPrima WHERE Material = @material), @altura, @largura, @comprimento, @diametro, @capacidade, GETDATE(), @especificacao, @codextra, @preco_base, @aliquota_icms, @aliquota_ipi, @caixa, @tipo, @codbarras)";
            }
            else
            {
                comando2 = "INSERT INTO tbl_Produtos2 (Nome_Produto, ID_Utensilio, ID_Fabricante, ID_Material, ID_Conjunto, Altura, Largura, Comprimento, Diametro, Capacidade, Data_Cadastramento, Especificacao, Cod_Extra, Preco_Base, Aliquota_ICMS, Aliquota_IPI, Caixa, Tipo, Cod_Barras) VALUES (@produto, (SELECT ID_Utensilio FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio), (SELECT ID_Fabricante FROM tbl_Fabricantes WHERE Fabricante = @fabricante), (SELECT ID_MateriaPrima FROM tbl_MateriaPrima WHERE Material = @material), (SELECT ID_Conjunto FROM tbl_Conjuntos WHERE Nome_Original = @conjunto), @altura, @largura, @comprimento, @diametro, @capacidade, GETDATE(), @especificacao, @codextra, @preco_base, @aliquota_icms, @aliquota_ipi, @caixa, @tipo, @codbarras)";
            }

            SqlCommand insert2 = new SqlCommand(comando2, conexao.Conectar());
            insert2.Parameters.AddWithValue("@produto", produto);
            insert2.Parameters.AddWithValue("@utensilio", utensilio);
            insert2.Parameters.AddWithValue("@fabricante", fabricante);
            insert2.Parameters.AddWithValue("@material", material);

            if (cadastrar_conjunto)
            {
                insert2.Parameters.AddWithValue("@conjunto", conjunto);
            }

            insert2.Parameters.AddWithValue("@altura", altura);
            insert2.Parameters.AddWithValue("@largura", largura);
            insert2.Parameters.AddWithValue("@comprimento", comprimento);
            insert2.Parameters.AddWithValue("@diametro", diametro);
            insert2.Parameters.AddWithValue("@capacidade", capacidade);
            insert2.Parameters.AddWithValue("@especificacao", especificacao);
            insert2.Parameters.AddWithValue("@codextra", codextra);
            insert2.Parameters.AddWithValue("@preco_base", base_custo);
            insert2.Parameters.AddWithValue("@aliquota_icms", aliquota_icms);
            insert2.Parameters.AddWithValue("@aliquota_ipi", aliquota_ipi);
            insert2.Parameters.AddWithValue("@caixa", caixa);
            insert2.Parameters.AddWithValue("@tipo", tipo);
            insert2.Parameters.AddWithValue("@codbarras", codbarras);

            insert2.ExecuteNonQuery();
            conexao.Desconectar();


            if (cadastrar_conjunto)
                MessageBox.Show("Conjunto de produtos cadastrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            else
                MessageBox.Show("Produto cadastrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<Fornecedor> FornecedoresDaVariacao(int id)
        {
            List<Fornecedor> Fornecedores = new List<Fornecedor>();
            string comando = "SELECT ID_Fornecedor, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_ProdutosFornecedores.ID_Fornecedor) AS Fornecedor, Ativacao, Disponibilidade FROM tbl_ProdutosFornecedores WHERE ID_Produto = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Fornecedores.Add(new Fornecedor
                {
                    ID_Fornecedor = Convert.ToInt32(leitor[0]),
                    Nome_Fornecedor = leitor[1].ToString(),
                    Ativacao = Convert.ToBoolean(leitor[2]),
                    Disponibilidade = Convert.ToBoolean(leitor[3])
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return Fornecedores;
        }

        public void CadastrarVariacao(Produto_Variacao Variacao)
        {
            string comando = "INSERT INTO tbl_ProdutoVariacao (ID_Produto, Cod_Barras, ID_Cor, ID_Estampa, Ativacao, Disponibilidade, Imprimir_Codigo) VALUES (@id_produto, @cod_barras, (SELECT ID_Cor FROM tbl_Cores WHERE Cor = @cor), (SELECT ID_Estampa FROM tbl_Estampas WHERE Estampa = @estampa), @ativacao, @disponibilidade, @imprimir_codigo)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@id_produto", Variacao.ID_Produto);
            insert.Parameters.AddWithValue("@cod_barras", Variacao.Cod_Barras);
            insert.Parameters.AddWithValue("@cor", Variacao.Cor);
            insert.Parameters.AddWithValue("@estampa", Variacao.Estampa);
            insert.Parameters.AddWithValue("@ativacao", Variacao.Ativacao);
            insert.Parameters.AddWithValue("@disponibilidade", Variacao.Disponibilidade);
            insert.Parameters.AddWithValue("@imprimir_codigo", Variacao.Imprimir_Codigo);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            AtualizarFornecedoresDaVariacao(Variacao.Fornecedores, IdDaUltimaVariacaoCadastrada(Variacao.ID_Produto));

            MessageBox.Show("Variação cadastrada!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void EditarVariacao(Produto_Variacao Variacao)
        {
            string comando = "UPDATE tbl_ProdutoVariacao SET Cod_Barras = @cod_barras, ID_Cor = (SELECT ID_Cor FROM tbl_Cores WHERE Cor = @cor), ID_Estampa = (SELECT ID_Estampa FROM tbl_Estampas WHERE Estampa = @estampa), Ativacao = @ativacao, Disponibilidade = @disponibilidade, Imprimir_Codigo = @imprimir_codigo WHERE ID_ProdutoVariacao = @id";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id", Variacao.ID_ProdutoVariacao);
            update.Parameters.AddWithValue("@cod_barras", Variacao.Cod_Barras);
            update.Parameters.AddWithValue("@cor", Variacao.Cor);
            update.Parameters.AddWithValue("@estampa", Variacao.Estampa);
            update.Parameters.AddWithValue("@ativacao", Variacao.Ativacao);
            update.Parameters.AddWithValue("@disponibilidade", Variacao.Disponibilidade);
            update.Parameters.AddWithValue("@imprimir_codigo", Variacao.Imprimir_Codigo);
            update.ExecuteNonQuery();

            conexao.Desconectar();

            AtualizarFornecedoresDaVariacao(Variacao.Fornecedores, Variacao.ID_ProdutoVariacao);

            MessageBox.Show("Variação editada!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void AtualizarFornecedoresDaVariacao(List<Fornecedor> Fornecedores, int id)
        {
            string cmd = "DELETE FROM tbl_ProdutosFornecedores WHERE ID_Produto = @id";
            SqlCommand delete = new SqlCommand(cmd, conexao.Conectar());
            delete.Parameters.AddWithValue("@id", id);
            delete.ExecuteNonQuery();

            foreach (Fornecedor fornecedor in Fornecedores)
            {
                string comando = "INSERT INTO tbl_ProdutosFornecedores (ID_Produto, ID_Fornecedor, Ativacao, Disponibilidade) VALUES (@id, (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor), @ativacao, @disponibilidade)";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@id", id);
                insert.Parameters.AddWithValue("@fornecedor", fornecedor.Nome_Fornecedor);
                insert.Parameters.AddWithValue("@ativacao", fornecedor.Ativacao);
                insert.Parameters.AddWithValue("@disponibilidade", fornecedor.Disponibilidade);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public int IdDaUltimaVariacaoCadastrada(int id_produto)
        {
            string comando = "SELECT TOP (1) ID_ProdutoVariacao FROM tbl_ProdutoVariacao WHERE ID_Produto = @id_produto ORDER BY ID_ProdutoVariacao DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_produto", id_produto);
            int id = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();

            return id;
        }

        public bool VerificarNome(string nome)
        {
            string comando = "SELECT Nome_Original FROM tbl_Conjuntos WHERE Nome_Original = @nome";

            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@nome", nome);

            string resultado;
            try
            {
                resultado = select.ExecuteScalar().ToString();
            }
            catch { resultado = string.Empty; }

            bool verificar;

            if (resultado == string.Empty)
            {
                verificar = false;
            }
            else
            {
                verificar = true;
            }

            conexao.Desconectar();
            return verificar;
        }

        public string VerificarCodigo(string codigo)
        {
            string cod_barras = string.Empty;
            string comando = "SELECT Cod_Barras FROM tbl_ProdutoVariacao WHERE Cod_Barras = @codigo";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@codigo", codigo);
                cod_barras = Convert.ToString(select.ExecuteScalar());
            }

            conexao.Desconectar();
            return cod_barras;
        }
        //Edição
        public Produto TrazerTodasInformacoesDoProduto(int id_produto)
        {
            string comando = "SELECT Nome_Produto, Cod_Barras, tbl_Utensilios.Nome_utensilio AS Utensilio, tbl_Fabricantes.Fabricante, tbl_MateriaPrima.Material, Altura, Largura, Comprimento, Diametro, Capacidade, Especificacao, Cod_Extra, Preco_Base, Aliquota_ICMS, Aliquota_IPI, Caixa FROM tbl_Produtos2 INNER JOIN tbl_Fabricantes ON tbl_Produtos2.ID_Fabricante = tbl_Fabricantes.ID_Fabricante INNER JOIN tbl_MateriaPrima ON tbl_Produtos2.ID_Material = tbl_MateriaPrima.ID_MateriaPrima INNER JOIN tbl_Utensilios ON tbl_Utensilios.ID_Utensilio = tbl_Produtos2.ID_Utensilio WHERE ID_Produto = @id_produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_produto", id_produto);
            SqlDataReader leitor = select.ExecuteReader();
            Produto Produto = new Produto();

            while (leitor.Read())
            {
                string Nome_Produto = leitor["Nome_Produto"].ToString();
                string Cod_Barras = leitor["Cod_Barras"].ToString();
                string Utensilio = leitor["Utensilio"].ToString();
                string Fabricante = leitor["Fabricante"].ToString();
                string Material = leitor["Material"].ToString();
                string Altura = leitor["Altura"].ToString();
                string Largura = leitor["Largura"].ToString();
                string Comprimento = leitor["Comprimento"].ToString();
                string Diametro = leitor["Diametro"].ToString();
                string Capacidade = leitor["Capacidade"].ToString();
                string Especificacao = leitor["Especificacao"].ToString();
                string Cod_Extra = leitor["Cod_Extra"].ToString();
                decimal Preco_Base;
                try { Preco_Base = Convert.ToDecimal(leitor["Preco_Base"]); }
                catch { Preco_Base = 0; }
                decimal Aliquota_ICMS;
                try { Aliquota_ICMS = Convert.ToDecimal(leitor["Aliquota_ICMS"]); }
                catch { Aliquota_ICMS = 0; }
                decimal Aliquota_IPI;
                try { Aliquota_IPI = Convert.ToDecimal(leitor["Aliquota_IPI"]); }
                catch { Aliquota_IPI = 0; }
                int qtd_Caixa;
                try
                {
                    qtd_Caixa = Convert.ToInt32(leitor["Caixa"]);
                }
                catch { qtd_Caixa = 0; }

                Produto = new Produto()
                {
                    ID_Produto = id_produto,
                    Nome_Produto = Nome_Produto,
                    Cod_Barras = Cod_Barras,
                    Cod_Extra = Cod_Extra,
                    Utensilio = Utensilio,
                    Fabricante = Fabricante,
                    MateriaPrima = Material,
                    Altura = Altura,
                    Largura = Largura,
                    Comprimento = Comprimento,
                    Diametro = Diametro,
                    Capacidade = Capacidade,
                    Especificacao = Especificacao,
                    Preco_Base = Preco_Base,
                    Aliquota_ICMS = Aliquota_ICMS,
                    Aliquota_IPI = Aliquota_IPI,
                    Caixa = qtd_Caixa
                };
            }
            leitor.Close();

            conexao.Desconectar();

            return Produto;
        }

        public int TrazerIdDoProdutoPelaVariacao(int id_produtoVariacao)
        {
            int id_produto;
            string comando = "SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = @id";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_produtoVariacao);
                id_produto = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return id_produto;
        }

        public List<Produto_Variacao> TrazerVariacoesDoProduto(int id_produto)
        {
            string comando = "SELECT ID_ProdutoVariacao, Cod_Barras, (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) AS Cor, (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa), Ativacao, Disponibilidade, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto), Imprimir_Codigo FROM tbl_ProdutoVariacao WHERE ID_Produto = @id_produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_produto", id_produto);
            SqlDataReader leitor = select.ExecuteReader();
            List<Produto_Variacao> Variacoes = new List<Produto_Variacao>();

            while (leitor.Read())
            {
                Variacoes.Add(new Produto_Variacao
                {
                    ID_ProdutoVariacao = Convert.ToInt32(leitor[0]),
                    Cod_Barras = leitor[1].ToString(),
                    Cor = leitor[2].ToString(),
                    Estampa = leitor[3].ToString(),
                    Ativacao = Convert.ToBoolean(leitor[4]),
                    Disponibilidade = Convert.ToBoolean(leitor[5]),
                    Nome_Produto = leitor[6].ToString(),
                    Imprimir_Codigo = Convert.ToBoolean(leitor[7])
                });
            }
            leitor.Close();
            conexao.Desconectar();

            foreach (Produto_Variacao Variacao in Variacoes)
            {
                string cmd = "SELECT tbl_Fornecedores.ID_Fornecedor AS ID, Nome_Fornecedor AS Fornecedor, tbl_ProdutosFornecedores.Ativacao, tbl_ProdutosFornecedores.Disponibilidade FROM tbl_ProdutosFornecedores INNER JOIN tbl_Fornecedores ON tbl_Fornecedores.ID_Fornecedor = tbl_ProdutosFornecedores.ID_Fornecedor WHERE ID_Produto = @variacao";
                using (SqlCommand slct = new SqlCommand(cmd, conexao.Conectar()))
                {
                    slct.Parameters.AddWithValue("@variacao", Variacao.ID_ProdutoVariacao);
                    List<Fornecedor> Fornecedores = new List<Fornecedor>();

                    using (SqlDataReader leitor2 = slct.ExecuteReader())
                    {
                        while (leitor2.Read())
                        {
                            Fornecedores.Add(new Fornecedor
                            {
                                ID_Fornecedor = Convert.ToInt32(leitor2[0]),
                                Nome_Fornecedor = leitor2[1].ToString(),
                                Ativacao = Convert.ToBoolean(leitor2[2]),
                                Disponibilidade = Convert.ToBoolean(leitor2[3])
                            });
                        }
                    }

                    Variacao.Fornecedores = Fornecedores;
                }
            }

            conexao.Desconectar();

            return Variacoes;
        }
        public int QuantidadeDeVariacoesDoProduto(int id_produto)
        {
            string comando = "SELECT ISNULL(COUNT(*), 0) FROM tbl_ProdutoVariacao WHERE ID_Produto = @id_produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_produto", id_produto);
            int quantidade = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();
            return quantidade;
        }
        public int QuantidadeDeProdutosEmEstoque(int id_produto)
        {
            string comando = "SELECT ISNULL(SUM(Quantidade), 0) FROM tbl_ProdutosLote WHERE ID_ProdutoVariacao = (SELECT ID_ProdutoVariacao FROM tbl_ProdutoVariacao WHERE ID_Produto = @id_produto)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_produto", id_produto);
            int quantidade = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();
            return quantidade;
        }
        public void ApagarVariacaoDoProduto(int id)
        {
            string comando = "DELETE FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = @id";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id", id);
            delete.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Variação excluída permanentemente.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public List<string> PreencherComboBoxCores()
        {
            List<string> lista = new List<string>();
            SqlCommand select = new SqlCommand("SELECT Cor FROM tbl_Cores ORDER BY Cor ASC", conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }
        public List<string> PreencherComboBoxEstampas()
        {
            List<string> lista = new List<string>();
            SqlCommand select = new SqlCommand("SELECT Estampa FROM tbl_Estampas ORDER BY Estampa ASC", conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }
        public string PreencherTotalComprado(string produto)
        {
            string comando = "SELECT SUM (Preco_Custo) FROM tbl_ProdutosComprados WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Produtos WHERE Nome_Produto = @produto)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@produto", produto);
            decimal resultado;
            try
            {
                resultado = Convert.ToDecimal(select.ExecuteScalar());
            }
            catch { resultado = 0; }
            string valor = resultado.ToString("C");
            conexao.Desconectar();
            return valor;
        }
        public string PreencherTotalVendido(string produto)
        {
            string comando = "SELECT SUM (Preco_Vendido) FROM tbl_ProdutosVendidos WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Produtos WHERE Nome_Produto = @produto)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@produto", produto);
            decimal resultado;
            try
            {
                resultado = Convert.ToDecimal(select.ExecuteScalar());
            }
            catch { resultado = 0; }
            string valor = resultado.ToString("C");
            conexao.Desconectar();
            return valor;
        }
        public void EditarProduto(Produto Produto)
        {
            int id_produto = Produto.ID_Produto;
            string produto = Produto.Nome_Produto;
            string utensilio = Produto.Utensilio;
            string fabricante = Produto.Fabricante;
            string material = Produto.MateriaPrima;
            string codbarras = Produto.Cod_Barras;

            string altura;
            if (Produto.Altura == null) { altura = string.Empty; }
            else { altura = Produto.Altura; }
            string largura;
            if (Produto.Largura == null) { largura = string.Empty; }
            else { largura = Produto.Largura; }
            string comprimento;
            if (Produto.Comprimento == null) { comprimento = string.Empty; }
            else { comprimento = Produto.Comprimento; }
            string diametro;
            if (Produto.Diametro == null) { diametro = string.Empty; }
            else { diametro = Produto.Diametro; }
            string capacidade;
            if (Produto.Capacidade == null) { capacidade = string.Empty; }
            else { capacidade = Produto.Capacidade; }
            string especificacao;
            if (Produto.Especificacao == null) { especificacao = string.Empty; }
            else { especificacao = Produto.Especificacao; }
            string codextra;
            if (Produto.Cod_Extra == null) { codextra = string.Empty; }
            else { codextra = Produto.Cod_Extra; }

            decimal base_custo = Produto.Preco_Base;
            decimal aliquota_icms = Produto.Aliquota_ICMS;
            decimal aliquota_ipi = Produto.Aliquota_IPI;

            int caixa = Produto.Caixa;

            string comando = "UPDATE tbl_Produtos2 SET Nome_Produto = @produto, ID_Utensilio = (SELECT ID_Utensilio FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio), ID_Fabricante = (SELECT ID_Fabricante FROM tbl_Fabricantes WHERE Fabricante = @fabricante), ID_Material = (SELECT ID_MateriaPrima FROM tbl_MateriaPrima WHERE Material = @material), Altura = @altura, Largura = @largura, Comprimento = @comprimento, Diametro = @diametro, Capacidade = @capacidade, Especificacao = @especificacao, Cod_Extra = @codextra, Preco_Base = @preco_base, Aliquota_ICMS = @aliquota_icms, Aliquota_IPI = @aliquota_ipi, Caixa = @caixa, Cod_Barras = @codbarras WHERE ID_Produto = @id_produto";
            SqlCommand editar = new SqlCommand(comando, conexao.Conectar());

            editar.Parameters.AddWithValue("@id_produto", id_produto);
            editar.Parameters.AddWithValue("@produto", produto);
            editar.Parameters.AddWithValue("@fabricante", fabricante);
            editar.Parameters.AddWithValue("@material", material);
            editar.Parameters.AddWithValue("@codextra", codextra);
            editar.Parameters.AddWithValue("@caixa", caixa);
            editar.Parameters.AddWithValue("@utensilio", utensilio);
            editar.Parameters.AddWithValue("@preco_base", base_custo);
            editar.Parameters.AddWithValue("@aliquota_icms", aliquota_icms);
            editar.Parameters.AddWithValue("@aliquota_ipi", aliquota_ipi);
            editar.Parameters.AddWithValue("@capacidade", capacidade);
            editar.Parameters.AddWithValue("@altura", altura);
            editar.Parameters.AddWithValue("@largura", largura);
            editar.Parameters.AddWithValue("@comprimento", comprimento);
            editar.Parameters.AddWithValue("@diametro", diametro);
            editar.Parameters.AddWithValue("@especificacao", especificacao);
            editar.Parameters.AddWithValue("@codbarras", codbarras);

            editar.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Produto editado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        #endregion

        #region Lotes

        public void RegistrarAtualizacaoDeStatus(Produto_Lote Produto)
        {
            string comando = "INSERT INTO tbl_StatusProdutos (Status, ID_ProdutoLote, ID_Colaborador, Data) VALUES (@status, @id_produtoLote, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE())";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@status", Produto.Status);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.Parameters.AddWithValue("@id_produtoLote", Produto.ID_ProdutoLote);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void RegistrarAtualizacaoDeStatusAoConfirmarProdutosPelaEntrada(int id_entrada)
        {
            string comando2 = "INSERT INTO tbl_StatusProdutos (Status, ID_ProdutoLote, ID_Colaborador, Data) SELECT 'Quarentena', ID_ProdutoLote, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE() FROM tbl_ProdutosLote WHERE ID_Lote = @id";
            using (SqlCommand insert = new SqlCommand(comando2, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id", id_entrada);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        } //Quarentena

        public void RegistrarAtualizacaoDeStatusAoConfirmarProdutosPeloPedido(int id_pedido) //Quarentena
        {
            string comando2 = "INSERT INTO tbl_StatusProdutos (Status, ID_ProdutoLote, ID_Colaborador, Data) SELECT 'Quarentena', ID_ProdutoLote, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE() FROM tbl_ProdutosLote WHERE ID_Lote = (SELECT ID_Entrada FROM tbl_Lotes WHERE ID_Pedido = @id_pedido)";
            using (SqlCommand insert = new SqlCommand(comando2, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_pedido", id_pedido);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void RegistrarAtualizacaoDeStatusPelaEntrada(string status) //Recebimento, Ajuste por Entrada, Quarentena, Devolução para Central
        {
            string comando = "INSERT INTO tbl_StatusProdutos (Status, ID_ProdutoLote, ID_Colaborador, Data) VALUES (@status, (SELECT TOP(1) ID_ProdutoLote FROM tbl_ProdutosLote ORDER BY ID_ProdutoLote DESC), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE())";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@status", status);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        #region Loteamento

        public void PreencherDataGridLotes(DataGridView dataGridView, BindingSource bindingSource, bool todos, int registros)
        {
            string comando;

            if (todos)
            {
                comando = "SELECT ID_Lote, tbl_ProdutosLote.ID_ProdutoVariacao AS ID, tbl_ProdutosLote.Cod_Barras, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Produto, SUM(Quantidade) AS Quantidade, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_ProdutosLote.ID_Fornecedor) AS Fornecedor, (SELECT Localizacao + ' - ' + SUBSTRING((SELECT Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao) + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao)), 1, 1) + SUBSTRING((SELECT Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao) + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao)), 2, LEN((SELECT Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao) + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao))) - 1) FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) AS Localizacao, Status, IIF(tbl_ProdutosLote.Disponibilidade = 1, (SELECT Imagem FROM tbl_Imagens WHERE Descricao = 'OK'), IIF(Status = 'Vendido', (SELECT Imagem FROM tbl_Imagens WHERE Descricao = 'VENDIDO'), (SELECT Imagem FROM tbl_Imagens WHERE Descricao = 'EXCLAMAÇÃO'))) AS Disponibilidade FROM tbl_ProdutosLote INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao GROUP BY ID_Lote, ID_Produto, tbl_ProdutosLote.Cod_Barras, tbl_ProdutosLote.ID_ProdutoVariacao, ID_Cor, ID_Estampa, ID_Fornecedor, ID_Localizacao, Status, tbl_ProdutosLote.Disponibilidade ORDER BY ID_Lote DESC, Produto";
            }
            else
            {
                comando = "SELECT TOP(@registros) ID_Lote, tbl_ProdutosLote.ID_ProdutoVariacao AS ID, tbl_ProdutosLote.Cod_Barras, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Produto, SUM(Quantidade) AS Quantidade, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_ProdutosLote.ID_Fornecedor) AS Fornecedor, (SELECT Localizacao + ' - ' + SUBSTRING((SELECT Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao) + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao)), 1, 1) + SUBSTRING((SELECT Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao) + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao)), 2, LEN((SELECT Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao) + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao))) - 1) FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) AS Localizacao, Status, IIF(tbl_ProdutosLote.Disponibilidade = 1, (SELECT Imagem FROM tbl_Imagens WHERE Descricao = 'OK'), IIF(Status = 'Vendido', (SELECT Imagem FROM tbl_Imagens WHERE Descricao = 'VENDIDO'), (SELECT Imagem FROM tbl_Imagens WHERE Descricao = 'EXCLAMAÇÃO'))) AS Disponibilidade FROM tbl_ProdutosLote INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao GROUP BY ID_Lote, ID_Produto, tbl_ProdutosLote.Cod_Barras, tbl_ProdutosLote.ID_ProdutoVariacao, ID_Cor, ID_Estampa, ID_Fornecedor, ID_Localizacao, Status, tbl_ProdutosLote.Disponibilidade ORDER BY ID_Lote DESC, Produto";
            }

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@registros", registros);

                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGridView.DataSource = bindingSource;
            }
            conexao.Desconectar();
        }

        public List<Status> TrazerHistoricoDoProduto(int id_lote, int id_produto)
        {
            List<Status> status = new List<Status>();

            string comando = "SELECT ID_StatusProduto, Status, FORMAT(Data, 'dd/MM/yyyy hh:mm'), (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_StatusProdutos.ID_Colaborador), Data FROM tbl_StatusProdutos WHERE ID_ProdutoLote = (SELECT TOP(1) ID_ProdutoLote FROM tbl_ProdutosLote WHERE ID_Lote = @id_lote AND ID_ProdutoVariacao = @id_produto) ORDER BY Data";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_lote", id_lote);
                select.Parameters.AddWithValue("@id_produto", id_produto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        status.Add(new Status
                        {
                            ID_Status = Convert.ToInt32(leitor[0]),
                            Status = leitor[1].ToString(),
                            Data = leitor[2].ToString(),
                            Colaborador = leitor[3].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return status;
        }

        public List<string> ListaDePrateleirasParaAvariasDoEstabelecimento(int id_estabelecimento)
        {
            List<string> lista = new List<string>();
            
            string comando = "SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Armazenamento = (SELECT ID_Armazenamento FROM tbl_Armazenamentos WHERE Descricao = 'PRODUTOS AVARIADOS') AND (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao) = @id_estabelecimento";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_estabelecimento", id_estabelecimento);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(leitor[0].ToString());
                    }
                }
            }

            conexao.Desconectar();
            return lista;
        }

        public void RegistrarAvaria(Produto_Lote produto, string destino)
        {
            string comando = "UPDATE TOP(@quantidade) tbl_ProdutosLote SET Status = 'Avariado', Disponibilidade = 0, ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @destino) WHERE ID_ProdutoVariacao = @id_produtoVariacao AND ID_Lote = @id_lote AND Status = @status AND ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao)";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@quantidade", produto.Quantidade);
                update.Parameters.AddWithValue("@localizacao", produto.Localizacao);
                update.Parameters.AddWithValue("@id_produtoVariacao", produto.ID_ProdutoVariacao);
                update.Parameters.AddWithValue("@id_lote", produto.ID_Lote);
                update.Parameters.AddWithValue("@status", produto.Status);
                update.Parameters.AddWithValue("@destino", destino);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();

            produto.Status = "Avariado";
            AlterarStatusDeProdutosExtraviadosOuAvariados(produto);
        }

        public void RegistrarExtravio(Produto_Lote produto)
        {
            string comando = "UPDATE TOP(@quantidade) tbl_ProdutosLote SET Status = 'Extraviado', Disponibilidade = 0, ID_Localizacao = NULL WHERE ID_ProdutoVariacao = @id_produtoVariacao AND ID_Lote = @id_lote AND Status = @status AND ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao)";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@quantidade", produto.Quantidade);
                update.Parameters.AddWithValue("@id_produtoVariacao", produto.ID_ProdutoVariacao);
                update.Parameters.AddWithValue("@id_lote", produto.ID_Lote);
                update.Parameters.AddWithValue("@status", produto.Status);
                update.Parameters.AddWithValue("@localizacao", produto.Localizacao);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();

            produto.Status = "Extraviado";
            AlterarStatusDeProdutosExtraviadosOuAvariados(produto);
        }

        public void AlterarStatusDeProdutosExtraviadosOuAvariados(Produto_Lote produto)
        {
            string comando = "SELECT ID_ProdutoLote FROM tbl_ProdutosLote WHERE ID_Lote = @id_lote AND ID_ProdutoVariacao = @id_produtoVariacao AND Status = @status";
            List<int> lista = new List<int>();

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_produtoVariacao", produto.ID_ProdutoVariacao);
                select.Parameters.AddWithValue("@id_lote", produto.ID_Lote);
                select.Parameters.AddWithValue("@status", produto.Status);
                
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read()) { lista.Add(Convert.ToInt32(leitor[0])); }
                }
            }

            conexao.Desconectar();

            foreach(int p in lista)
            {
                produto.ID_ProdutoLote = p;
                RegistrarAtualizacaoDeStatus(produto);
            }

        }

        #endregion

        #region Quarentena

        public void LancarQuarentena(int id_lote)
        {
            string comando = "INSERT INTO tbl_Quarentenas (ID_Lote, Conclusao) VALUES (@id_lote, 0)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_lote", id_lote);
                insert.ExecuteNonQuery();
            }

            string cmd = "INSERT INTO tbl_ProdutosTransformacoes (ID_Quarentena, ID_ProdutoLote, Etiqueta, Acabamento, Condicionamento, Status) SELECT (SELECT TOP(1) ID_Quarentena FROM tbl_Quarentenas ORDER BY ID_Quarentena DESC), ID_ProdutoLote, IIF (Etiqueta = 0, 'Pendente', 'Pronto'), IIF(Acabamento = 'Pronto', 'Pronto', 'Pendente'), 'Pendente', 'Entrada' FROM tbl_ProdutosLote WHERE ID_Lote = @id_lote";

            using (SqlCommand insert = new SqlCommand(cmd, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_lote", id_lote);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void LancarQuarentenaPeloUltimoLoteRegistrado()
        {
            string comando = "INSERT INTO tbl_Quarentenas (ID_Lote, Conclusao) VALUES ((SELECT TOP(1) ID_Entrada FROM tbl_Lotes ORDER BY ID_Entrada DESC), 0)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.ExecuteNonQuery();
            }

            string cmd = "INSERT INTO tbl_ProdutosTransformacoes (ID_Quarentena, ID_ProdutoLote, Etiqueta, Acabamento, Condicionamento, Status) SELECT (SELECT TOP(1) ID_Quarentena FROM tbl_Quarentenas ORDER BY ID_Quarentena DESC), ID_ProdutoLote, IIF (Etiqueta = 0, 'Pendente', 'Pronto'), IIF(Acabamento = 'Pronto', 'Pronto', 'Pendente'), 'Pendente', 'Entrada' FROM tbl_ProdutosLote WHERE ID_Lote = (SELECT TOP(1) ID_Entrada FROM tbl_Lotes ORDER BY ID_Entrada DESC)";

            using (SqlCommand insert = new SqlCommand(cmd, conexao.Conectar()))
            {
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public List<Quarentena> ListaDeQuarentenas()
        {
            List<Quarentena> Quarentenas = new List<Quarentena>();

            string comando = "SELECT ID_Quarentena, ID_Lote, IIF((SELECT Tipo FROM tbl_Lotes WHERE ID_Entrada = tbl_Quarentenas.ID_Lote) = 'Ajuste', 'AJUSTE DE ENTRADA', 'RECEBIMENTO ' + (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Lotes WHERE ID_Entrada = tbl_Quarentenas.ID_Lote))) AS Descricao, IIF(Conclusao = 1, 'Concluído', IIF(Data_Inicio IS NOT NULL, 'Em andamento', 'Pendente')) AS Status FROM tbl_Quarentenas";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Quarentenas.Add(new Quarentena
                        {
                            ID_Quarentena = Convert.ToInt32(leitor[0]),
                            ID_Lote = Convert.ToInt32(leitor[1]),
                            Descricao = leitor[2].ToString(),
                            Status = leitor[3].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return Quarentenas;
        }

        public List<Produto_Quarentena> ListaDeProdutosParaQuarentena(int id_quarentena)
        {
            List<Produto_Quarentena> Produtos = new List<Produto_Quarentena>();

            string comando = "SELECT ID_ProdutoLote, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Produto, tbl_ProdutoVariacao.Cod_Barras AS Codigo, 1 AS Quantidade, Etiqueta, Acabamento, Condicionamento FROM tbl_ProdutosTransformacoes INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = (SELECT ID_ProdutoVariacao FROM tbl_ProdutosLote WHERE ID_ProdutoLote = tbl_ProdutosTransformacoes.ID_ProdutoLote) WHERE ID_Quarentena = @id_quarentena AND Status = 'Entrada' AND (SELECT Status FROM tbl_ProdutosLote WHERE ID_ProdutoLote = tbl_ProdutosTransformacoes.ID_ProdutoLote) = 'Quarentena'";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_quarentena", id_quarentena);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Produtos.Add(new Produto_Quarentena
                        {
                            ID_ProdutoLote = Convert.ToInt32(leitor[0]),
                            Nome = leitor[1].ToString(),
                            Cod_Barras = leitor[2].ToString(),
                            Quantidade = Convert.ToInt32(leitor[3]),
                            Etiqueta = leitor[4].ToString(),
                            Acabamento = leitor[5].ToString(),
                            Condicionamento = leitor[6].ToString(),
                            Confirmacao = false
                        });
                    }
                }
            }

            conexao.Desconectar();

            return Produtos;
        }

        public void AtualizarProdutosDaQuarentena(List<Produto_Quarentena> Produtos)
        {
            string comando = "UPDATE tbl_ProdutosTransformacoes SET Status = 'Quarentena', Acabamento = @acabamento, Condicionamento = @condicionamento, Etiqueta = @etiqueta WHERE ID_ProdutoLote = @id";

            foreach (Produto_Quarentena Produto in Produtos)
            {
                if (Produto.Confirmacao)
                {
                    using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
                    {
                        select.Parameters.AddWithValue("@acabamento", Produto.Acabamento);
                        select.Parameters.AddWithValue("@condicionamento", Produto.Condicionamento);
                        select.Parameters.AddWithValue("@etiqueta", Produto.Etiqueta);
                        select.Parameters.AddWithValue("@id", Produto.ID_ProdutoLote);
                        select.ExecuteNonQuery();
                    }

                    if (Produto.Condicionamento == "Avariado")
                    {
                        Produto.Status = "Separado para devolução";
                    }
                    else if (Produto.Condicionamento == "Faltando")
                    {
                        Produto.Status = "Faltando";
                    }
                    else
                    {
                        Produto.Status = "Direcionamento";
                    }

                    RegistrarAtualizacaoDeStatus(Produto);
                    AtualizarProdutoAposQuarentena(Produto);
                }
            }

            conexao.Desconectar();
        }

        public void ConcluirQuarentena(int id_quarentena)
        {
            string comando = "UPDATE tbl_Quarentenas SET ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), Conclusao = 1, Data_Conclusao = GETDATE() WHERE ID_Quarentena = @id";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", id_quarentena);
                update.Parameters.AddWithValue("@matricula", Program.matricula);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AtualizarProdutoAposQuarentena(Produto_Quarentena Produto)
        {
            string comando = "UPDATE tbl_ProdutosLote SET Status = @status, Acabamento = @acabamento, Etiqueta = @etiqueta WHERE ID_ProdutoLote = @id";

            bool etiqueta;
            if (Produto.Etiqueta == "Pendente") { etiqueta = false; }
            else { etiqueta = true; }

            if (Produto.Acabamento == "Pendente") { Produto.Acabamento = "Pendente"; }
            else { Produto.Acabamento = "Pronto"; }

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", Produto.ID_ProdutoLote);
                update.Parameters.AddWithValue("@status", Produto.Status);
                update.Parameters.AddWithValue("@acabamento", Produto.Acabamento);
                update.Parameters.AddWithValue("@etiqueta", etiqueta);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public Quarentena TrazerInformacoesDaQuarentena(int id_quarentena)
        {
            Quarentena Quarentena = new Quarentena();

            string comando = "SELECT ID_Lote, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Quarentenas.ID_Colaborador) AS Colaborador, IIF((SELECT ID_Fornecedor FROM tbl_Lotes WHERE ID_Entrada = tbl_Quarentenas.ID_Lote) = NULL, 'AJUSTE', (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Lotes WHERE ID_Entrada = tbl_Quarentenas.ID_Lote))) AS Fornecedor FROM tbl_Quarentenas WHERE ID_Quarentena = @id";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_quarentena);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Quarentena.ID_Lote = Convert.ToInt32(leitor[0]);
                        Quarentena.Responsavel = leitor[1].ToString();
                        Quarentena.Fornecedor = leitor[2].ToString();
                    }
                }
            }

            conexao.Desconectar();

            return Quarentena;
        }

        public void ImprimirListaDeQuarentena(int id_quarentena)
        {
            Quarentena quarentena = TrazerInformacoesDaQuarentena(id_quarentena);

            formRepQuarentena relatorio = new formRepQuarentena();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("responsavel", quarentena.Responsavel));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", DateTime.Now.ToShortDateString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("fornecedor", quarentena.Fornecedor));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("lote", quarentena.ID_Lote.ToString()));
            // TODO: esta linha de código carrega dados na tabela 'dataSetPagamentosDosProximos7Dias.PagamentosDosProximos7Dias'. Você pode movê-la ou removê-la conforme necessário.
            relatorio.ProdutosDaQuarentenaTableAdapter.Fill(relatorio.DataSetQuarentena.ProdutosDaQuarentena, id_quarentena);

            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_A4;
            autoprintme.Print();
        }

        #endregion

        #region Entradas

        public void PreencherDataGridEntradas(DataGridView dataGridView, BindingSource bindingSource, int registros)
        {
            string comando = "SELECT TOP(@registros) ID_Entrada AS ID, IIF(ID_Fornecedor IS NOT NULL, IIF(Tipo = 'Entrada', 'ENTRADA ' + (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_Lotes.ID_Fornecedor), 'ENTRADA POR ANÁLISE ' + (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_Lotes.ID_Fornecedor)), 'AJUSTE DE ENTRADA') AS Descricao, (SELECT COUNT(*) FROM tbl_ProdutosLote WHERE ID_Lote = tbL_Lotes.ID_Entrada) AS Produtos, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Lotes.ID_Colaborador) AS Responsavel, FORMAT(Data_Entrada , 'dd/MM/yyyy HH:mm') AS Data, Tipo, IIF((SELECT COUNT(*) FROM tbl_ProdutosLote WHERE ID_Lote = ID_Entrada AND Status = 'Recebimento') = 0, 'Confirmado', 'Pendente') AS Recebimento, Data_Entrada FROM tbl_Lotes WHERE (SELECT COUNT(*) FROM tbl_ProdutosLote WHERE ID_Lote = tbL_Lotes.ID_Entrada) > 0 ORDER BY Data_Entrada DESC";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@registros", registros);
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGridView.DataSource = bindingSource;
            }
            conexao.Desconectar();
        }

        public List<Produto_Lote> ListaDeProdutosDaEntrada(int id_lote)
        {
            List<Produto_Lote> Produtos = new List<Produto_Lote>();

            string comando = "SELECT (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Nome, tbl_ProdutosLote.Cod_Barras AS Codigo, SUM(Quantidade) AS Quantidade, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) AS Localizacao FROM tbl_ProdutosLote INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao WHERE ID_Lote = @id_lote GROUP BY tbl_ProdutoVariacao.ID_Produto, tbl_ProdutoVariacao.ID_Estampa, tbl_ProdutoVariacao.ID_Cor, tbl_ProdutosLote.Cod_Barras, tbl_ProdutosLote.ID_Localizacao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_lote", id_lote);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Produtos.Add(new Produto_Lote
                        {
                            Nome = leitor[0].ToString(),
                            Cod_Barras = leitor[1].ToString(),
                            Quantidade = Convert.ToInt32(leitor[2]),
                            Localizacao = leitor[3].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();
            return Produtos;
        }

        public List<ProdutoReposicao> ListaDeProdutosDaTransferencia(int id_transferencia)
        {
            List<ProdutoReposicao> Produtos = new List<ProdutoReposicao>();

            string comando = "SELECT (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Nome, tbl_ProdutoVariacao.Cod_Barras AS Codigo, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosTransferencia.ID_Origem) AS Origem, Quantidade AS Quantidade, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosTransferencia.ID_Destino) AS Destino FROM tbl_ProdutosTransferencia INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosTransferencia.ID_Produto WHERE ID_Transferencia = @id_transferencia";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_transferencia", id_transferencia);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Produtos.Add(new ProdutoReposicao
                        {
                            Nome_Produto = leitor[0].ToString(),
                            Cod_Barras = leitor[1].ToString(),
                            Local_Origem = leitor[2].ToString(),
                            Quantidade = Convert.ToInt32(leitor[3]),
                            Local_Destino = leitor[4].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();
            return Produtos;
        }

        public List<string> TrazerFornecedores()
        {
            List<string> Fornecedores = new List<string>();
            using (SqlCommand select = new SqlCommand("SELECT Nome_Fornecedor FROM tbl_Fornecedores ORDER BY Nome_Fornecedor", conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read()) { Fornecedores.Add(leitor[0].ToString()); }
                }
            }
            conexao.Desconectar();

            return Fornecedores;
        }

        public List<string> TrazerListaDePedidos(string fornecedor, bool analise)
        {
            List<string> lista = new List<string>();
            if (!analise)
            {
                lista.Add("");
            }

            SqlCommand select = new SqlCommand("SELECT (CONVERT(VARCHAR(15), ID_Pedido) + ' - ' + (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_Pedidos.ID_Fornecedor)) as Pedido FROM tbl_Pedidos WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor) AND Status = 'Confirmado' ORDER BY ID_Pedido DESC", conexao.Conectar());
            select.Parameters.AddWithValue("@fornecedor", fornecedor);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<ProdutoEntrada> ListaDeProdutosDisponiveisParaEntrada(string fornecedor)
        {
            string comando = "SELECT ID_Produto, 0 AS ID_Conjunto, '' AS Nome_Conjunto, Nome_Produto AS Produto, Aliquota_ICMS, Aliquota_IPI, CAST(Preco_Base AS NUMERIC(7,2)) AS Preco_Base, 'PRODUTO' AS Tipo, Cod_Barras, Cod_Extra, 1 AS Qtd_Produtos FROM tbl_Produtos2 WHERE ISNULL(ID_Conjunto, 0) = 0 AND (SELECT COUNT(*) FROM tbl_ProdutosFornecedores WHERE ID_Produto = (SELECT TOP(1) ID_ProdutoVariacao FROM tbl_ProdutoVariacao WHERE ID_Produto = tbl_Produtos2.ID_Produto) AND ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor)) > 0 AND (SELECT COUNT(*) FROM tbl_Catalogo WHERE (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) = ID_Produto) > 0 UNION SELECT ID_Produto, tbl_Produtos2.ID_Conjunto, (SELECT Nome_Original FROM tbl_Conjuntos WHERE ID_Conjunto = tbl_Produtos2.ID_Conjunto) AS Nome_Conjunto, Nome_Produto, tbl_Conjuntos.Aliquota_ICMS, tbl_Conjuntos.Aliquota_IPI, CAST(tbl_Conjuntos.Preco_Base AS NUMERIC(7,2)) AS Preco_Base, 'CONJUNTO' AS Tipo, Cod_Barras, tbl_Conjuntos.Cod_Extra, Qtd_Produtos FROM tbl_Produtos2 INNER JOIN tbl_Conjuntos ON tbl_Conjuntos.ID_Conjunto = tbl_Produtos2.ID_Conjunto WHERE (SELECT COUNT(*) FROM tbl_ProdutosFornecedores WHERE ID_Produto = (SELECT TOP(1) ID_ProdutoVariacao FROM tbl_ProdutoVariacao WHERE ID_Produto = tbl_Produtos2.ID_Produto) AND ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor)) > 0 AND (SELECT COUNT(*) FROM tbl_Catalogo WHERE (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) = ID_Produto) > 0 ORDER BY Produto";

            List<ProdutoEntrada> lista = new List<ProdutoEntrada>();

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@fornecedor", fornecedor);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(new ProdutoEntrada
                        {
                            ID_Produto = Convert.ToInt32(leitor[0]),
                            ID_Conjunto = Convert.ToInt32(leitor[1]),
                            Nome_Conjunto = leitor[2].ToString(),
                            Nome_Produto = leitor[3].ToString(),
                            Aliquota_ICMS = Convert.ToDecimal(leitor[4]),
                            Aliquota_IPI = Convert.ToDecimal(leitor[5]),
                            Preco_Base = Convert.ToDecimal(leitor[6]),
                            Tipo = leitor[7].ToString(),
                            Cod_Barras = leitor[8].ToString(),
                            Cod_Extra = leitor[9].ToString(),
                            Qtd_Produtos = Convert.ToInt32(leitor[10])
                        });
                    }
                }
            }
            conexao.Desconectar();

            return lista;
        }

        public List<Produto_Lote> ListaDeVariacoesDisponiveisParaEntrada(string fornecedor)
        {
            string comando = "SELECT ID_ProdutoVariacao, ID_Produto, ISNULL((SELECT ID_Capsula FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao), 0), (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Nome_Produto, (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) AS Cor, (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) AS Estampa, Cod_Barras, (SELECT Preco_Venda FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) AS Preco_Venda, Imprimir_Codigo, IIF((SELECT COUNT(*) FROM tbl_ProdutosAcabamento WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) = 0, 'Pronto', STUFF((SELECT DISTINCT '/' + (SELECT Acabamento FROM tbl_Acabamentos WHERE tbl_Acabamentos.ID_Acabamento = tbl_ProdutosAcabamento.ID_Acabamento) FROM tbl_ProdutosAcabamento WHERE tbl_ProdutoVariacao.ID_Produto = tbl_ProdutosAcabamento.ID_Produto  FOR XML PATH('')), 1,1,'')) AS Acabamento FROM tbl_ProdutoVariacao WHERE (SELECT COUNT(*) FROM tbl_ProdutosFornecedores WHERE ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao AND ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor)) > 0 AND (SELECT COUNT(*) FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) > 0";

            List<Produto_Lote> lista = new List<Produto_Lote>();

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@fornecedor", fornecedor);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(new Produto_Lote
                        {
                            ID_ProdutoVariacao = Convert.ToInt32(leitor[0]),
                            ID_Produto = Convert.ToInt32(leitor[1]),
                            ID_Capsula = Convert.ToInt32(leitor[2]),
                            Nome_Produto = leitor[3].ToString(),
                            Cor = leitor[4].ToString(),
                            Estampa = leitor[5].ToString(),
                            Cod_Barras = leitor[6].ToString(),
                            Preco_Venda = Convert.ToDecimal(leitor[7]),
                            Imprimir_Codigo = Convert.ToBoolean(leitor[8]),
                            Acabamento = leitor[9].ToString()
                        });
                    }
                }
            }
            conexao.Desconectar();
            return lista;
        }

        public void DarEntrada(Entrada entrada, List<Produto_Lote> Lote, List<ProdutoEntrada> Produtos)
        {
            string matricula = Program.matricula;
            if (entrada.ID_Pedido != 0)
            {
                string cmdo = "UPDATE tbl_Pedidos SET Status = 'Concluído' WHERE ID_Pedido = @id_pedido";
                SqlCommand update = new SqlCommand(cmdo, conexao.Conectar());
                update.Parameters.AddWithValue("@id_pedido", entrada.ID_Pedido);
                update.ExecuteNonQuery();
                conexao.Desconectar();
            }

            string comando;

            if (entrada.ID_Pedido == 0)
            {
                comando = "INSERT INTO tbl_Lotes (ID_Colaborador, Data_Entrada, ID_Fornecedor, Tipo) VALUES ((SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor), 'Entrada')";
            }
            else
            {
                if (entrada.Analise)
                {
                    comando = "INSERT INTO tbl_Lotes (ID_Pedido, ID_Colaborador, Data_Entrada, ID_Fornecedor, Tipo) VALUES (@id_pedido, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor), 'Análise')";
                }
                else
                {
                    comando = "INSERT INTO tbl_Lotes (ID_Pedido, ID_Colaborador, Data_Entrada, ID_Fornecedor, Tipo) VALUES (@id_pedido, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor), 'Entrada')";
                }
            }

            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@id_pedido", entrada.ID_Pedido);
            insert.Parameters.AddWithValue("@matricula", matricula);
            insert.Parameters.AddWithValue("@fornecedor", entrada.Fornecedor);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            foreach (Produto_Lote Produto in Lote)
            {
                int id_capsula = Produto.ID_Capsula;
                int id_variacao = Produto.ID_ProdutoVariacao;
                int quantidade = Produto.Quantidade;
                decimal preco_base = Produto.Preco_Base;
                decimal aliquota_ipi = Produto.Aliquota_IPI;
                decimal aliquota_icms = Produto.Aliquota_ICMS;
                decimal preco_venda = Produto.Preco_Venda;
                string codbarras = Produto.Cod_Barras;
                string cod_extra = Produto.Cod_Extra;
                string acabamento = Produto.Acabamento;
                bool etiqueta = !Produto.Imprimir_Codigo;
                int id_localizacao = Produto.ID_Localizacao;

                string cmd = "INSERT INTO tbl_ProdutosLote (ID_Lote, ID_Capsula, ID_ProdutoVariacao, ID_Fornecedor, Quantidade, Preco_Base, Cod_Barras, Cod_Extra, Status, Acabamento, Etiqueta, Data_Entrada, Aliquota_IPI, Aliquota_ICMS, ID_Localizacao, Disponibilidade, Venda) VALUES ((SELECT TOP(1) ID_Entrada FROM tbl_Lotes ORDER BY ID_Entrada DESC), IIF(@id_capsula = 0, NULL, @id_capsula), @id_variacao, (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor), @quantidade, @preco_base, @codbarras, @cod_extra, 'Recebimento', @acabamento, @etiqueta, GETDATE(), @aliquota_icms, @aliquota_ipi, @id_localizacao, 0, @preco_venda)";
                SqlCommand insert2 = new SqlCommand(cmd, conexao.Conectar());
                insert2.Parameters.AddWithValue("@id_capsula", id_capsula);
                insert2.Parameters.AddWithValue("@id_variacao", id_variacao);
                insert2.Parameters.AddWithValue("@fornecedor", entrada.Fornecedor);
                insert2.Parameters.AddWithValue("@quantidade", quantidade);
                insert2.Parameters.AddWithValue("@preco_base", preco_base);
                insert2.Parameters.AddWithValue("@aliquota_ipi", aliquota_ipi);
                insert2.Parameters.AddWithValue("@aliquota_icms", aliquota_icms);
                insert2.Parameters.AddWithValue("@codbarras", codbarras);
                insert2.Parameters.AddWithValue("@cod_extra", cod_extra);
                insert2.Parameters.AddWithValue("@acabamento", acabamento);
                insert2.Parameters.AddWithValue("@etiqueta", etiqueta);
                insert2.Parameters.AddWithValue("@id_localizacao", id_localizacao);
                insert2.Parameters.AddWithValue("@preco_venda", preco_venda);
                insert2.ExecuteNonQuery();

                string status;
                if (entrada.Analise) { status = "Entrada por análise"; }
                else { status = "Entrada manual"; }

                RegistrarAtualizacaoDeStatusPelaEntrada(status);
                RegistrarAtualizacaoDeStatusPelaEntrada("Recebimento");
            }
            conexao.Desconectar();

            foreach (ProdutoEntrada Produto in Produtos)
            {
                int id_produto = Produto.ID_Produto;
                int quantidade = Produto.Quantidade;
                decimal preco_base = Produto.Preco_Base;
                decimal aliquota_ipi = Produto.Aliquota_IPI;
                decimal aliquota_icms = Produto.Aliquota_ICMS;

                if (Produto.ID_Conjunto != 0)
                {
                    int qtd_produtos = Produto.Qtd_Produtos;
                    preco_base = preco_base / qtd_produtos;
                    quantidade = quantidade * qtd_produtos;
                }

                string cmd = "INSERT INTO tbl_ProdutosEntrada (ID_Entrada, ID_Produto, Quantidade, Aliquota_IPI, Aliquota_ICMS, Base_Custo) VALUES ((SELECT TOP(1) ID_Entrada FROM tbl_Lotes ORDER BY ID_Entrada DESC), @id_produto, @quantidade, @aliquota_ipi, @aliquota_icms, @preco_base)";
                SqlCommand insert2 = new SqlCommand(cmd, conexao.Conectar());
                insert2.Parameters.AddWithValue("@id_produto", id_produto);
                insert2.Parameters.AddWithValue("@quantidade", quantidade);
                insert2.Parameters.AddWithValue("@preco_base", preco_base);
                insert2.Parameters.AddWithValue("@aliquota_ipi", aliquota_ipi);
                insert2.Parameters.AddWithValue("@aliquota_icms", aliquota_icms);
                insert2.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Entrada realizada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public string TrazerNomeDoProdutoPeloID(int id_produto)
        {
            string comando = "SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = @id_produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_produto", id_produto);
            string produto = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return produto;
        }

        public decimal TrazerValorDoPedido(int id_pedido)
        {
            string comando = "SELECT SUM (Preco_Confirmacao * Qtd_Confirmacao) FROM tbl_ProdutosPedido WHERE ID_Pedido = @id_pedido AND Status = 'Confirmado'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_pedido", id_pedido);
            decimal valor = Convert.ToDecimal(select.ExecuteScalar());
            conexao.Desconectar();
            return valor;
        }

        public List<ProdutoEntrada> ListaDeProdutosParaAnaliseAvancada(int id_pedido)
        {
            string comando = "SELECT ID_Produto, 0 AS ID_Conjunto, '' AS Nome_Conjunto, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) AS Produto, Aliquota_ICMS, Aliquota_IPI, Base_Custo, 'PRODUTO', Cod_Extra, 1 AS Qtd_produtos, ISNULL(SUM(Qtd_Confirmacao), SUM(Pedido)) AS Pedido FROM tbl_ProdutosPedido INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosPedido.ID_ProdutoVariacao WHERE ID_Pedido = @id_pedido AND Tipo = 'PRODUTO' AND Status = 'Confirmado' GROUP BY ID_Produto, Aliquota_ICMS, Aliquota_IPI, Base_Custo, Tipo, Cod_Extra UNION SELECT ID_Produto, ID_Conjunto, (SELECT Nome_Original FROM tbl_Conjuntos WHERE ID_Conjunto = (SELECT ID_Conjunto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto)) AS Nome_Conjunto, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) AS Produto, tbl_ProdutosPedido.Aliquota_ICMS, tbl_ProdutosPedido.Aliquota_IPI, Base_Custo, 'CONJUNTO', tbl_ProdutosPedido.Cod_Extra, Qtd_Produtos, ISNULL(SUM(Qtd_Confirmacao), SUM(Pedido)) AS Pedido FROM tbl_ProdutosPedido INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosPedido.ID_ProdutoVariacao INNER JOIN tbl_Conjuntos ON tbl_Conjuntos.ID_Conjunto = (SELECT ID_Conjunto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) WHERE ID_Pedido = @id_pedido AND Tipo <> 'PRODUTO' AND Status = 'Confirmado' GROUP BY ID_Conjunto, tbl_ProdutoVariacao.ID_Produto, tbl_ProdutosPedido.Cod_Extra, Base_Custo,tbl_ProdutosPedido.Aliquota_ICMS, tbl_ProdutosPedido.Aliquota_IPI, tbl_ProdutosPedido.ICMS, tbl_ProdutosPedido.IPI, Custo, Tipo, tbl_ProdutosPedido.Tipo_Conjunto, Qtd_Produtos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_pedido", id_pedido);
            SqlDataReader leitor = select.ExecuteReader();
            List<ProdutoEntrada> lista = new List<ProdutoEntrada>();

            while (leitor.Read())
            {
                lista.Add(new ProdutoEntrada
                {
                    ID_Produto = Convert.ToInt32(leitor[0]),
                    ID_Conjunto = Convert.ToInt32(leitor[1]),
                    Nome_Conjunto = leitor[2].ToString(),
                    Nome_Produto = leitor[3].ToString(),
                    Aliquota_ICMS = Convert.ToDecimal(leitor[4]),
                    Aliquota_IPI = Convert.ToDecimal(leitor[5]),
                    Preco_Base = Convert.ToDecimal(leitor[6]),
                    Tipo = leitor[7].ToString(),
                    Cod_Extra = leitor[8].ToString(),
                    Qtd_Produtos = Convert.ToInt32(leitor[9]),
                    Quantidade = Convert.ToInt32(leitor[10]),
                    Conferido = false
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<Produto_Lote> ListaDeVariacoesParaAnaliseAvancada(int id_pedido)
        {
            int id_localizacao = Convert.ToInt32(ObterValorDoParametro("Localização padrão da entrada"));

            string comando = "SELECT tbl_ProdutosPedido.ID_ProdutoVariacao, ID_Produto, ISNULL((SELECT ID_Capsula FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao), 0) AS ID_Capsula, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Nome_Produto, (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) AS Cor, (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) AS Estampa, Cod_Barras, (SELECT Preco_Venda FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) AS Preco_Venda, Imprimir_Codigo, IIF((SELECT COUNT(*) FROM tbl_ProdutosAcabamento WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) = 0, 'Pronto', STUFF((SELECT DISTINCT '/' + (SELECT Acabamento FROM tbl_Acabamentos WHERE tbl_Acabamentos.ID_Acabamento = tbl_ProdutosAcabamento.ID_Acabamento) FROM tbl_ProdutosAcabamento WHERE tbl_ProdutoVariacao.ID_Produto = tbl_ProdutosAcabamento.ID_Produto  FOR XML PATH('')), 1,1,'')) AS Acabamento, IIF(Tipo = 'UNIDADE' AND Tipo_Conjunto = 'IDÊNTICOS', ISNULL(Qtd_Confirmacao, Pedido) * (SELECT Qtd_Produtos FROM tbl_Conjuntos WHERE ID_Conjunto = (SELECT ID_Conjunto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto)), ISNULL(Qtd_Confirmacao, Pedido)) AS Qtd_Confirmacao, IIF(Tipo = 'UNIDADE' AND Tipo_Conjunto = 'IDÊNTICOS', Custo / (SELECT Qtd_Produtos FROM tbl_Conjuntos WHERE ID_Conjunto = (SELECT ID_Conjunto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto)), Preco_Confirmacao) AS Preco_Confirmacao, Aliquota_ICMS, Aliquota_IPI, Cod_Extra FROM tbl_ProdutosPedido INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosPedido.ID_ProdutoVariacao WHERE ID_Pedido = @id_pedido AND Status = 'Confirmado'";

            List<Produto_Lote> lista = new List<Produto_Lote>();

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_pedido", id_pedido);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        int quantidade = Convert.ToInt32(leitor[10]);

                        for (int i = 0; i < quantidade; i++)
                        {
                            lista.Add(new Produto_Lote
                            {
                                ID_ProdutoVariacao = Convert.ToInt32(leitor[0]),
                                ID_Produto = Convert.ToInt32(leitor[1]),
                                ID_Capsula = Convert.ToInt32(leitor[2]),
                                Nome_Produto = leitor[3].ToString(),
                                Cor = leitor[4].ToString(),
                                Estampa = leitor[5].ToString(),
                                Cod_Barras = leitor[6].ToString(),
                                Preco_Venda = Convert.ToDecimal(leitor[7]),
                                Imprimir_Codigo = Convert.ToBoolean(leitor[8]),
                                Acabamento = leitor[9].ToString(),
                                Quantidade = 1,
                                Preco_Base = Convert.ToDecimal(leitor[11]),
                                Aliquota_ICMS = Convert.ToDecimal(leitor[12]),
                                Aliquota_IPI = Convert.ToDecimal(leitor[13]),
                                Cod_Extra = leitor[14].ToString(),
                                ID_Localizacao = id_localizacao
                            });
                        }

                    }
                }
            }
            conexao.Desconectar();
            return lista;
        }

        public void ConfirmarProdutosRecebidosAPartirDoPedido(int id_pedido)
        {
            string comando = "UPDATE tbl_ProdutosLote SET Status = 'Quarentena' WHERE ID_Lote = (SELECT ID_Entrada FROM tbl_Lotes WHERE ID_Pedido = @id_pedido)";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_pedido", id_pedido);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();

            RegistrarAtualizacaoDeStatusAoConfirmarProdutosPeloPedido(id_pedido);
        }

        public void ConfirmarProdutosRecebidosAPartirDaEntrada(int id_lote)
        {
            string comando = "UPDATE tbl_ProdutosLote SET Status = 'Quarentena' WHERE ID_Lote = @id_lote";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_lote", id_lote);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();

            RegistrarAtualizacaoDeStatusAoConfirmarProdutosPelaEntrada(id_lote);
            LancarQuarentena(id_lote);
        }

        public void ApagarEntradaEProdutosDaEntrada(int id_lote)
        {
            string comando = "DELETE FROM tbl_ProdutosLote WHERE ID_Lote = @id";
            string comando2 = "DELETE FROM tbl_Lotes WHERE ID_Entrada = @id";

            int produtos;

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_lote);
                produtos = delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand(comando2, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_lote);
                delete.ExecuteNonQuery();
            }

            MessageBox.Show(produtos.ToString() + " produtos removidos permanentemente do sistema.", "Lote removido!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        #endregion

        #region Saída (Exclusão)

        public void ApagarProdutosDaTabelaDeLotes(List<Produto_Lote> produtos)
        {
            string comando = "DELETE TOP(@quantidade) FROM tbl_ProdutosLote WHERE Cod_Barras = @cod_barras AND ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao)";

            int qtd = 0;

            foreach (Produto_Lote produto in produtos)
            {
                try
                {
                    using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
                    {
                        delete.Parameters.AddWithValue("@quantidade", produto.Quantidade);
                        delete.Parameters.AddWithValue("@cod_barras", produto.Cod_Barras);
                        delete.Parameters.AddWithValue("@localizacao", produto.Localizacao);
                        delete.ExecuteNonQuery();
                        qtd++;
                    }
                }
                catch
                {
                    MessageBox.Show("O produto não foi relacionado na saída.\r\nAnote-o e informe imediatamente à gestão.\r\n\r\nProduto: " + produto + "\r\nCódigo: " + produto.Cod_Barras, "Erro!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

            conexao.Desconectar();

            if (qtd > 0)
            {
                MessageBox.Show("Ajuste de saída realizado com sucesso!\r\n" + qtd + " produtos excluídos.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("O ajuste não foi realizado.", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public int QuantidadeDeProdutosComOCodigoDeBarras(string codigo, string localizacao)
        {
            int quantidade;
            string comando = "SELECT COUNT(*) FROM tbl_ProdutosLote WHERE Cod_Barras = @cod_barras AND ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao) AND Disponibilidade = 1 AND Status = 'Armazenado'";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@cod_barras", codigo);
                select.Parameters.AddWithValue("@localizacao", localizacao);
                quantidade = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return quantidade;
        }

        #endregion

        #region Ajustes de Entrada

        public List<string> PreencherComboPrateleiraParaProdutosEncontrados(string estabelecimento)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Armazenamento = 9 AND (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao)) = @estabelecimento";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@estabelecimento", estabelecimento);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(Convert.ToString(leitor[0]));
                    }
                }
            }

            conexao.Desconectar();
            return lista;
        }

        public AutoCompleteStringCollection SugestaoDeProdutosDoCatalogo()
        {
            AutoCompleteStringCollection lista = new AutoCompleteStringCollection();

            string comando = "SELECT Nome FROM tbl_Catalogo ORDER BY Nome";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(Convert.ToString(leitor[0]));
                    }
                }
            }

            conexao.Desconectar();
            return lista;
        }

        public string TrazerCentroDeDistribuicaoCentral()
        {
            string cd = string.Empty;

            string comando = "SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT Valor_Parametro FROM tbl_Parametros WHERE Nome_Parametro = 'Centro de distribuição principal (ID)')";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                cd = select.ExecuteScalar().ToString();
            }

            conexao.Desconectar();

            return cd;
        }

        public List<Produto_Lote> ListaProvisoria()
        {
            List<Produto_Lote> produtos = new List<Produto_Lote>();

            string comando = "SELECT (SELECT Nome FROM tbl_Catalogo WHERE (SELECT Cod_Barras FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) = Codigo), Codigo, Quantidade FROM entrada_loja";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        produtos.Add(new Produto_Lote
                        {
                            Nome_Produto = leitor[0].ToString(),
                            Cod_Barras = leitor[1].ToString(),
                            Quantidade = Convert.ToInt32(leitor[2])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return produtos;
        }

        public void RegistrarAjusteDeEntrada(List<Produto_Lote> Lote)
        {
            string comando = "INSERT INTO tbl_Lotes (ID_Colaborador, Data_Entrada, Tipo) VALUES ((SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), 'Ajuste')";
            string cmd = "INSERT INTO tbl_ProdutosLote (ID_Lote, ID_Capsula, ID_ProdutoVariacao, Quantidade, Preco_Base, Cod_Barras, Cod_Extra, Status, Acabamento, Etiqueta, Data_Entrada, Aliquota_IPI, Aliquota_ICMS, ID_Localizacao, Disponibilidade, Venda) VALUES ((SELECT TOP(1) ID_Entrada FROM tbl_Lotes ORDER BY ID_Entrada DESC), (SELECT ID_Capsula FROM tbl_Catalogo WHERE (SELECT Cod_Barras FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) = @codigo), (SELECT ID_ProdutoVariacao FROM tbl_Catalogo WHERE (SELECT Cod_Barras FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) = @codigo), @quantidade, 0, @codigo, (SELECT Cod_Extra FROM tbl_Produtos2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = (SELECT ID_ProdutoVariacao FROM tbl_Catalogo WHERE (SELECT Cod_Barras FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) = @codigo))), @status, ISNULL(IIF(@acabamento = 1, IIF((SELECT Acabamento FROM tbl_Acabamentos WHERE ID_Acabamento = (SELECT ID_Acabamento FROM tbl_ProdutosAcabamento WHERE ID_Produto = (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE Cod_Barras = @codigo))) = '', 'Pronto', (SELECT Acabamento FROM tbl_Acabamentos WHERE ID_Acabamento = (SELECT ID_Acabamento FROM tbl_ProdutosAcabamento WHERE ID_Produto = (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE Cod_Barras  = @codigo)))), 'Pronto'), 'Pronto'), @etiqueta, GETDATE(), 0, 0, (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao), 1, (SELECT Preco_Venda FROM tbl_Catalogo WHERE (SELECT Cod_Barras FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) = @codigo))";

            int qtd = 0;

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
                conexao.Desconectar();

                foreach (Produto_Lote Produto in Lote)
                {
                    string produto = Produto.Nome;
                    int quantidade = Produto.Quantidade;
                    string codigo = Produto.Cod_Barras;
                    bool etiqueta = Produto.Imprimir_Codigo;
                    bool acabamento = Produto.Acabamento_bool;
                    string localizacao = Produto.Localizacao;
                    string status = Produto.Status;

                    try
                    {
                        using (SqlCommand insert2 = new SqlCommand(cmd, conexao.Conectar()))
                        {
                            insert2.Parameters.AddWithValue("@produto", produto);
                            insert2.Parameters.AddWithValue("@status", status);
                            insert2.Parameters.AddWithValue("@quantidade", quantidade);
                            insert2.Parameters.AddWithValue("@codigo", codigo);
                            insert2.Parameters.AddWithValue("@acabamento", acabamento);
                            insert2.Parameters.AddWithValue("@etiqueta", etiqueta);
                            insert2.Parameters.AddWithValue("@localizacao", localizacao);
                            insert2.ExecuteNonQuery();
                            qtd++;
                        }
                    }
                    catch
                    {
                        MessageBox.Show("O produto não foi relacionado na entrada.\r\nAnote-o e informe imediatamente à gestão.\r\n\r\nProduto: " + produto + "\r\nCódigo: " + codigo, "Erro!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }

                    RegistrarAtualizacaoDeStatusPelaEntrada("Entrada por ajuste");
                    RegistrarAtualizacaoDeStatusPelaEntrada(Produto.Status);
                }

                conexao.Desconectar();
            }

            if (qtd > 0)
            {
                MessageBox.Show("Ajuste de entrada realizado com sucesso!\r\n" + qtd + " produtos inseridos.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                MessageBox.Show("O ajuste não foi realizado.", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        #endregion

        #region Saídas

        public void PreencherDataGridSaidas(DataGridView dataGridView, BindingSource bindingSource, int registros)
        {
            string comando = "SELECT TOP(@registros) * FROM (SELECT ID_Saida AS ID, IIF(Tipo = 'Avaria', 'REGISTRO DE AVARIAS', 'REGISTRO DE EXTRAVIO') AS Descricao, (SELECT COUNT(*) FROM tbl_ProdutosSaida WHERE ID_Saida = tbl_Saidas.ID_Saida) AS Produtos, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Saidas.ID_Colaborador) AS Responsavel, FORMAT(Data, 'dd/MM/yyyy HH:mm') AS Data, Tipo, Data AS Data_Venda FROM tbl_Saidas UNION ALL SELECT ID_Venda, 'REGISTRO DE VENDAS', (SELECT COUNT(*) FROM tbl_ProdutosVendidos WHERE ID_Venda = tbl_Vendas.ID_Venda) AS Produtos, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Vendas.ID_Colaborador) AS Responsavel, FORMAT(Data_Venda, 'dd/MM/yyyy HH:mm') AS Data, 'Venda' AS Tipo, Data_Venda FROM tbl_Vendas) Saidas ORDER BY Data_Venda DESC";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@registros", registros);
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGridView.DataSource = bindingSource;
            }
            conexao.Desconectar();
        }

        #endregion

        #region Transferências
        
        public void RegistrarProdutosDaTransferencia(List<ProdutoReposicao> Produtos)
        {
            string comando = "UPDATE TOP(@quantidade) tbl_ProdutosLote SET ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @destino) WHERE Cod_Barras = @codigo AND ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @origem) AND Disponibilidade = 1 AND Status = 'Armazenado'";

            foreach (ProdutoReposicao Produto in Produtos)
            {
                string codigo = Produto.Cod_Barras;
                int quantidade = Produto.Quantidade;
                string origem = Produto.Local_Origem;
                string destino = Produto.Local_Destino;

                using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
                {
                    update.Parameters.AddWithValue("@quantidade", quantidade);
                    update.Parameters.AddWithValue("@codigo", codigo);
                    update.Parameters.AddWithValue("@origem", origem);
                    update.Parameters.AddWithValue("@destino", destino);
                    update.ExecuteNonQuery();
                }

                //Lançar atualização de status
            }
            conexao.Desconectar();

            string comando2 = "INSERT INTO tbl_ProdutosTransferencia (ID_Transferencia, ID_Origem, ID_Destino, Quantidade, ID_Produto) VALUES ((SELECT TOP(1) ID_Transferencia FROM tbl_Transferencias ORDER BY ID_Transferencia DESC), (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @origem), (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @destino), @quantidade, (SELECT ID_ProdutoVariacao FROM tbl_ProdutoVariacao WHERE Cod_Barras = @codigo))";

            foreach (ProdutoReposicao produto in Produtos)
            {
                using (SqlCommand insert = new SqlCommand(comando2, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@codigo", produto.Cod_Barras);
                    insert.Parameters.AddWithValue("@origem", produto.Local_Origem);
                    insert.Parameters.AddWithValue("@destino", produto.Local_Destino);
                    insert.Parameters.AddWithValue("@quantidade", produto.Quantidade);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Tranferência realizada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void RegistrarTransferencia(int id_origem, int id_destino)
        {
            string comando = "INSERT INTO tbl_Transferencias (Data, ID_Colaborador, ID_Origem, ID_Destino) VALUES (GETDATE(), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), @id_origem, @id_destino)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.Parameters.AddWithValue("@id_origem", id_origem);
                insert.Parameters.AddWithValue("@id_destino", id_destino);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void PreencherDataGridTransferencias(DataGridView dataGridView, BindingSource bindingSource, int registros)
        {
            string comando = "SELECT TOP (@registros) ID_Transferencia AS ID, (SELECT CONVERT(VARCHAR(10), ID_Reparticao) + '. ' + Descricao + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = tbl_ReparticoesEstabelecimentos.ID_Estabelecimento) FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = ID_Origem) AS Origem, (SELECT CONVERT(VARCHAR(10), ID_Reparticao) + '. ' + Descricao + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = tbl_ReparticoesEstabelecimentos.ID_Estabelecimento) FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = ID_Destino) AS Destino, (SELECT COUNT(*) FROM tbl_ProdutosTransferencia WHERE ID_Transferencia = tbl_Transferencias.ID_Transferencia) AS Produtos, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Transferencias.ID_Colaborador) AS Responsavel, FORMAT(Data, 'dd/MM/yyyy HH:mm') AS Data, 'Manual' AS Tipo, Data AS Data_Atual FROM tbl_Transferencias ORDER BY Data_Atual DESC";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@registros", registros);
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGridView.DataSource = bindingSource;
            }
            conexao.Desconectar();
        }

        #region Direcionamento

        public List<string> PrateleirasComProdutosParaDirecionamento()
        {
            List<string> prateleiras = new List<string>();

            string comando = "SELECT DISTINCT (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) AS Prateleira FROM tbl_ProdutosLote WHERE Status = 'Direcionamento' AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = (SELECT ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula))";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", Program.matricula);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        prateleiras.Add(leitor[0].ToString());
                    }
                }
            }

            conexao.Desconectar();

            return prateleiras;
        }

        public List<string> LotesComProdutosParaDirecionamento()
        {
            List<string> lotes = new List<string>();

            string comando = "SELECT DISTINCT ID_Lote FROM tbl_ProdutosLote WHERE Status = 'Direcionamento' AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = (SELECT ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula))";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", Program.matricula);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lotes.Add(leitor[0].ToString());
                    }
                }
            }

            conexao.Desconectar();

            return lotes;
        }

        public List<Produto_Direcionamento> ProdutosParaDirecionamento(int id_lote, string localizacao)
        {
            List<Produto_Direcionamento> Produtos = new List<Produto_Direcionamento>();

            string comando;

            if (id_lote != 0 && localizacao == string.Empty)
            {
                comando = "SELECT (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Produto, tbl_ProdutoVariacao.Cod_Barras AS Codigo, SUM(Quantidade) AS Quantidade, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) AS Origem, IIF ((SELECT COUNT(*) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao)) <> 0, STUFF((SELECT DISTINCT ' / ' + (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira AND ID_Reparticao = (SELECT ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula))) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao) FOR XML PATH('')), 1,3,''), '') AS Destino FROM tbl_ProdutosLote INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao WHERE Status = 'Direcionamento' AND ID_Lote = @id_lote AND (SELECT COUNT(*) FROM tbl_ProdutosDirecionamento WHERE ID_ProdutoLote = tbl_ProdutosLote.ID_ProdutoLote) = 0 AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = (SELECT ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)) GROUP BY tbl_ProdutoVariacao.ID_Produto, tbl_ProdutoVariacao.ID_Cor, tbl_ProdutoVariacao.ID_Estampa, tbl_ProdutoVariacao.Cod_Barras, tbl_ProdutosLote.ID_Localizacao,  tbl_ProdutosLote.ID_ProdutoVariacao";
            }
            else if (id_lote == 0 && localizacao != string.Empty)
            {
                comando = "SELECT (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Produto, tbl_ProdutoVariacao.Cod_Barras AS Codigo, SUM(Quantidade) AS Quantidade, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) AS Origem, IIF ((SELECT COUNT(*) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao)) <> 0, STUFF((SELECT DISTINCT ' / ' + (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira AND ID_Reparticao = (SELECT ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula))) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao) FOR XML PATH('')), 1,3,''), '') AS Destino FROM tbl_ProdutosLote INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao WHERE Status = 'Direcionamento' AND (SELECT COUNT(*) FROM tbl_ProdutosDirecionamento WHERE ID_ProdutoLote = tbl_ProdutosLote.ID_ProdutoLote) = 0 AND ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao) GROUP BY tbl_ProdutoVariacao.ID_Produto, tbl_ProdutoVariacao.ID_Cor, tbl_ProdutoVariacao.ID_Estampa, tbl_ProdutoVariacao.Cod_Barras, tbl_ProdutosLote.ID_Localizacao,  tbl_ProdutosLote.ID_ProdutoVariacao";
            }
            else
            {
                comando = "SELECT (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Produto, tbl_ProdutoVariacao.Cod_Barras AS Codigo, SUM(Quantidade) AS Quantidade, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) AS Origem, IIF ((SELECT COUNT(*) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao)) <> 0, STUFF((SELECT DISTINCT ' / ' + (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira AND ID_Reparticao = (SELECT ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula))) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao) FOR XML PATH('')), 1,3,''), '') AS Destino FROM tbl_ProdutosLote INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao WHERE Status = 'Direcionamento' AND (SELECT COUNT(*) FROM tbl_ProdutosDirecionamento WHERE ID_ProdutoLote = tbl_ProdutosLote.ID_ProdutoLote) = 0 AND ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao) AND ID_Lote = @id_lote AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = (SELECT ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)) GROUP BY tbl_ProdutoVariacao.ID_Produto, tbl_ProdutoVariacao.ID_Cor, tbl_ProdutoVariacao.ID_Estampa, tbl_ProdutoVariacao.Cod_Barras, tbl_ProdutosLote.ID_Localizacao,  tbl_ProdutosLote.ID_ProdutoVariacao";
            }

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                if (id_lote != 0 && localizacao == string.Empty)
                {
                    select.Parameters.AddWithValue("@id_lote", id_lote);
                    select.Parameters.AddWithValue("@matricula", Program.matricula);
                }
                else if (id_lote == 0 && localizacao != string.Empty)
                {
                    select.Parameters.AddWithValue("@localizacao", localizacao);
                    select.Parameters.AddWithValue("@matricula", Program.matricula);
                }
                else
                {
                    select.Parameters.AddWithValue("@localizacao", localizacao);
                    select.Parameters.AddWithValue("@matricula", Program.matricula);
                    select.Parameters.AddWithValue("@id_lote", id_lote);
                }

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Produtos.Add(new Produto_Direcionamento
                        {
                            Nome = leitor[0].ToString(),
                            Cod_Barras = leitor[1].ToString(),
                            Quantidade = Convert.ToInt32(leitor[2]),
                            Origem = leitor[3].ToString(),
                            Destino = leitor[4].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return Produtos;
        }

        public List<Produto_Direcionamento> ListaParalelaParaDirecionamento(int id_lote, string localizacao)
        {
            List<Produto_Direcionamento> Produtos = new List<Produto_Direcionamento>();

            string comando;

            if (id_lote != 0 && localizacao == string.Empty)
            {
                comando = "SELECT ID_ProdutoLote, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Produto, tbl_ProdutoVariacao.Cod_Barras AS Codigo, Quantidade, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) AS Origem, IIF ((SELECT COUNT(*) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao)) <> 0, STUFF((SELECT DISTINCT ' / ' + (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao) FOR XML PATH('')), 1,3,''), '') AS Destino FROM tbl_ProdutosLote INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao WHERE Status = 'Direcionamento' AND ID_Lote = @id_lote AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = (SELECT ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula))";
            }
            else if (id_lote == 0 && localizacao != string.Empty)
            {
                comando = "SELECT ID_ProdutoLote, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Produto, tbl_ProdutoVariacao.Cod_Barras AS Codigo, Quantidade, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) AS Origem, IIF ((SELECT COUNT(*) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao)) <> 0, STUFF((SELECT DISTINCT ' / ' + (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao) FOR XML PATH('')), 1,3,''), '') AS Destino FROM tbl_ProdutosLote INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao WHERE Status = 'Direcionamento' AND ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao)";
            }
            else
            {
                comando = "SELECT ID_ProdutoLote, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Produto, tbl_ProdutoVariacao.Cod_Barras AS Codigo, Quantidade, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) AS Origem, IIF ((SELECT COUNT(*) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao)) <> 0, STUFF((SELECT DISTINCT ' / ' + (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao) FOR XML PATH('')), 1,3,''), '') AS Destino FROM tbl_ProdutosLote INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao WHERE Status = 'Direcionamento' AND ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao) AND ID_Lote = @id_lote AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = (SELECT ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula))";
            }

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                if (id_lote != 0 && localizacao == string.Empty)
                {
                    select.Parameters.AddWithValue("@id_lote", id_lote);
                    select.Parameters.AddWithValue("@matricula", Program.matricula);
                }
                else if (id_lote == 0 && localizacao != string.Empty)
                {
                    select.Parameters.AddWithValue("@localizacao", localizacao);
                    select.Parameters.AddWithValue("@id_lote", id_lote);
                }
                else
                {
                    select.Parameters.AddWithValue("@localizacao", localizacao);
                    select.Parameters.AddWithValue("@matricula", Program.matricula);
                    select.Parameters.AddWithValue("@id_lote", id_lote);
                }

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Produtos.Add(new Produto_Direcionamento
                        {
                            ID_ProdutoLote = Convert.ToInt32(leitor[0]),
                            Nome = leitor[1].ToString(),
                            Cod_Barras = leitor[2].ToString(),
                            Quantidade = Convert.ToInt32(leitor[3]),
                            Origem = leitor[4].ToString(),
                            Destino = leitor[5].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return Produtos;
        }

        public void RegistrarDirecionamento()
        {
            string comando = "INSERT INTO tbl_Direcionamentos (ID_Colaborador, Registro, Confirmacao) VALUES ((SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), 0)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void RegistrarProdutosDoDirecionamento(List<Produto_Direcionamento> produtos)
        {
            string comando = "INSERT INTO tbl_ProdutosDirecionamento (ID_Direcionamento, ID_ProdutoLote, Produto, Codigo, Origem, Destino) VALUES ((SELECT TOP(1) ID_Direcionamento FROM tbl_Direcionamentos ORDER BY ID_Direcionamento DESC), @id_produtoLote, @produto, @codigo, @origem, @destino)";

            foreach (Produto_Direcionamento produto in produtos)
            {
                if (produto.Confirmacao)
                {
                    using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                    {
                        insert.Parameters.AddWithValue("@id_produtoLote", produto.ID_ProdutoLote);
                        insert.Parameters.AddWithValue("@produto", produto.Nome);
                        insert.Parameters.AddWithValue("@codigo", produto.Cod_Barras);
                        insert.Parameters.AddWithValue("@origem", produto.Origem);
                        insert.Parameters.AddWithValue("@destino", produto.Destino);
                        insert.ExecuteNonQuery();
                    }
                }
            }

            conexao.Desconectar();
        }

        public List<Direcionamento> ListadeDirecionamentos()
        {
            List<Direcionamento> direcionamentos = new List<Direcionamento>();

            string comando = "SELECT 1 AS N, ID_Direcionamento, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Direcionamentos.ID_Colaborador) AS Colaborador, Registro, IIF(Confirmacao = 1, 'Concluído', 'Pendente') AS Status FROM tbl_Direcionamentos WHERE Confirmacao = 1 UNION SELECT 2 AS N, ID_Direcionamento, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Direcionamentos.ID_Colaborador) AS Colaborador, Registro, IIF(Confirmacao = 1, 'Concluído', 'Pendente') AS Status FROM tbl_Direcionamentos WHERE Confirmacao = 0 ORDER BY N, Registro DESC";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        direcionamentos.Add(new Direcionamento
                        {
                            ID_Direcionamento = Convert.ToInt32(leitor[1]),
                            Colaborador = leitor[2].ToString(),
                            Registro = Convert.ToDateTime(leitor[3]),
                            Status = leitor[4].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return direcionamentos;
        }

        public int UltimoDirecionamentoRegistrado()
        {
            int id;
            string comando = "SELECT TOP(1) ID_Direcionamento FROM tbl_Direcionamentos ORDER BY ID_Direcionamento DESC";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                id = Convert.ToInt32(update.ExecuteScalar());
            }

            conexao.Desconectar();

            return id;
        }

        public void ImprimirListaDeDirecionamento(int id_direcionamento)
        {
            formRepDirecionamento relatorio = new formRepDirecionamento();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("responsavel", Program.matricula));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", DateTime.Now.ToShortDateString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("id", id_direcionamento.ToString()));

            // TODO: esta linha de código carrega dados na tabela 'dataSetPagamentosDosProximos7Dias.PagamentosDosProximos7Dias'. Você pode movê-la ou removê-la conforme necessário.
            relatorio.ProdutosParaDirecionamentoTableAdapter.Fill(relatorio.DataSetDirecionamento.ProdutosParaDirecionamento, id_direcionamento);

            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_A4;
            autoprintme.Print();
        }

        public void ConcluirDirecionamento(int id_direcionamento)
        {
            string comando = "UPDATE tbl_Direcionamentos SET Confirmacao = 1 WHERE ID_Direcionamento = @id";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", id_direcionamento);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();

            AtualizarProdutosDoDirecionamento(id_direcionamento);
        }

        public void AtualizarProdutosDoDirecionamento(int id_direcionamento)
        {
            string cmd = "SELECT ID_ProdutoLote, Destino FROM tbl_ProdutosDirecionamento WHERE ID_Direcionamento = @id_direcionamento";
            List<Produto_Direcionamento> produtos = new List<Produto_Direcionamento>();

            using (SqlCommand select = new SqlCommand(cmd, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_direcionamento", id_direcionamento);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        produtos.Add(new Produto_Direcionamento
                        {
                            ID_ProdutoLote = Convert.ToInt32(leitor[0]),
                            Localizacao = leitor[1].ToString()
                        });
                    }
                }
            }

            string comando = "UPDATE tbl_ProdutosLote SET Status = 'Armazenado', ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao) WHERE ID_ProdutoLote = @id_produtoLote";
        
            foreach(Produto_Direcionamento produto in produtos)
            {
                using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
                {
                    update.Parameters.AddWithValue("@localizacao", produto.Localizacao);
                    update.Parameters.AddWithValue("@id_produtoLote", produto.ID_ProdutoLote);
                    update.ExecuteNonQuery();
                }

                produto.Status = "Armazenado";
                RegistrarAtualizacaoDeStatus(produto);
            }
        }

        #endregion

        #endregion

        #region Localização

        public bool VerificarSePrateleiraJaExiste(string prateleira)
        {
            string comando = "SELECT Localizacao FROM tbl_Prateleiras WHERE Localizacao = @prateleira";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@prateleira", prateleira);
            string resultado;
            try
            {
                resultado = select.ExecuteScalar().ToString();
            }
            catch { resultado = string.Empty; }

            conexao.Desconectar();

            bool verificar;

            if (resultado == string.Empty)
            {
                verificar = false;
            }
            else
            {
                verificar = true;
            }
            return verificar;
        }

        public void CadastrarPrateleira(Prateleira Prateleira)
        {
            string localizacao = Prateleira.Localizacao;
            int id_reparticao = Prateleira.ID_Reparticao;
            string armazenamento = Prateleira.Armazenamento;

            string expositor = Prateleira.Expositor;
            string altura = Prateleira.Altura;
            string largura = Prateleira.Largura;
            string comprimento = Prateleira.Comprimento;
            string comando;
            string campos;
            string values;

            campos = "INSERT INTO tbl_Prateleiras (Localizacao, ID_Reparticao, ID_Armazenamento, ID_Expositor";
            values = "VALUES (@localizacao, @id_reparticao, (SELECT ID_Armazenamento FROM tbl_Armazenamentos WHERE Descricao = @armazenamento), (SELECT ID_Expositor FROM tbl_Expositores WHERE Descricao = @expositor)";

            if (altura != string.Empty)
            {
                campos = campos + ", Altura";
                values = values + ", @altura";
            }
            if (altura != string.Empty)
            {
                campos = campos + ", Largura";
                values = values + ", @largura";
            }
            if (altura != string.Empty)
            {
                campos = campos + ", Comprimento";
                values = values + ", @comprimento";
            }

            comando = campos + ") " + values + ")";

            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@localizacao", localizacao);
            insert.Parameters.AddWithValue("@expositor", expositor);
            insert.Parameters.AddWithValue("@id_reparticao", id_reparticao);
            insert.Parameters.AddWithValue("@armazenamento", armazenamento);
            insert.Parameters.AddWithValue("@altura", altura);
            insert.Parameters.AddWithValue("@largura", largura);
            insert.Parameters.AddWithValue("@comprimento", comprimento);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Prateleira cadastrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void EditarPrateleira(Prateleira Prateleira)
        {
            int id_prateleira = Prateleira.ID_Prateleira;
            string localizacao = Prateleira.Localizacao;

            string altura = Prateleira.Altura;
            string largura = Prateleira.Largura;
            string comprimento = Prateleira.Comprimento;
            int id_reparticao = Prateleira.ID_Reparticao;
            string expositor = Prateleira.Expositor;
            string armazenamento = Prateleira.Armazenamento;

            string comando = "UPDATE tbl_Prateleiras SET Localizacao = @localizacao, Altura = @altura, Largura = @largura, Comprimento = @comprimento, ID_Expositor = (SELECT ID_Expositor FROM tbl_Expositores WHERE Descricao = @expositor), ID_Reparticao = @id_reparticao, ID_Armazenamento = (SELECT ID_Armazenamento FROM tbl_Armazenamentos WHERE Descricao = @armazenamento) WHERE ID_Prateleira = @id_prateleira";

            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@localizacao", localizacao);
            insert.Parameters.AddWithValue("@expositor", expositor);
            insert.Parameters.AddWithValue("@id_reparticao", id_reparticao);
            insert.Parameters.AddWithValue("@armazenamento", armazenamento);
            insert.Parameters.AddWithValue("@altura", altura);
            insert.Parameters.AddWithValue("@largura", largura);
            insert.Parameters.AddWithValue("@comprimento", comprimento);
            insert.Parameters.AddWithValue("@id_prateleira", id_prateleira);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Informações editadas com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarPrateleira(int id_prateleira)
        {
            string comando = "DELETE FROM tbl_Prateleiras WHERE ID_Prateleira = @id_prateleira";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_prateleira", id_prateleira);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            ApagarVinculoEntrePrateleiraEVariacoes(id_prateleira);
        }

        public void ApagarVinculoEntrePrateleiraEVariacoes(int id_prateleira)
        {
            string comando = "DELETE FROM tbl_ProdutosLocalizacoes WHERE ID_Prateleira = @id_prateleira";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_prateleira", id_prateleira);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        public void PreencherDataGridPrateleiras(DataGridView dataGridView, BindingSource bindingSource)
        {
            string comando = "SELECT ID_Prateleira AS ID, Localizacao, (SELECT Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao) + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao)) AS Reparticao, (SELECT Descricao FROM tbl_Expositores WHERE ID_Expositor = tbl_Prateleiras.ID_Expositor) AS Expositor, (SELECT Descricao FROM tbl_Armazenamentos WHERE ID_Armazenamento = tbl_Prateleiras.ID_Armazenamento) AS Armazenamento FROM tbl_Prateleiras";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGridView.DataSource = bindingSource;
            }
            conexao.Desconectar();
        }

        public Prateleira InformacoesDaPrateleira(int id_prateleira)
        {
            Prateleira Prateleira = new Prateleira();

            string comando = "SELECT Localizacao, Altura, Largura, Comprimento, (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Prateleiras.ID_Reparticao)) AS Estabelecimento, ID_Reparticao, (SELECT Descricao FROM tbl_Expositores WHERE ID_Expositor = tbl_Prateleiras.ID_Expositor) AS Expositor, (SELECT Descricao FROM tbl_Armazenamentos WHERE ID_Armazenamento = tbl_Prateleiras.ID_Armazenamento) AS Armazenamento FROM tbl_Prateleiras WHERE ID_Prateleira = @id_prateleira";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_prateleira", id_prateleira);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Prateleira.ID_Prateleira = id_prateleira;
                        Prateleira.Localizacao = leitor[0].ToString();
                        Prateleira.Altura = leitor[1].ToString();
                        Prateleira.Largura = leitor[2].ToString();
                        Prateleira.Comprimento = leitor[3].ToString();
                        Prateleira.Estabelecimento = leitor[4].ToString();
                        Prateleira.ID_Reparticao = Convert.ToInt32(leitor[5]);
                        Prateleira.Expositor = leitor[6].ToString();
                        Prateleira.Armazenamento = leitor[7].ToString();
                    }
                }
            }

            conexao.Desconectar();

            return Prateleira;
        }

        public List<Armazenamento> ListaDeArmazenamentos()
        {
            List<Armazenamento> armazenamentos = new List<Armazenamento>();
            string comando = "SELECT ID_Armazenamento, Descricao, Detalhes FROM tbl_Armazenamentos ORDER BY Descricao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                armazenamentos.Add(new Armazenamento
                {
                    ID_Armazenamento = Convert.ToInt32(leitor[0]),
                    Descricao = leitor[1].ToString(),
                    Detalhes = leitor[2].ToString(),
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return armazenamentos;
        }

        public void ApagarArmazenamento(int id)
        {
            string comando = "DELETE FROM tbl_Armazenamentos WHERE ID_Armazenamento = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Armazenamento excluído permanentemente!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void CadastrarArmazenamento(Armazenamento Armazenamento)
        {
            string comando = "INSERT INTO tbl_Armazenamentos (Descricao, Detalhes) VALUES (@descricao, @detalhes)";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", Armazenamento.Descricao);
                insert.Parameters.AddWithValue("@detalhes", Armazenamento.Detalhes);
                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Armazenamento cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void EditarArmazenamento(Armazenamento Armazenamento)
        {
            string comando = "UPDATE tbl_Armazenamentos SET Descricao = @descricao, Detalhes = @detalhes WHERE ID_Armazenamento = @id";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@descricao", Armazenamento.Descricao);
                update.Parameters.AddWithValue("@detalhes", Armazenamento.Detalhes);
                update.Parameters.AddWithValue("@id", Armazenamento.ID_Armazenamento);
                update.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Armazenamento editado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<Expositor> ListaDeExpositores()
        {
            List<Expositor> expositores = new List<Expositor>();
            string comando = "SELECT ID_Expositor, IIF(ID_Imagem <> 0, (SELECT Imagem FROM tbl_Imagens WHERE ID_Imagem = tbl_Expositores.ID_Imagem), (SELECT Imagem FROM tbl_Imagens WHERE Descricao = 'SEM FOTO')) AS Imagem, Descricao, Detalhes, ID_Imagem FROM tbl_Expositores";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                expositores.Add(new Expositor
                {
                    ID_Expositor = Convert.ToInt32(leitor[0]),
                    Imagem = (byte[])leitor[1],
                    Descricao = leitor[2].ToString(),
                    Detalhes = leitor[3].ToString(),
                    ID_Imagem = Convert.ToInt32(leitor[4])
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return expositores;
        }

        public void ApagarExpositor(int id)
        {
            string comando = "DELETE FROM tbl_Expositores WHERE ID_Expositor = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Expositor excluído permanentemente!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void CadastrarExpositor(Expositor Expositor)
        {
            string comando = "INSERT INTO tbl_Expositores (Descricao, Detalhes, ID_Imagem) VALUES (@descricao, @detalhes, (SELECT ID_Imagem FROM tbl_Imagens WHERE Descricao = @descricao))";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", Expositor.Descricao);
                insert.Parameters.AddWithValue("@detalhes", Expositor.Detalhes);
                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Expositor cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void EditarExpositor(Expositor Expositor)
        {
            string comando = "UPDATE tbl_Expositores SET Descricao = @descricao, Detalhes = @detalhes WHERE ID_Expositor = @id";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@descricao", Expositor.Descricao);
                update.Parameters.AddWithValue("@detalhes", Expositor.Detalhes);
                update.Parameters.AddWithValue("@id", Expositor.ID_Expositor);
                update.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Expositor editado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void CadastrarImagemDoExpositor(Expositor expositor)
        {
            byte[] imagem = expositor.Imagem;
            string comando = "INSERT INTO tbl_Imagens (Descricao, Imagem, Categoria) VALUES (@descricao, @imagem, 'EXPOSITORES')";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", expositor.Descricao);
                insert.Parameters.Add("@imagem", SqlDbType.Image, imagem.Length).Value = imagem;
                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        public void EditarImagemDoExpositor(Expositor expositor)
        {
            byte[] imagem = expositor.Imagem;
            string comando = "UPDATE tbl_Imagens SET Imagem = @imagem, Descricao = @descricao WHERE ID_Imagem = @id_imagem";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", expositor.Descricao);
                insert.Parameters.Add("@imagem", SqlDbType.Image, imagem.Length).Value = imagem;
                insert.Parameters.AddWithValue("@id_imagem", expositor.ID_Imagem);
                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        public List<string> PreencherComboArmazenamentos()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Descricao FROM tbl_Armazenamentos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<string> PreencherComboExpositores()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Descricao FROM tbl_Expositores";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        #endregion

        #endregion

        #region Peças

        public bool VerificarSePecaJaExiste(string peca)
        {
            string comando = "SELECT Peca FROM tbl_Pecas WHERE Peca = @peca";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@peca", peca);
            bool verificar;

            if (select.ExecuteScalar() == null) { verificar = true; }
            else if (select.ExecuteScalar().ToString() == peca) { verificar = true; }
            else { verificar = false; }

            conexao.Desconectar();

            return verificar;
        }

        public void CadastrarPeca(string peca)
        {
            string comando = "INSERT INTO tbl_Pecas (Peca) VALUES (@peca)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@peca", peca);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Peça cadastrada.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarPeca(string peca)
        {
            string comando = "DELETE FROM tbl_Pecas WHERE Peca = @peca";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@peca", peca);
            delete.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("A peça foi excluída.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<Peca> ListaDePecas()
        {
            List<Peca> Pecas = new List<Peca>();
            string comando = "SELECT ID_Peca, Peca FROM tbl_Pecas";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Pecas.Add(new Peca
                {
                    ID_Peca = Convert.ToInt32(leitor[0]),
                    Nome_Peca = leitor[1].ToString()
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return Pecas;
        }

        public List<Peca> ListaDePecasDoProduto(int id)
        {
            List<Peca> Pecas = new List<Peca>();
            string comando = "SELECT (SELECT Peca FROM tbl_Pecas WHERE ID_Peca = tbl_ProdutosPecas.ID_Peca) AS Peca, (SELECT COUNT(*) FROM tbl_PecasAvulsas WHERE ID_Peca = tbl_ProdutosPecas.ID_Peca AND ID_Produto = tbl_ProdutosPecas.ID_Produto) FROM tbl_ProdutosPecas WHERE ID_Produto = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Pecas.Add(new Peca
                {
                    Nome_Peca = leitor[0].ToString(),
                    Quantidade = Convert.ToInt32(leitor[1])
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return Pecas;
        }

        public void ApagarPecaDoProduto(Peca Peca)
        {
            string comando = "DELETE FROM tbl_ProdutosPecas WHERE ID_Peca = (SELECT ID_Peca FROM tbl_Pecas WHERE Peca = @peca) AND ID_Produto = @id_produto";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@peca", Peca.Nome_Peca);
            delete.Parameters.AddWithValue("@id_produto", Peca.ID_Produto);
            delete.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("A peça foi excluída.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void AdicionarPecaDoProduto(Peca Peca)
        {
            string comando = "INSERT INTO tbl_ProdutosPecas (ID_Peca, ID_Produto) VALUES ((SELECT ID_Peca FROM tbl_Pecas WHERE Peca = @peca), @id_produto)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@peca", Peca.Nome_Peca);
            insert.Parameters.AddWithValue("@id_produto", Peca.ID_Produto);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Peça do produto cadastrada.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<PecaAvulsa> ListaDePecasAvulsas()
        {
            List<PecaAvulsa> Pecas = new List<PecaAvulsa>();
            string comando = "SELECT ID_PecaAvulsa, (SELECT Peca FROM tbl_Pecas WHERE ID_Peca = tbl_PecasAvulsas.ID_Peca) AS Peca, ID_Produto, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_PecasAvulsas.ID_Produto) AS Produto, SUM(Quantidade), Setor FROM tbl_PecasAvulsas GROUP BY ID_Peca, ID_Produto ORDER BY Peca";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Pecas.Add(new PecaAvulsa
                {
                    ID_PecaAvulsa = Convert.ToInt32(leitor[0]),
                    Nome_Peca = leitor[1].ToString(),
                    ID_Produto = Convert.ToInt32(leitor[2]),
                    Nome_Produto = leitor[3].ToString(),
                    Quantidade = Convert.ToInt32(leitor[4]),
                    Setor = leitor[5].ToString()
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return Pecas;
        }

        public void AdicionarPecaAvulsa(PecaAvulsa peca)
        {
            string comando = "INSERT INTO tbl_PecasAvulsas (ID_Peca, ID_Produto, Quantidade, ID_Colaborador, Data, Setor, Observacao) VALUES ((SELECT ID_Peca FROM tbl_Pecas WHERE Peca = @peca), @id_produto, @quantidade, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), @setor, @observacao)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@@peca", peca.Nome_Peca);
            insert.Parameters.AddWithValue("@id_produto", peca.ID_Produto);
            insert.Parameters.AddWithValue("@quantidade", peca.Quantidade);
            insert.Parameters.AddWithValue("@setor", peca.Setor);
            insert.Parameters.AddWithValue("@observacao", peca.Observacao);
            insert.Parameters.AddWithValue("@matricula", Program.matricula);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("A peça do produto foi registrada.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<string> PreencherComboBoxPecas()
        {
            List<string> Pecas = new List<string>();
            string comando = "SELECT Peca FROM tbl_Pecas";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Pecas.Add(leitor[0].ToString());
            }
            leitor.Close();

            conexao.Desconectar();

            return Pecas;
        }

        public bool VerificarSePecaDoProdutoExiste(string peca)
        {
            string comando = "SELECT Peca FROM tbl_ProdutosPecas INNER JOIN tbl_Pecas ON tbl_Pecas.ID_Peca = tbl_ProdutosPecas.ID_Peca WHERE Peca = @peca";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@peca", peca);
            bool verificar;

            if (select.ExecuteScalar().ToString() == peca)
            {
                verificar = true;
            }
            else { verificar = false; }

            conexao.Desconectar();

            return verificar;
        }

        #endregion

        #region Acabamento

        public List<Acabamento> ListaDeAcabamentos()
        {
            List<Acabamento> Acabamentos = new List<Acabamento>();
            string comando = "SELECT ID_Acabamento, Acabamento FROM tbl_Acabamentos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Acabamentos.Add(new Acabamento
                {
                    ID_Acabamento = Convert.ToInt32(leitor[0]),
                    Descricao = leitor[1].ToString()
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return Acabamentos;
        }

        public void CadastrarAcabamento(string acabamento)
        {
            string comando = "INSERT INTO tbl_Acabamentos (Acabamento) VALUES (@acabamento)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@acabamento", acabamento);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Acabamento cadastrado.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public bool VerificarSeAcabamentoJaExiste(string acabamento)
        {
            string comando = "SELECT Acabamento FROM tbl_Acabamentos WHERE Acabamento = @acabamento";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@acabamento", acabamento);
            bool verificar;

            if (select.ExecuteScalar() == null) { verificar = false; }
            else if (select.ExecuteScalar().ToString() == acabamento) { verificar = false; }
            else { verificar = true; }

            conexao.Desconectar();

            return verificar;
        }

        public List<Acabamento> ListaDeAcabamentosDoProduto(int id)
        {
            List<Acabamento> Acabamentos = new List<Acabamento>();
            string comando = "SELECT (SELECT Acabamento FROM tbl_Acabamentos WHERE ID_Acabamento = tbl_ProdutosAcabamento.ID_Acabamento) AS Acabamento FROM tbl_ProdutosAcabamento WHERE ID_Produto = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Acabamentos.Add(new Acabamento
                {
                    Descricao = leitor[0].ToString()
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return Acabamentos;
        }

        public void ApagarAcabamentoDoProduto(Acabamento Acabamento)
        {
            string comando = "DELETE FROM tbl_ProdutosAcabamento WHERE ID_Acabamento = (SELECT ID_Acabamento FROM tbl_Acabamentos WHERE Acabamento = @acabamento) AND ID_Produto = @id_produto";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@acabamento", Acabamento.Descricao);
            delete.Parameters.AddWithValue("@id_produto", Acabamento.ID_Produto);
            delete.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("O acabamento foi excluído.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void AdicionarAcabamentoDoProduto(Acabamento Acabamento)
        {
            string comando = "INSERT INTO tbl_ProdutosAcabamento (ID_Acabamento, ID_Produto) VALUES ((SELECT ID_Acabamento FROM tbl_Acabamentos WHERE Acabamento = @acabamento), @id_produto)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@acabamento", Acabamento.Descricao);
            insert.Parameters.AddWithValue("@id_produto", Acabamento.ID_Produto);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Acabamento do produto registrado.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<string> PreencherComboBoxAcabamentos()
        {
            List<string> Pecas = new List<string>();
            string comando = "SELECT Acabamento FROM tbl_Acabamentos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Pecas.Add(leitor[0].ToString());
            }
            leitor.Close();

            conexao.Desconectar();

            return Pecas;
        }

        #endregion

        #region Ajustes de Estoque

        public AutoCompleteStringCollection PreencherProdutosPorSetor(string origem)
        {
            string codigo;
            if (origem == "Depósito")
            {
                codigo = "SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE (SELECT qtd_Deposito2 FROM tbl_Produtos WHERE ID_Produto = tbl_Encapsulamento.ID_Produto) > 0";
            }
            else if (origem == "Estoque")
            {
                codigo = "SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE (SELECT qtd_Deposito1 FROM tbl_Produtos WHERE ID_Produto = tbl_Encapsulamento.ID_Produto) > 0";
            }
            else
            {
                codigo = "SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE (SELECT qtd_Prateleira FROM tbl_Produtos WHERE ID_Produto = tbl_Encapsulamento.ID_Produto) > 0";
            }
            SqlCommand comando = new SqlCommand(codigo, conexao.Conectar());
            SqlDataReader leitor = comando.ExecuteReader();
            AutoCompleteStringCollection Produtos = new AutoCompleteStringCollection();

            while (leitor.Read())
            {
                string Produto = leitor[0].ToString();

                Produtos.Add(Produto);
            }
            leitor.Close();
            conexao.Desconectar();
            return Produtos;
        }

        public int PreencherQuantidadeAtual(string nome_sistema, string origem)
        {
            int quantidade;
            string comando;
            if (origem == "Depósito")
            {
                comando = "SELECT qtd_Deposito2 FROM tbl_Produtos WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema)";
            }
            else if (origem == "Estoque")
            {
                comando = "SELECT qtd_Deposito1 FROM tbl_Produtos WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema)";
            }
            else
            {
                comando = "SELECT qtd_Prateleira FROM tbl_Produtos WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema)";
            }
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("nome_sistema", nome_sistema);
            quantidade = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();
            return quantidade;
        }

        public void ConcluirBalanco(string setor, List<Balanco> Produtos)
        {
            foreach (Balanco Produto in Produtos)
            {
                string nome_sistema = Produto.Nome_Sistema;
                int balanco = Produto.Quantidade;

                string comando;
                if (setor == "Loja")
                {
                    comando = "UPDATE tbl_Produtos SET qtd_Prateleira = @balanco, Estoque_Atual = @balanco + qtd_Deposito1 + qtd_Deposito2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema)";
                }
                else if (setor == "Estoque")
                {
                    comando = "UPDATE tbl_Produtos SET qtd_Deposito1 =  @balanco, Estoque_Atual = qtd_Prateleira + @balanco + qtd_Deposito2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema)";
                }
                else
                {
                    comando = "UPDATE tbl_Produtos SET qtd_Deposito2 =  @balanco, Estoque_Atual = qtd_Prateleira + qtd_Deposito1 + @balanco WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema)";
                }

                SqlCommand update = new SqlCommand(comando, conexao.Conectar());
                update.Parameters.AddWithValue("@balanco", balanco);
                update.Parameters.AddWithValue("@nome_sistema", nome_sistema);
                update.ExecuteNonQuery();

                //Digamos que temos um produto X onde temos quantidade_atual = 5. 

                int diferenca = balanco - Produto.Quantidade_Atual;

                string tipo;
                if (diferenca > 0)
                {
                    tipo = "Entrada";
                }
                else { tipo = "Saída"; }

                string cmd = "INSERT INTO tbl_Ajustes (ID_Produto, Tipo, Data, Quantidade, ID_Colaborador, ID_Capsula, Setor) VALUES ((SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema), @tipo, GETDATE(), @quantidade, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), (SELECT ID_Capsula FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema), @setor)";
                SqlCommand insert = new SqlCommand(cmd, conexao.Conectar());
                insert.Parameters.AddWithValue("@nome_sistema", nome_sistema);
                insert.Parameters.AddWithValue("@tipo", tipo);
                insert.Parameters.AddWithValue("@quantidade", diferenca);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.Parameters.AddWithValue("@setor", setor);
                insert.ExecuteNonQuery();

                conexao.Desconectar();
            }

            MessageBox.Show("Balanço realizado com Sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public void RegistrarAvariasIdentificadas(List<Avaria> Avarias)
        {
            foreach (Avaria Avaria in Avarias)
            {
                string setor = Avaria.Setor;
                int id_produto = Avaria.ID_Produto;
                int quantidade = Avaria.Quantidade;

                string comando;
                if (setor == "Loja")
                {
                    comando = "UPDATE tbl_Produtos SET Estoque_Atual = Estoque_Atual - @quantidade, qtd_Prateleira = qtd_Prateleira - @quantidade WHERE ID_Produto = @id_produto";
                }
                else if (setor == "Estoque")
                {
                    comando = "UPDATE tbl_Produtos SET Estoque_Atual = Estoque_Atual - @quantidade, qtd_Deposito1 = qtd_Deposito1 - @quantidade WHERE ID_Produto = @id_produto";
                }
                else
                {
                    comando = "UPDATE tbl_Produtos SET Estoque_Atual = Estoque_Atual - @quantidade, qtd_Deposito2 = qtd_Deposito2 - @quantidade WHERE ID_Produto = @id_produto";
                }

                SqlCommand update = new SqlCommand(comando, conexao.Conectar());
                update.Parameters.AddWithValue("@quantidade", quantidade);
                update.Parameters.AddWithValue("@id_produto", id_produto);
                update.ExecuteNonQuery();

                SqlCommand insert = new SqlCommand("INSERT INTO tbl_Avarias (ID_Produto, ID_Colaborador, Tipo_Avaria, Local_Deteccao, Data_Deteccao, ID_Responsavel, Status, Quantidade) VALUES (@id_produto, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), @tipo_avaria, @setor, GETDATE(), @id_responsavel, 'Pendente', @quantidade)", conexao.Conectar());
                insert.Parameters.AddWithValue("@id_produto", id_produto);
                insert.Parameters.AddWithValue("@id_responsavel", Avaria.ID_Responsavel);
                insert.Parameters.AddWithValue("@tipo_avaria", Avaria.Tipo);
                insert.Parameters.AddWithValue("@setor", setor);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.Parameters.AddWithValue("@quantidade", quantidade);
                insert.ExecuteNonQuery();
            }

            MessageBox.Show("Certifique-se que o produto será direcionado\r\npara o devido local.", "Avaria registrada com suceso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public void DirecionarAvaria(Avaria Avaria, string status)
        {
            int id_avaria = Avaria.ID_Avaria;
            string comando = "UPDATE tbl_Avarias SET Status = @status WHERE ID_Avaria = @id_avaria";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@status", status);
            update.Parameters.AddWithValue("@id_avaria", id_avaria);

            if (id_avaria > 0)
            {
                update.ExecuteNonQuery();
                conexao.Desconectar();

                if (status == "Descartar")
                {
                    MessageBox.Show("Registro de direcionamento para descarte.\r\nCertifique-se de que o produto foi direcionamento para o devido local", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else if (status == "Trocar")
                {
                    MessageBox.Show("Registro de direcionamento para troca.\r\nCertifique-se de que o produto foi direcionamento para o devido local", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show("Registro de direcionamento para venda.\r\nCertifique-se de que o produto foi direcionamento para o devido local", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }

        }
        public void ConcluirDirecionamentoDeAvaria(Avaria Avaria)
        {
            int id_avaria = Avaria.ID_Avaria;
            string status;
            if (Avaria.Status == "Trocar")
            {
                status = "Trocado";
            }
            else if (Avaria.Status == "Vender")
            {
                status = "Vendido";
            }
            else
            {
                status = "Descartado";
            }

            string comando = "UPDATE tbl_Avarias SET Status = @status WHERE ID_Avaria = @id_avaria";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@status", status);
            update.Parameters.AddWithValue("@id_avaria", id_avaria);

            if (id_avaria > 0)
            {
                update.ExecuteNonQuery();
                conexao.Desconectar();
                MessageBox.Show("Direcionamento concluído!", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }
        public List<Balanco> TrazerProdutosParaBalanco(string fornecedor, string setor)
        {
            string comando;
            List<Balanco> Produtos = new List<Balanco>();

            if (fornecedor == "TODOS")
            {
                if (setor == "Loja") { comando = "SELECT Cod_Barras, tbl_Produtos.ID_Produto, Nome_Sistema, qtd_Prateleira FROM tbl_Produtos INNER JOIN tbl_Encapsulamento ON tbl_Encapsulamento.ID_Produto = tbl_Produtos.ID_Produto ORDER BY Nome_Sistema"; }
                else if (setor == "Estoque") { comando = "SELECT Cod_Barras, tbl_Produtos.ID_Produto, Nome_Sistema, qtd_Deposito1 FROM tbl_Produtos INNER JOIN tbl_Encapsulamento ON tbl_Encapsulamento.ID_Produto = tbl_Produtos.ID_Produto ORDER BY Nome_Sistema"; }
                else { comando = "SELECT Cod_Barras, tbl_Produtos.ID_Produto, Nome_Sistema, qtd_Deposito2 FROM tbl_Produtos INNER JOIN tbl_Encapsulamento ON tbl_Encapsulamento.ID_Produto = tbl_Produtos.ID_Produto ORDER BY Nome_Sistema"; }
            }
            else
            {
                if (setor == "Loja") { comando = "SELECT Cod_Barras, tbl_Produtos.ID_Produto, Nome_Sistema, qtd_Prateleira FROM tbl_Produtos INNER JOIN tbl_Encapsulamento ON tbl_Encapsulamento.ID_Produto = tbl_Produtos.ID_Produto WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor) ORDER BY Nome_Sistema"; }
                else if (setor == "Estoque") { comando = "SELECT Cod_Barras, tbl_Produtos.ID_Produto, Nome_Sistema, qtd_Deposito1 FROM tbl_Produtos INNER JOIN tbl_Encapsulamento ON tbl_Encapsulamento.ID_Produto = tbl_Produtos.ID_Produto WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor) ORDER BY Nome_Sistema"; }
                else { comando = "SELECT Cod_Barras, tbl_Produtos.ID_Produto, Nome_Sistema, qtd_Deposito2 FROM tbl_Produtos INNER JOIN tbl_Encapsulamento ON tbl_Encapsulamento.ID_Produto = tbl_Produtos.ID_Produto WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor) ORDER BY Nome_Sistema"; }
            }

            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            if (fornecedor != "TODOS") { select.Parameters.AddWithValue("@fornecedor", fornecedor); }
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                string codigo = leitor[0].ToString();
                int id_produto = Convert.ToInt32(leitor[1]);
                string produto = leitor[2].ToString();
                int qtd_atual = Convert.ToInt32(leitor[3]);

                Produtos.Add(new Balanco
                {
                    Codigo = codigo,
                    ID_Produto = id_produto,
                    Nome_Sistema = produto,
                    Quantidade_Atual = qtd_atual,
                    Quantidade = 0
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return Produtos;
        }
        public AutoCompleteStringCollection ListaDeProdutos()
        {
            string comando = "SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE Ativacao = 'Sim'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            AutoCompleteStringCollection Produtos = new AutoCompleteStringCollection();
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                Produtos.Add(leitor[0].ToString());
            }
            leitor.Close();
            conexao.Desconectar();
            return Produtos;
        }
        public bool VerificarProdutoPeloNomeDoSistema(string nome_sistema)
        {
            string comando = "SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE Ativacao = 'Sim' AND Nome_Sistema = @nome_sistema";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@nome_sistema", @nome_sistema);
            bool verificar;

            if (select.ExecuteScalar() == null) { verificar = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { verificar = false; }
            else { verificar = true; }
            conexao.Desconectar();
            return verificar;
        }
        public Balanco TrazerInformacoesDoProduto(string nome_sistema, string setor)
        {
            string comando;
            Balanco Balanco = new Balanco();
            if (setor == "Loja") { comando = "SELECT Cod_Barras, tbl_Produtos.ID_Produto, Nome_Sistema, qtd_Prateleira FROM tbl_Produtos INNER JOIN tbl_Encapsulamento ON tbl_Encapsulamento.ID_Produto = tbl_Produtos.ID_Produto WHERE Nome_Sistema = @nome_sistema"; }
            else if (setor == "Estoque") { comando = "SELECT Cod_Barras, tbl_Produtos.ID_Produto, Nome_Sistema, qtd_Deposito1 FROM tbl_Produtos INNER JOIN tbl_Encapsulamento ON tbl_Encapsulamento.ID_Produto = tbl_Produtos.ID_Produto WHERE Nome_Sistema = @nome_sistema"; }
            else { comando = "SELECT Cod_Barras, tbl_Produtos.ID_Produto, Nome_Sistema, qtd_Deposito2 FROM tbl_Produtos INNER JOIN tbl_Encapsulamento ON tbl_Encapsulamento.ID_Produto = tbl_Produtos.ID_Produto WHERE Nome_Sistema = @nome_sistema"; }
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@nome_sistema", nome_sistema);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                string codigo = leitor[0].ToString();
                int id_produto = Convert.ToInt32(leitor[1]);
                string produto = leitor[2].ToString();
                int qtd_atual = Convert.ToInt32(leitor[3]);

                Balanco.Codigo = codigo;
                Balanco.ID_Produto = id_produto;
                Balanco.Nome_Sistema = produto;
                Balanco.Quantidade_Atual = qtd_atual;
                Balanco.Quantidade = 0;
            }
            leitor.Close();
            conexao.Desconectar();
            return Balanco;
        }
        public List<Avaria> ListaDeAvarias(bool pendentes, bool definidos, bool loja, bool estoque, bool deposito)
        {
            List<Avaria> Avarias = new List<Avaria>();

            if (pendentes || definidos)
            {
                string comando;
                string Pendentes = "SELECT ID_Avaria, (SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE ID_Produto = tbl_Avarias.ID_Produto), Quantidade, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Produtos WHERE ID_Produto = tbl_Avarias.ID_Produto)) AS Fornecedor, Tipo_Avaria, Status, Data_Deteccao FROM tbl_Avarias WHERE Status = 'Pendente'";
                string union = " UNION ";
                string Definidos = "SELECT ID_Avaria, (SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE ID_Produto = tbl_Avarias.ID_Produto), Quantidade, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Produtos WHERE ID_Produto = tbl_Avarias.ID_Produto)) AS Fornecedor, Tipo_Avaria, Status, Data_Deteccao FROM tbl_Avarias WHERE Status = 'Trocar' OR Status = 'Vender' OR Status = 'Descartar'";
                string setores = string.Empty;

                if (loja || estoque || deposito && !loja || !estoque || !deposito)
                {
                    if (!loja && estoque && deposito)
                    {
                        setores = " AND Local_Deteccao <> 'Loja'";
                    }
                    else if (loja && !estoque && deposito)
                    {
                        setores = " AND Local_Deteccao <> 'Estoque'";
                    }
                    else if (loja && estoque && !deposito)
                    {
                        setores = " AND Local_Deteccao <> 'Depósito'";
                    }
                    else if (loja && !estoque && !deposito)
                    {
                        setores = " AND Local_Deteccao = 'Loja'";
                    }
                    else if (!loja && estoque && !deposito)
                    {
                        setores = " AND Local_Deteccao = 'Estoque'";
                    }
                    else if (!loja && !estoque && deposito)
                    {
                        setores = " AND Local_Deteccao = 'Depósito'";
                    }
                }

                if (definidos && !pendentes) { comando = Definidos + setores + " ORDER BY Fornecedor, Data_Deteccao"; }
                else if (!definidos && pendentes) { comando = Pendentes + setores + " ORDER BY Fornecedor, Data_Deteccao"; }
                else { comando = Definidos + setores + union + Pendentes + setores + " ORDER BY Fornecedor, Data_Deteccao"; }

                SqlCommand select = new SqlCommand(comando, conexao.Conectar());
                SqlDataReader leitor = select.ExecuteReader();
                while (leitor.Read())
                {
                    int id_avaria = Convert.ToInt32(leitor[0]);
                    string nome_sistema = leitor[1].ToString();
                    int quantidade = Convert.ToInt32(leitor[2]);
                    string fornecedor = leitor[3].ToString();
                    string tipo = leitor[4].ToString();
                    string status = leitor[5].ToString();

                    Avarias.Add(new Avaria
                    {
                        ID_Avaria = id_avaria,
                        Nome_Sistema = nome_sistema,
                        Quantidade = quantidade,
                        Fornecedor = fornecedor,
                        Tipo = tipo,
                        Status = status
                    });
                }
                leitor.Close();
                conexao.Desconectar();
            }

            return Avarias;
        }
        public List<string> TrazerListaDeFornecedores()
        {
            List<string> lista = new List<string>();
            SqlCommand comando = new SqlCommand("SELECT Nome_Fornecedor FROM tbl_Fornecedores ORDER BY Nome_Fornecedor", conexao.Conectar());
            SqlDataReader leitor = comando.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }
        public List<string> TrazerFornecedoresPorLista()
        {
            List<string> lista = new List<string>();
            SqlCommand comando = new SqlCommand("SELECT Nome_Fornecedor FROM tbl_Fornecedores ORDER BY Nome_Fornecedor", conexao.Conectar());
            SqlDataReader leitor = comando.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }
        public List<string> TrazerTransportadorasPorLista()
        {
            List<string> lista = new List<string>();
            lista.Add("");
            lista.Add("TODOS");
            SqlCommand comando = new SqlCommand("SELECT Transportadora FROM tbl_Transportadoras ORDER BY Transportadora", conexao.Conectar());
            SqlDataReader leitor = comando.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }


        public int TrazerIdDoProdutoPeloNomeDoSistema(string nome_sistema)
        {
            int id;
            string comando = "SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@nome_sistema", nome_sistema);
                id = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return id;
        }
        public Reposicao InformacoesDaReposicao(string setor)
        {
            string comando;
            if (setor == "Loja")
            {
                comando = "SELECT Inicio, Termino, (SELECT Valor_Parametro FROM tbl_Parametros WHERE Nome_Parametro = 'Tempo de Reposição - Loja'), (SELECT CONVERT (VARCHAR, ID_Colaborador) + ' - ' + Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Responsaveis WHERE Descricao = 'Reposição Loja')), (SELECT Inicio FROM tbl_ParametrosHora WHERE Descricao = 'Próxima Reposição Loja') FROM tbl_ParametrosHora WHERE Descricao = 'Reposição Loja'";
            }
            else
            {
                comando = "SELECT Inicio, Termino, (SELECT Valor_Parametro FROM tbl_Parametros WHERE Nome_Parametro = 'Tempo de Reposição - Estoque'), (SELECT CONVERT (VARCHAR, ID_Colaborador) + ' - ' + Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Responsaveis WHERE Descricao = 'Reposição Estoque')), (SELECT Inicio FROM tbl_ParametrosHora WHERE Descricao = 'Próxima Reposição Estoque') FROM tbl_ParametrosHora WHERE Descricao = 'Reposição Estoque'";
            }

            Reposicao Reposicao = new Reposicao();
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        if (leitor[0] != DBNull.Value) { Reposicao.Primeira = Convert.ToDateTime(leitor[0].ToString()); }
                        if (leitor[1] != DBNull.Value) { Reposicao.Ultima = Convert.ToDateTime(leitor[1].ToString()); }
                        if (leitor[2] != DBNull.Value) { Reposicao.Intervalo = Convert.ToInt32(leitor[2]); }
                        if (leitor[3] != DBNull.Value) { Reposicao.Responsavel = leitor[3].ToString(); }
                        if (leitor[4] != DBNull.Value) { Reposicao.Proxima = Convert.ToDateTime(leitor[4].ToString()); }
                    }
                }

            }

            conexao.Desconectar();
            return Reposicao;
        }
        public void EditarParametrosDasReposicoes(Reposicao Reposicao_Loja, Reposicao Reposicao_Estoque)
        {
            string primeira_loja = Reposicao_Loja.Primeira.ToShortTimeString();
            string ultima_loja = Reposicao_Loja.Ultima.ToShortTimeString();
            int intervalo_loja = Reposicao_Loja.Intervalo;
            int id_responsavel_loja = Reposicao_Loja.ID_Responsavel;
            string proxima_loja = Reposicao_Loja.Proxima.ToString();

            string primeira_estoque = Reposicao_Estoque.Primeira.ToShortTimeString();
            string ultima_estoque = Reposicao_Estoque.Ultima.ToShortTimeString();
            int intervalo_estoque = Reposicao_Estoque.Intervalo;
            int id_responsavel_estoque = Reposicao_Estoque.ID_Responsavel;
            string proxima_estoque = Reposicao_Estoque.Proxima.ToString();

            string cmd1 = "UPDATE tbl_ParametrosHora SET Inicio = @primeira_loja, Termino = @ultima_loja WHERE Descricao = 'Reposição Loja'";
            SqlCommand up1 = new SqlCommand(cmd1, conexao.Conectar());
            up1.Parameters.AddWithValue("@primeira_loja", primeira_loja);
            up1.Parameters.AddWithValue("@ultima_loja", ultima_loja);
            up1.ExecuteNonQuery();

            string cmd2 = "UPDATE tbl_ParametrosHora SET Inicio = @proxima_loja WHERE Descricao = 'Próxima Reposição Loja'";
            SqlCommand up2 = new SqlCommand(cmd2);
            up2.Parameters.AddWithValue("@proxima_loja", proxima_loja);
            up2.ExecuteNonQuery();

            string cmd3 = "UPDATE tbl_Parametros SET Valor_Parametro = @intervalo_loja WHERE Nome_Parametro = 'Tempo de Reposição - Loja'";
            SqlCommand up3 = new SqlCommand(cmd3);
            up3.Parameters.AddWithValue("@intervalo_loja", intervalo_loja);
            up3.ExecuteNonQuery();

            string cmd4 = "UPDATE tbl_Responsaveis SET ID_Colaborador = @id_responsavel_loja WHERE Descricao = 'Reposição Loja'";
            SqlCommand up4 = new SqlCommand(cmd4);
            up4.Parameters.AddWithValue("@id_responsavel_loja", id_responsavel_loja);
            up4.ExecuteNonQuery();

            string comando1 = "UPDATE tbl_ParametrosHora SET Inicio = @primeira_estoque, Termino = @ultima_estoque WHERE Descricao = 'Reposição Estoque'";
            SqlCommand update1 = new SqlCommand(comando1);
            update1.Parameters.AddWithValue("@primeira_estoque", primeira_estoque);
            update1.Parameters.AddWithValue("@ultima_estoque", ultima_estoque);
            update1.ExecuteNonQuery();

            string comando2 = "UPDATE tbl_ParametrosHora SET Inicio = @proxima_estoque WHERE Descricao = 'Próxima Reposição Estoque'";
            SqlCommand update2 = new SqlCommand(comando2);
            update2.Parameters.AddWithValue("@proxima_estoque", proxima_estoque);
            update2.ExecuteNonQuery();

            string comando3 = "UPDATE tbl_Parametros SET Valor_Parametro = @intervalo_estoque WHERE Nome_Parametro = 'Tempo de Reposição - Estoque'";
            SqlCommand update3 = new SqlCommand(comando3);
            update3.Parameters.AddWithValue("@intervalo_estoque", intervalo_estoque);
            update3.ExecuteNonQuery();

            string comando4 = "UPDATE tbl_Responsaveis SET ID_Colaborador = @id_responsavel_estoque WHERE Descricao = 'Reposição Estoque'";
            SqlCommand update4 = new SqlCommand(comando4);
            update4.Parameters.AddWithValue("@id_responsavel_estoque", id_responsavel_estoque);
            update4.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Parâmetros da reposição alterados com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        #endregion

        #region Métodos do Formulário Utensílio (Antigo)
        public void PreencherDataGridViewUtensilios(DataGridView dataGridView, BindingSource bindingSource) //Preenche DatagridView
        {
            var comandoSQL = "SELECT DISTINCT tbl_Utensilios.Nome_utensilio, Nome_Produto, Preco_Custo, tbl_Produtos.Ativacao, tbl_Produtos.Validacao, tbl_Produtos.Disponibilidade, tbl_Produtos._Status FROM tbl_Produtos INNER JOIN tbl_Utensilios ON tbl_Utensilios.ID_Utensilio = tbl_Produtos.ID_Utensilio ORDER BY Nome_utensilio, Preco_Custo";
            comando = new SqlCommand(comandoSQL, conexao.Conectar());
            try
            {
                SqlDataAdapter adaptador = new SqlDataAdapter(comando);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGridView.DataSource = bindingSource;
            }
            catch
            {
                MessageBox.Show("ERRO AO SE CONECTAR COM BANCO DE DADOS!");
            }
        }
        public List<Validacao> AtualizarStatusDoUtensilio(string utensilio)
        {
            string consulta = "SELECT tbl_Utensilios.Nome_utensilio, qtd_Ativos, Nome_Produto, _Status, Preco_Custo FROM tbl_Produtos INNER JOIN tbl_Utensilios ON tbl_Utensilios.ID_Utensilio = tbl_Produtos.ID_Utensilio WHERE tbl_Utensilios.Nome_utensilio = @utensilio ORDER BY Nome_utensilio, Preco_Custo, Nome_Produto";
            List<Validacao> listaValidacao = new List<Validacao>();
            try
            {
                SqlCommand select = new SqlCommand(consulta, conexao.Conectar());
                select.Parameters.AddWithValue("@utensilio", utensilio);
                select.CommandType = CommandType.Text;
                SqlDataReader leitor = select.ExecuteReader();
                int i = 0;
                while (leitor.Read())
                {
                    i++;
                    listaValidacao.Add(new Validacao()
                    {
                        Index = i,
                        Utensilio = leitor["Nome_Utensilio"].ToString(),
                        Produto = leitor["Nome_Produto"].ToString(),
                        Custo = Convert.ToDouble(leitor["Preco_Custo"]),
                    });
                }
                leitor.Close();
                return listaValidacao;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                conexao.Desconectar();
            }
        }
        public int ConsultarQtdProdutos(string utensilio)
        {
            SqlCommand comando = new SqlCommand("Select qtd_Produtos FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio", conexao.Conectar());
            comando.Parameters.AddWithValue("@utensilio", utensilio);
            int qtd_Produtos = Convert.ToInt32(comando.ExecuteScalar());

            return qtd_Produtos;
        }
        public int ConsultarQtdAtivos(string utensilio)
        {
            SqlCommand comando = new SqlCommand("Select qtd_Ativos FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio", conexao.Conectar());
            comando.Parameters.AddWithValue("@utensilio", utensilio);
            int qtd_Ativos = Convert.ToInt32(comando.ExecuteScalar());

            return qtd_Ativos;
        }
        public void SalvarAlteracoesDoUtensilio(string produto, string ativacao, string disponibilidade, string validacao, string status)
        {
            SqlCommand comando = new SqlCommand("UPDATE tbl_Produtos SET Ativacao = @ativacao, Disponibilidade = @disponibilidade, Validacao = @validacao, _Status = @status WHERE Nome_Produto = @produto", conexao.Conectar());
            comando.Parameters.AddWithValue("@status", status);
            comando.Parameters.AddWithValue("@produto", produto);
            comando.Parameters.AddWithValue("@validacao", validacao);
            comando.Parameters.AddWithValue("@disponibilidade", disponibilidade);
            comando.Parameters.AddWithValue("@ativacao", ativacao);
            comando.ExecuteNonQuery();
        }
        #endregion

        #region Consulta Rápida
        public void ListaDeProdutosParaConsultaRapida(BindingSource bindingSource, DataGridView dataGridView)
        {
            string comando = "SELECT tbl_Catalogo.ID_ProdutoVariacao AS N, (SELECT Nome_utensilio FROM tbl_Utensilios WHERE ID_Utensilio = (SELECT ID_Utensilio FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto)) AS Utensilio, Nome AS Produto, tbl_ProdutoVariacao.Cod_Barras AS Codigo, (SELECT Fabricante FROM tbl_Fabricantes WHERE ID_Fabricante = (SELECT ID_Fabricante FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto)) AS Fabricante FROM tbl_Catalogo INNER JOIN tbl_ProdutoVariacao ON tbl_Catalogo.ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao ORDER BY Nome";

            SqlCommand select = new SqlCommand(comando, conexao.Conectar());

            try
            {
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGridView.DataSource = bindingSource;
            }
            catch (Exception e)
            {
                MessageBox.Show("ERRO AO SE CONECTAR COM BANCO DE DADOS!\r\n" + e);
            }
            conexao.Desconectar();
        }
        public Produto_Lote TrazerInformacoesDaConsultaRapida(int id_produto, int id_reparticao)
        {
            string comando = "SELECT Nome AS Produto, (SELECT Cod_Barras FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) AS Codigo, ISNULL((SELECT SUM(Quantidade) FROM tbl_ProdutosLote WHERE Disponibilidade = 1 AND ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao), 0) AS Estoque_Atual, ISNULL((SELECT SUM(Quantidade) FROM tbl_ProdutosLote WHERE Disponibilidade = 1 AND ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao AND Disponibilidade = 1 AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = @id_reparticao), 0) AS Reparticao, Preco_Venda AS Venda FROM tbl_Catalogo INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao WHERE tbl_Catalogo.ID_ProdutoVariacao = @id_produto";
            Produto_Lote Produto = new Produto_Lote();

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_produto", id_produto);
                select.Parameters.AddWithValue("@id_reparticao", id_reparticao);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        string produto = leitor[0].ToString();
                        string codigo = leitor[1].ToString();
                        int atual = Convert.ToInt32(leitor[2]);
                        int estoque_local = Convert.ToInt32(leitor[3]);
                        decimal venda = Convert.ToDecimal(leitor[4]);

                        Produto.Nome_Produto = produto;
                        Produto.Cod_Barras = codigo;
                        Produto.Qtd_Produtos = atual;
                        Produto.Quantidade = estoque_local;
                        Produto.Preco_Venda = venda;
                    }
                }
            }

            conexao.Desconectar();

            return Produto;
        }
        #endregion

        #region Almoxarifado

        public List<Almoxarifado> ListaDoAlmoxarifado()
        {
            string comando = "SELECT ID_Almoxarifado, Produto, Estoque_Minimo, Estoque_Ideal, Estoque_Atual, Status FROM tbl_Almoxarifado";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            List<Almoxarifado> Lista = new List<Almoxarifado>();

            while (leitor.Read())
            {
                Lista.Add(new Almoxarifado
                {
                    ID_Almoxarifado = Convert.ToInt32(leitor[0]),
                    Item = leitor[1].ToString(),
                    Estoque_Minimo = Convert.ToInt32(leitor[2]),
                    Estoque_Ideal = Convert.ToInt32(leitor[3]),
                    Estoque_Atual = Convert.ToInt32(leitor[4]),
                    Status = leitor[5].ToString()
                });
            }

            leitor.Close();
            conexao.Desconectar();

            return Lista;
        }

        public void RegistrarSaidaDoAlmoxarifado(Almoxarifado Item)
        {
            string comando = "INSERT INTO tbl_SaidaAlmoxarifado (ID_Almoxarifado, Quantidade, Data, ID_Colaborador) VALUES (@id, @quantidade, GETDATE(), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula))";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@id", Item.ID_Almoxarifado);
            insert.Parameters.AddWithValue("@quantidade", Item.Estoque_Ideal);
            insert.Parameters.AddWithValue("@matricula", Program.matricula);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            string comando1 = "UPDATE tbl_Almoxarifado SET Estoque_Atual = Estoque_Atual - @quantidade WHERE ID_Almoxarifado = @id";
            SqlCommand update = new SqlCommand(comando1, conexao.Conectar());
            update.Parameters.AddWithValue("@id", Item.ID_Almoxarifado);
            update.Parameters.AddWithValue("@quantidade", Item.Estoque_Ideal);
            update.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Saída de " + Item.Estoque_Ideal + " " + Item.Item + " registrada.", "Registrado", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public AutoCompleteStringCollection AutoCompleteAlmoxarifado()
        {
            string comando = "SELECT Produto FROM tbl_Almoxarifado WHERE Status = 'Ativo'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            AutoCompleteStringCollection colecao = new AutoCompleteStringCollection();
            while (leitor.Read())
            {
                colecao.Add(leitor["Produto"].ToString());
            }
            leitor.Close();

            conexao.Desconectar();
            return colecao;
        }

        public void RegistrarEntradaDoAlmoxarifado(List<Almoxarifado> Itens)
        {
            foreach (Almoxarifado item in Itens)
            {
                string comando = "INSERT INTO tbl_ComprasAlmoxarifado (Quantidade, Preco, ID_Almoxarifado) VALUES (@quantidade, @preco, (SELECT ID_Almoxarifado FROM tbl_Almoxarifado WHERE Produto = @item))";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@quantidade", item.Estoque_Ideal);
                insert.Parameters.AddWithValue("@item", item.Item);
                insert.Parameters.AddWithValue("@preco", item.Custo);
                insert.ExecuteNonQuery();

                string comando2 = "UPDATE tbl_Almoxarifado SET Custo_Un = @preco, Estoque_Atual = Estoque_Atual + @quantidade WHERE ID_Almoxarifado = (SELECT ID_Almoxarifado FROM tbl_Almoxarifado WHERE Produto = @item)";
                SqlCommand update2 = new SqlCommand(comando2, conexao.Conectar());
                update2.Parameters.AddWithValue("@quantidade", item.Estoque_Ideal);
                update2.Parameters.AddWithValue("@preco", item.Custo);
                update2.Parameters.AddWithValue("@item", item.Item);
                update2.ExecuteNonQuery();
            }

            conexao.Desconectar();
            MessageBox.Show("Entrada registrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void InativarItemDoAlmoxarifado(int id)
        {
            string comando = "UPDATE tbl_Almoxarifado SET Status = 'Inativo' WHERE ID_Almoxarifado = @id";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id", id);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void AtivarItemDoAlmoxarifado(int id)
        {
            string comando = "UPDATE tbl_Almoxarifado SET Status = 'Ativo' WHERE ID_Almoxarifado = @id";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id", id);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public Almoxarifado TrazerInformacoesDoItem(int id)
        {
            string comando = "SELECT Produto, Estoque_Minimo, Estoque_Ideal, Estoque_Atual, Custo_Un, Periodo_Reposicao, Proxima_Reposicao, Status, (SELECT Categoria FROM tbl_CategoriasAlmoxarifado WHERE ID_Categoria = tbl_Almoxarifado.ID_Categoria), Restricao FROM tbl_Almoxarifado WHERE ID_Almoxarifado = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            SqlDataReader leitor = select.ExecuteReader();
            Almoxarifado item = new Almoxarifado();

            while (leitor.Read())
            {
                item.Item = leitor[0].ToString();
                item.Estoque_Minimo = Convert.ToInt32(leitor[1]);
                item.Estoque_Ideal = Convert.ToInt32(leitor[2]);
                item.Estoque_Atual = Convert.ToInt32(leitor[3]);
                item.Custo = Convert.ToDecimal(leitor[4]);
                item.Periodo_Reposicao = Convert.ToInt32(leitor[5]);
                item.Proxima_Reposicao = Convert.ToDateTime(leitor[6].ToString());
                item.Status = leitor[7].ToString();
                item.Categoria = leitor[8].ToString();
                item.Restricao = Convert.ToBoolean(leitor[9]);
            }

            leitor.Close();
            conexao.Desconectar();

            return item;
        }

        public List<string> ListaDeCategoriasDoAlmoxarifado()
        {
            string comando = "SELECT Categoria FROM tbl_CategoriasAlmoxarifado";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            List<string> categorias = new List<string>();

            while (leitor.Read())
            {
                categorias.Add(leitor[0].ToString());
            }
            leitor.Close();
            conexao.Desconectar();

            return categorias;
        }

        public void EditarItemDoAlmoxarifado(Almoxarifado Item)
        {
            int id = Item.ID_Almoxarifado;
            string item = Item.Item;
            int minimo = Item.Estoque_Minimo;
            int ideal = Item.Estoque_Ideal;
            int atual = Item.Estoque_Atual;
            decimal custo = Item.Custo;
            int periodo = Item.Periodo_Reposicao;
            string status = Item.Status;
            string proxima_reposicao = Item.Proxima_Reposicao.ToShortDateString();
            string categoria = Item.Categoria;
            bool restricao = Item.Restricao;

            string comando = "UPDATE tbl_Almoxarifado SET Produto = @item, Estoque_Minimo = @minimo, Estoque_Ideal = @ideal, Estoque_Atual = @atual, Custo_Un = @custo, Periodo_Reposicao = @periodo, Status = @status, Proxima_Reposicao = @proxima_reposicao, ID_Categoria = (SELECT ID_Categoria FROM tbl_CategoriasAlmoxarifado WHERE Categoria = @categoria), Restricao = @restricao WHERE ID_Almoxarifado = @id";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id", id);
            update.Parameters.AddWithValue("@item", item);
            update.Parameters.AddWithValue("@minimo", minimo);
            update.Parameters.AddWithValue("@ideal", ideal);
            update.Parameters.AddWithValue("@atual", atual);
            update.Parameters.AddWithValue("@custo", custo);
            update.Parameters.AddWithValue("@periodo", periodo);
            update.Parameters.AddWithValue("@status", status);
            update.Parameters.AddWithValue("@proxima_reposicao", proxima_reposicao);
            update.Parameters.AddWithValue("@categoria", categoria);
            update.Parameters.AddWithValue("@restricao", restricao);

            update.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Item editado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public bool VerificarSeItemDoAlmoxarifadoJaExiste(string nome)
        {
            string comando = "SELECT COUNT (*) FROM tbl_Almoxarifado WHERE Produto = @nome";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@nome", nome);
            bool verificar;
            if (Convert.ToInt32(select.ExecuteScalar()) > 0) { verificar = true; }
            else { verificar = false; }

            return verificar;
        }

        public void CadastrarItemDoAlmoxarifado(Almoxarifado Item)
        {
            string item = Item.Item;
            int minimo = Item.Estoque_Minimo;
            int ideal = Item.Estoque_Ideal;
            int atual = Item.Estoque_Atual;
            decimal custo = Item.Custo;
            int periodo = Item.Periodo_Reposicao;
            string status = Item.Status;
            string proxima_reposicao = Item.Proxima_Reposicao.ToShortDateString();
            string categoria = Item.Categoria;
            bool restricao = Item.Restricao;

            string comando = "INSERT INTO tbl_Almoxarifado (Produto, Estoque_Minimo, Estoque_Ideal, Estoque_Atual, Custo_Un, Periodo_Reposicao, Status, Proxima_Reposicao, ID_Categoria, Restricao) VALUES (@item, @minimo, @ideal, @atual, @custo, @periodo, status, @proxima_reposicao, (SELECT ID_Categoria FROM tbl_CategoriasAlmoxarifado WHERE Categoria = @categoria), @restricao)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());

            insert.Parameters.AddWithValue("@item", item);
            insert.Parameters.AddWithValue("@minimo", minimo);
            insert.Parameters.AddWithValue("@ideal", ideal);
            insert.Parameters.AddWithValue("@atual", atual);
            insert.Parameters.AddWithValue("@custo", custo);
            insert.Parameters.AddWithValue("@periodo", periodo);
            insert.Parameters.AddWithValue("@status", status);
            insert.Parameters.AddWithValue("@proxima_reposicao", proxima_reposicao);
            insert.Parameters.AddWithValue("@categoria", categoria);
            insert.Parameters.AddWithValue("@restricao", restricao);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Item editado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<Almoxarifado> ReposicaoDoAlmoxarifado()
        {
            string comando = "SELECT ID_Almoxarifado, Produto, Custo_Un, Estoque_Ideal - Estoque_Atual FROM tbl_Almoxarifado WHERE Estoque_Ideal - Estoque_Atual > 0 AND Status = 'Ativo'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            List<Almoxarifado> Lista = new List<Almoxarifado>();

            while (leitor.Read())
            {
                Lista.Add(new Almoxarifado
                {
                    ID_Almoxarifado = Convert.ToInt32(leitor[0]),
                    Item = leitor[1].ToString(),
                    Custo = Convert.ToDecimal(leitor[2]),
                    Estoque_Ideal = Convert.ToInt32(leitor[3]),
                    Comprar = true
                });
            }

            leitor.Close();
            conexao.Desconectar();

            return Lista;
        }

        public int IdDaUltimaReposicaoDoAlmoxarifado()
        {
            string comando = "SELECT TOP(1) ID_Reposicao FROM tbl_ComprasAlmoxarifado ORDER BY ID_Reposicao DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            int id;
            if (select.ExecuteScalar() == DBNull.Value) { id = 0; }
            else { id = Convert.ToInt32(select.ExecuteScalar()); }

            conexao.Desconectar();
            return id;
        }

        public void RegistrarReposicaoDoAlmoxarifado(List<Almoxarifado> Lista)
        {
            string comando = "INSERT INTO tbl_ReposicaoAlmoxarifado (ID_Colaborador, Data, Status) VALUES ((SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), 'Pendente')";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@matricula", Program.matricula);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            foreach (Almoxarifado item in Lista)
            {
                if (item.Comprar)
                {
                    string comando1 = "INSERT INTO tbl_ComprasAlmoxarifado (ID_Reposicao, ID_Almoxarifado, Quantidade_Sugerida, Preco) VALUES ((SELECT TOP(1) ID_Reposicao FROM tbl_ReposicaoAlmoxarifado ORDER BY ID_Reposicao DESC), @id_almoxarifado, @quantidade, @preco)";
                    SqlCommand insert1 = new SqlCommand(comando1, conexao.Conectar());
                    insert1.Parameters.AddWithValue("@quantidade", item.Estoque_Ideal);
                    insert1.Parameters.AddWithValue("@id_almoxarifado", item.ID_Almoxarifado);
                    insert1.Parameters.AddWithValue("@preco", item.Custo);
                    insert1.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            ImprimirReposicaoDoAlmoxarifado(IdDaUltimaReposicaoDoAlmoxarifado());
        }

        public void ImprimirReposicaoDoAlmoxarifado(int id_reposicao)
        {
            string operador = Program.colaborador.Nome_Colaborador + " (" + Program.colaborador.Matricula + ")";
            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();

            formRepReposicaoAlmoxarifado relatorio = new formRepReposicaoAlmoxarifado();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("responsavel", operador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("id", id_reposicao.ToString()));

            relatorio.ReposicaoAlmoxarifadoTableAdapter.Fill(relatorio.ReposicaoAlmoxarifado._ReposicaoAlmoxarifado, id_reposicao);
            relatorio.reportViewer1.RefreshReport();
            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            //for (int i = 0; i < 2; i++) Imprimir duas vias
            //{
            autoprintme.Print();
            //}
        }

        public List<string> ReposicoesDoAlmoxarifadoEmAberto()
        {
            string comando = "SELECT ID_Reposicao FROM tbl_ReposicaoAlmoxarifado WHERE Status = 'Pendente'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            List<string> Lista = new List<string>();

            while (leitor.Read())
            {
                Lista.Add(leitor[0].ToString());
            }

            leitor.Close();
            conexao.Desconectar();

            return Lista;
        }

        public List<Almoxarifado> ListaDeConfirmacaoDaReposicaoDoAlmoxarifado(int id_reposicao)
        {
            string comando = "SELECT ID_ProdutoAlmoxarifado, (SELECT Produto FROM tbl_Almoxarifado WHERE ID_Almoxarifado = tbl_ComprasAlmoxarifado.ID_Almoxarifado), Preco, Quantidade_Sugerida FROM tbl_ComprasAlmoxarifado WHERE ID_Reposicao = @id_reposicao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_reposicao", id_reposicao);
            SqlDataReader leitor = select.ExecuteReader();
            List<Almoxarifado> Lista = new List<Almoxarifado>();

            while (leitor.Read())
            {
                Lista.Add(new Almoxarifado
                {
                    ID_Almoxarifado = Convert.ToInt32(leitor[0]),
                    Item = leitor[1].ToString(),
                    Custo = Convert.ToDecimal(leitor[2]),
                    Estoque_Ideal = Convert.ToInt32(leitor[3])
                });
            }

            leitor.Close();
            conexao.Desconectar();

            return Lista;
        }

        public void ConfirmarReposicaoDoAlmoxarifado(List<Almoxarifado> Itens, int id_reposicao)
        {
            foreach (Almoxarifado Item in Itens)
            {
                int quantidade = Item.Estoque_Ideal;
                decimal preco = Item.Custo;
                int id = Item.ID_Almoxarifado;

                string comando = "UPDATE tbl_ComprasAlmoxarifado SET Quantidade = @quantidade, Preco = @preco WHERE ID_ProdutoAlmoxarifado = @id";
                SqlCommand update = new SqlCommand(comando, conexao.Conectar());
                update.Parameters.AddWithValue("@quantidade", quantidade);
                update.Parameters.AddWithValue("@preco", preco);
                update.Parameters.AddWithValue("@id", id);
                update.ExecuteNonQuery();

                string comando2 = "UPDATE tbl_Almoxarifado SET Custo_Un = @preco, Estoque_Atual = Estoque_Atual + @quantidade WHERE ID_Almoxarifado = (SELECT ID_Almoxarifado FROM tbl_ComprasAlmoxarifado WHERE ID_ProdutoAlmoxarifado = @id)";
                SqlCommand update2 = new SqlCommand(comando2, conexao.Conectar());
                update2.Parameters.AddWithValue("@quantidade", quantidade);
                update2.Parameters.AddWithValue("@preco", preco);
                update2.Parameters.AddWithValue("@id", id);
                update2.ExecuteNonQuery();
            }
            conexao.Desconectar();

            string comando1 = "UPDATE tbl_ReposicaoAlmoxarifado SET Status = 'Concluído' WHERE ID_Reposicao = @id_reposicao";
            SqlCommand update1 = new SqlCommand(comando1, conexao.Conectar());
            update1.Parameters.AddWithValue("@id_reposicao", id_reposicao);
            update1.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Reposição confirmada com sucesso!", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        #endregion

        #region Produtos sobrando
        public int TrazerQuantidadeDoEstoque(string produto)
        {
            string comando = "SELECT qtd_Deposito1 FROM tbl_Produtos WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @produto)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@produto", produto);
            int quantidade;
            if (select.ExecuteScalar() == null) { quantidade = 0; }
            else { quantidade = Convert.ToInt32(select.ExecuteScalar()); }

            conexao.Desconectar();

            return quantidade;
        }
        public void RegistrarProdutoSobrando(string produto, int quantidade)
        {
            for (int i = 0; i < quantidade; i++)
            {
                string comando = "INSERT INTO tbl_ProdutosSobrando (ID_Produto, Status, ID_ColaboradorEntrada) VALUES ((SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @produto), 'Disponível', (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula))";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@produto", produto);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
            MessageBox.Show("Produto sobrando registrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public List<ProdutoReposicao> ListaDeProdutosSobrando()
        {
            List<ProdutoReposicao> Produtos = new List<ProdutoReposicao>();
            string comando = "SELECT tbl_Produtos.ID_Produto, (SELECT Nome_Sistema FROM tbl_Encapsulamento WHERE ID_Produto = tbl_Produtos.ID_Produto) AS Produto, (SELECT COUNT(*) FROM tbl_ProdutosSobrando WHERE Status = 'Disponível' and ID_Produto = tbl_Produtos.ID_Produto) AS Quantidade FROM tbl_ProdutosSobrando INNER JOIN tbl_Produtos ON tbl_Produtos.ID_Produto = tbl_ProdutosSobrando.ID_Produto WHERE (SELECT COUNT(*) FROM tbl_ProdutosSobrando WHERE Status = 'Disponível' and ID_Produto = tbl_Produtos.ID_Produto) > 0 GROUP BY tbl_Produtos.ID_Produto ORDER BY Produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                int id_produto = Convert.ToInt32(leitor[0]);
                string produto = leitor[1].ToString();
                int quantidade = Convert.ToInt32(leitor[2]);

                Produtos.Add(new ProdutoReposicao
                {
                    ID_Produto = id_produto,
                    Nome_Produto = produto,
                    Quantidade = quantidade
                });
            }

            leitor.Close();
            conexao.Desconectar();

            return Produtos;
        }
        public void RegistrarSaidaDoProdutoSobrando(int id_produto, int quantidade)
        {
            for (int i = 0; i < quantidade; i++)
            {
                string comando = "UPDATE tbl_ProdutosSobrando SET Status = 'Retirado', ID_ColaboradorSaida = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) WHERE ID_ProdutoSobrando = (SELECT TOP(1) ID_ProdutoSobrando FROM tbl_ProdutosSobrando WHERE ID_Produto = @id_produto AND Status = 'Disponível')";
                SqlCommand update = new SqlCommand(comando, conexao.Conectar());
                update.Parameters.AddWithValue("@id_produto", id_produto);
                update.Parameters.AddWithValue("@matricula", Program.matricula);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
            MessageBox.Show("Produto sobrando registrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        #endregion

        #endregion

        #region Métodos do Formulário Fornecedores

        #region Fornecedores
        public void PreencherDataGridFornecedores(DataGridView dataGrid, BindingSource bindingSource)
        {
            string comando = "SELECT ID_Fornecedor, Nome_Fornecedor AS Fornecedor, Disponibilidade, IPI, ICMS, Tipo_Frete AS Frete, Periodo_Reposicao AS 'Reposicao', Prazo_Entrega AS 'Entrega', Nome_Representante AS Representante, Fone_Representante AS Telefone FROM tbl_Fornecedores ORDER BY Fornecedor";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            try
            {
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGrid.DataSource = bindingSource;
            }
            catch
            {
                MessageBox.Show("ERRO AO SE CONECTAR COM BANCO DE DADOS!");
            }
            conexao.Desconectar();
        }

        public void PreencherDataGridPedidos(DataGridView dataGrid)
        {
            ComandosSQL comandos = new ComandosSQL();
            string comando = "SELECT Nome_Fornecedor AS Fornecedor, Periodo_Reposicao AS Periodo, Proxima_Reposicao AS Proxima FROM tbl_Fornecedores WHERE Periodo_Reposicao > 0 AND Proxima_Reposicao IS NOT NULL";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            int linha_selecionada = 0, primeira_linha = 0;
            if (dataGrid.CurrentRow != null)
            {
                primeira_linha = dataGrid.FirstDisplayedScrollingRowIndex;
                linha_selecionada = dataGrid.CurrentRow.Index;
            }

            dataGrid.Rows.Clear();

            while (leitor.Read())
            {
                string fornecedor = leitor[0].ToString();
                string Proxima = Convert.ToDateTime(leitor[2].ToString()).ToShortDateString();
                DateTime hoje, proxima;
                TimeSpan result;
                hoje = DateTime.Parse(DateTime.Now.ToShortDateString());
                proxima = DateTime.Parse(Proxima);
                result = proxima - hoje;

                int dias = result.Days;
                string pedido;

                if (dias > 0)
                {
                    pedido = "Faltam " + dias.ToString() + " dias";
                }
                else if (dias < 0)
                {
                    pedido = "Atrasado / " + (-dias).ToString() + " dias";
                }
                else
                {
                    pedido = "Hoje";
                }

                dataGrid.Rows.Add(fornecedor, 0, pedido, 0);
            }
            leitor.Close();

            foreach (DataGridViewRow linha in dataGrid.Rows)
            {
                string fornecedor = dataGrid.Rows[linha.Index].Cells[0].Value.ToString();
                List<PedidoProdutos> lista = comandos.ProdutosDoPedido(fornecedor);
                decimal valor = lista.Cast<PedidoProdutos>().Sum(i => i.Preco_Total);
                double media;

                try
                {
                    try
                    {
                        double quantidade_atual_total = lista.Cast<PedidoProdutos>().Average(i => i.Atual);
                        double quantidade_ideal_total = lista.Cast<PedidoProdutos>().Average(i => i.Ideal);
                        media = quantidade_atual_total * 100 / quantidade_ideal_total;
                    }
                    catch
                    {
                        media = lista.Cast<PedidoProdutos>().Average(i => i.Atual * 100 / i.Ideal);
                    }
                }
                catch
                {
                    if (valor == 0) { media = 100; }
                    else { media = 0; }
                }
                string nivel = media.ToString("F") + "%";

                dataGrid.Rows[linha.Index].Cells[3].Value = valor.ToString("C");
                dataGrid.Rows[linha.Index].Cells[1].Value = nivel;
            }
            conexao.Desconectar();

            try
            {
                dataGrid.FirstDisplayedScrollingRowIndex = primeira_linha;
                dataGrid.CurrentCell = dataGrid.Rows[linha_selecionada].Cells[0];
            }
            catch { }
        }

        public List<PedidoProdutos> ProdutosDoPedido(string fornecedor)
        {
            decimal percentual = ObterValorDoParametro("Porcentagem Arredondar Pedido");

            List<PedidoProdutos> lista = new List<PedidoProdutos>();
            string comando = "SELECT tbl_ProdutoVariacao.ID_ProdutoVariacao, Nome_Produto AS Produto, (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) AS Cor, (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) AS Estampa, Cod_Extra, ISNULL(Estoque_Ideal, 0) AS Ideal, ISNULL((SELECT SUM(Quantidade) FROM tbl_ProdutosLote WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao AND Disponibilidade = 1), 0) AS Atual, Caixa, Aliquota_ICMS, Aliquota_IPI, Preco_Base, 'PRODUTO' AS Tipo, 'PRODUTO' AS Tipo_Conjunto FROM tbl_ProdutoVariacao INNER JOIN tbl_Produtos2 ON tbl_produtos2.ID_Produto = tbl_ProdutoVariacao.ID_Produto INNER JOIN tbl_Catalogo ON tbl_Catalogo.ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao WHERE (SELECT COUNT(ID_Fornecedor) FROM tbl_ProdutosFornecedores WHERE (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_ProdutosFornecedores.ID_Produto) = tbl_Produtos2.ID_Produto AND ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor)) > 0 AND ID_Conjunto IS NULL UNION SELECT tbl_ProdutoVariacao.ID_ProdutoVariacao, Nome_Produto AS Produto, (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) AS Cor, (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) AS Estampa, tbl_Produtos2.Cod_Extra, ISNULL(Estoque_Ideal, 0) AS Ideal, ISNULL((SELECT SUM(Quantidade) FROM tbl_ProdutosLote WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao AND Disponibilidade = 1), 0) AS Atual, Caixa, tbl_Produtos2.Aliquota_ICMS, tbl_Produtos2.Aliquota_IPI, tbl_Produtos2.Preco_Base, Tipo_Venda AS Tipo ,Tipo_Conjunto FROM tbl_ProdutoVariacao INNER JOIN tbl_Produtos2 ON tbl_produtos2.ID_Produto = tbl_ProdutoVariacao.ID_Produto INNER JOIN tbl_Catalogo ON tbl_Catalogo.ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao INNER JOIN tbl_Conjuntos ON tbl_Conjuntos.ID_Conjunto = tbl_Produtos2.ID_Conjunto WHERE (SELECT COUNT(ID_Fornecedor) FROM tbl_ProdutosFornecedores WHERE (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_ProdutosFornecedores.ID_Produto) = tbl_Produtos2.ID_Produto AND ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor)) > 0 AND Tipo_Conjunto = 'IDÊNTICOS' AND Tipo_Venda = 'CONJUNTO' UNION SELECT tbl_ProdutoVariacao.ID_ProdutoVariacao, (SELECT Nome_Original FROM tbl_Conjuntos WHERE ID_Conjunto = tbl_Produtos2.ID_Conjunto) AS Produto, (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) AS Cor, (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) AS Estampa, tbl_Produtos2.Cod_Extra, ISNULL(Estoque_Ideal / tbl_Conjuntos.Qtd_Produtos, 0) AS Ideal, ISNULL((SELECT SUM(Quantidade) FROM tbl_ProdutosLote WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao AND Disponibilidade = 1), 0) / tbl_Conjuntos.Qtd_Produtos AS Atual, Caixa, tbl_Conjuntos.Aliquota_ICMS, tbl_Conjuntos.Aliquota_IPI, tbl_Conjuntos.Preco_Base, Tipo_Venda AS Tipo, Tipo_Conjunto FROM tbl_ProdutoVariacao INNER JOIN tbl_Produtos2 ON tbl_produtos2.ID_Produto = tbl_ProdutoVariacao.ID_Produto INNER JOIN tbl_Catalogo ON tbl_Catalogo.ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao INNER JOIN tbl_Conjuntos ON tbl_Conjuntos.ID_Conjunto = tbl_Produtos2.ID_Conjunto WHERE (SELECT COUNT(ID_Fornecedor) FROM tbl_ProdutosFornecedores WHERE (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_ProdutosFornecedores.ID_Produto) = tbl_Produtos2.ID_Produto AND ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor)) > 0 AND tbl_Produtos2.ID_Conjunto > 0 AND Tipo_Conjunto = 'IDÊNTICOS' AND Tipo_Venda = 'UNIDADE' UNION SELECT DISTINCT tbl_Conjuntos.ID_Conjunto, Nome_Original AS Produto, (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) AS Cor, (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) AS Estampa, tbl_Produtos2.Cod_Extra, ISNULL(Estoque_Ideal, 0) AS Ideal, ISNULL((SELECT SUM(Quantidade) FROM tbl_ProdutosLote WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao AND Disponibilidade = 1), 0) AS Atual, Caixa, tbl_Conjuntos.Aliquota_ICMS, tbl_Conjuntos.Aliquota_IPI, tbl_Conjuntos.Preco_Base, Tipo_Venda AS Tipo, Tipo_Conjunto FROM tbl_ProdutoVariacao INNER JOIN tbl_Produtos2 ON tbl_produtos2.ID_Produto = tbl_ProdutoVariacao.ID_Produto INNER JOIN tbl_Catalogo ON tbl_Catalogo.ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao INNER JOIN tbl_Conjuntos ON tbl_Conjuntos.ID_Conjunto = tbl_Produtos2.ID_Conjunto WHERE (SELECT COUNT(ID_Fornecedor) FROM tbl_ProdutosFornecedores WHERE (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_ProdutosFornecedores.ID_Produto) = tbl_Produtos2.ID_Produto AND ID_Fornecedor = (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor)) > 0 AND tbl_Produtos2.ID_Conjunto > 0 AND Tipo_Conjunto = 'DISTINTOS'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@fornecedor", fornecedor);

            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                int id_produto = Convert.ToInt32(leitor[0]);
                string produto = leitor[1].ToString();
                string cor = leitor[2].ToString();
                string estampa = leitor[3].ToString();
                string cod_extra = leitor[4].ToString();
                int ideal = Convert.ToInt32(leitor[5]);
                int atual = Convert.ToInt32(leitor[6]);
                int caixa = Convert.ToInt32(leitor[7]);
                decimal aliquota_icms = Convert.ToDecimal(leitor[8]);
                decimal aliquota_ipi = Convert.ToDecimal(leitor[9]);
                decimal preco_base = Convert.ToDecimal(leitor[10]);
                string tipo_venda = leitor[11].ToString();
                string tipo_conjunto = leitor[12].ToString();

                decimal ipi = preco_base / 100 * aliquota_ipi;
                decimal icms = preco_base / 100 * aliquota_icms;

                decimal custo = preco_base + ipi + icms;

                int quantidade = ideal - atual; //Quantidade calculada para o pedido
                int pedido;

                //Vamos ter que criar um código para resolver o problema dos conjuntos distintos;

                if (quantidade > 0)
                {
                    int arredondar = ArredondarInt32(quantidade, caixa); //Quantidade após arredondar para mais


                    int excedente = arredondar - quantidade;
                    decimal limite = quantidade * percentual / 100;

                    if (excedente > limite)
                    {
                        pedido = arredondar - caixa; //Equivalente a arredondar para menos
                    }
                    else
                    {
                        pedido = arredondar;
                    }

                    decimal preco_total = custo * pedido;

                    if (pedido > 0)
                    {
                        lista.Add(new PedidoProdutos()
                        {
                            ID_ProdutoVariacao = id_produto,
                            Produto = produto,
                            Codigo = cod_extra,
                            Ideal = ideal,
                            Atual = atual,
                            Caixa = caixa,
                            Quantidade = quantidade,
                            Pedido = pedido,
                            Base_Custo = preco_base,
                            Aliquota_ICMS = aliquota_icms,
                            Aliquota_IPI = aliquota_ipi,
                            ICMS = icms,
                            IPI = ipi,
                            Preco = custo,
                            Preco_Total = preco_total,
                            Tipo = tipo_venda,
                            Tipo_Conjunto = tipo_conjunto
                        });
                    }
                }
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public void DefinirProdutosDoPedido(List<PedidoProdutos> lista)
        {
            string comando = "DELETE FROM tbl_VisualizarPedido";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.ExecuteNonQuery();
            conexao.Desconectar();

            foreach (PedidoProdutos row in lista)
            {
                int id_produto = row.ID_ProdutoVariacao;
                string produto = row.Produto;
                string cod_extra = row.Codigo;
                int atual = row.Atual;
                int ideal = row.Ideal;
                int caixa = row.Caixa;
                int pedido = row.Pedido;
                double custo = Convert.ToDouble(row.Preco);
                decimal preco_base = row.Base_Custo;
                int quantidade = row.Quantidade;
                decimal aliquota_icms = row.Aliquota_ICMS;
                decimal aliquota_ipi = row.Aliquota_IPI;
                decimal icms = row.ICMS;
                decimal ipi = row.IPI;
                string tipo = row.Tipo;
                string tipo_conjunto = row.Tipo_Conjunto;

                double total = pedido * custo;

                string comando1 = "INSERT INTO tbl_VisualizarPedido (ID_ProdutoVariacao, Produto, Cod_Extra, Atual, Ideal, Pedido, Custo, Total, Caixa, Quantidade, Aliquota_ICMS, Aliquota_IPI, ICMS, IPI, Base_Custo, Tipo, Tipo_Conjunto) VALUES (@id_produto, @produto, @cod_extra, @atual, @ideal, @pedido, @custo, @total, @caixa, @quantidade, @aliquota_icms, @aliquota_ipi, @icms, @ipi, @base_custo, @tipo, @tipo_conjunto)";
                SqlCommand insert = new SqlCommand(comando1, conexao.Conectar());
                insert.Parameters.AddWithValue("@id_produto", id_produto);
                insert.Parameters.AddWithValue("@produto", produto);
                insert.Parameters.AddWithValue("@cod_extra", cod_extra);
                insert.Parameters.AddWithValue("@atual", atual);
                insert.Parameters.AddWithValue("@ideal", ideal);
                insert.Parameters.AddWithValue("@pedido", pedido);
                insert.Parameters.AddWithValue("@custo", custo);
                insert.Parameters.AddWithValue("@total", total);
                insert.Parameters.AddWithValue("@caixa", caixa);
                insert.Parameters.AddWithValue("@quantidade", quantidade);
                insert.Parameters.AddWithValue("@aliquota_icms", aliquota_icms);
                insert.Parameters.AddWithValue("@aliquota_ipi", aliquota_ipi);
                insert.Parameters.AddWithValue("@icms", icms);
                insert.Parameters.AddWithValue("@ipi", ipi);
                insert.Parameters.AddWithValue("@base_custo", preco_base);
                insert.Parameters.AddWithValue("@tipo", tipo);
                insert.Parameters.AddWithValue("@tipo_conjunto", tipo_conjunto);

                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        public void VisualizarPrePedido(string operador, string fornecedor, bool imprimir)
        {
            List<PedidoProdutos> lista = ProdutosDoPedido(fornecedor);
            DefinirProdutosDoPedido(lista);

            decimal valor = lista.Cast<PedidoProdutos>().Sum(i => i.Preco);
            double media;
            string nivel;
            try { media = lista.Cast<PedidoProdutos>().Average(i => i.Atual) * 100 / (lista.Cast<PedidoProdutos>().Average(i => i.Ideal)); }
            catch
            {
                media = lista.Cast<PedidoProdutos>().Where(i => i.Atual > 0).Select(i => i.Atual).FirstOrDefault();
            }
            nivel = "O estoque atual é equivalente a " + media.ToString("F") + "% em relação ao nível ideal.";

            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();

            int produtos = lista.Cast<PedidoProdutos>().Where(i => i.Pedido > 0).Count();
            decimal preco_total = lista.Cast<PedidoProdutos>().Sum(i => i.Preco_Total);

            formRelatorioVisualizarPedido relatorio = new formRelatorioVisualizarPedido();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("fornecedor", fornecedor));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("nivel", media.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("produtos", produtos.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("total", preco_total.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));

            relatorio.VisualizarPedidosTableAdapter.Fill(relatorio.ProcedureVisualizarPedidos.VisualizarPedidos);
            relatorio.reportViewer1.RefreshReport();

            if (imprimir)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                autoprintme.Print();
            }
            else
            {
                relatorio.ShowDialog();
            }
        }

        public void VisualizarPrePedidoDetalhado(string operador, string fornecedor, bool imprimir)
        {
            List<PedidoProdutos> lista = ProdutosDoPedido(fornecedor);
            DefinirProdutosDoPedido(lista);

            decimal valor = lista.Cast<PedidoProdutos>().Sum(i => i.Preco);
            double media;
            string nivel;
            try { media = lista.Cast<PedidoProdutos>().Average(i => i.Atual) * 100 / (lista.Cast<PedidoProdutos>().Average(i => i.Ideal)); }
            catch
            {
                media = lista.Cast<PedidoProdutos>().Where(i => i.Atual > 0).Select(i => i.Atual).FirstOrDefault();
            }
            nivel = "O estoque atual é equivalente a " + media.ToString("F") + "% em relação ao nível ideal.";

            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();

            int produtos = lista.Cast<PedidoProdutos>().Where(i => i.Pedido > 0).Count();
            decimal preco_total = lista.Cast<PedidoProdutos>().Sum(i => i.Preco_Total);
            //lista.Cast<PedidoProdutos>().Where(i => i.Caixa == 0).Sum(i => i.Preco);

            formRelatorioVisualizarPedidoDetalhado relatorio = new formRelatorioVisualizarPedidoDetalhado();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("fornecedor", fornecedor));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("nivel", media.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("produtos", produtos.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("total", preco_total.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));


            relatorio.VisualizarPedidosTableAdapter.Fill(relatorio.ProcedureVisualizarPedido.VisualizarPedidos);
            relatorio.reportViewer1.RefreshReport();

            if (imprimir)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(false, relatorio.reportViewer1.LocalReport);
                autoprintme.Print();
            }
            else
            {
                relatorio.ShowDialog();
            }
        }

        public void VisualizarPedido(string operador, string fornecedor, bool imprimir)
        {
            List<PedidoProdutos> lista = ProdutosDoPedido(fornecedor);
            if (!imprimir)
                DefinirProdutosDoPedido(lista);
            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();

            formRepPedido relatorio = new formRepPedido();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("fornecedor", fornecedor));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));

            relatorio.VisualizarPedidosTableAdapter.Fill(relatorio.DataSetVisualizarPedidos.VisualizarPedidos);
            relatorio.reportViewer1.RefreshReport();

            if (imprimir)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                autoprintme.Print();
            }
            else
            {
                relatorio.ShowDialog();
            }
        }

        public int TrazerPrazoDeEntrega(string fornecedor)
        {
            string comando = "SELECT Prazo_Entrega FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@fornecedor", fornecedor);
            int prazo = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();
            return prazo;
        }

        public int TrazerPeriodoDeReposicao(string fornecedor)
        {
            string comando = "SELECT Periodo_Reposicao FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@fornecedor", fornecedor);
            int periodo = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();
            return periodo;
        }

        public void FazerPedido(string operador, string fornecedor)
        {
            ComandosSQL comandos = new ComandosSQL();
            List<PedidoProdutos> lista = comandos.ProdutosDoPedido(fornecedor);
            decimal valor = lista.Cast<PedidoProdutos>().Sum(i => i.Preco_Total);
            string data = DateTime.Now.ToShortDateString();
            int prazo_entrega = TrazerPrazoDeEntrega(fornecedor);
            string previsao = DateTime.Now.AddDays(prazo_entrega).ToShortDateString() + " 14:00";

            string[] partir = data.Split('/');
            string dia = partir[0];
            string mes = partir[1];
            string ano = partir[2];

            string nova_data = dia + "-" + mes + "-" + ano;
            string arquivo = fornecedor + " - " + nova_data + ".pdf";

            // string pasta_local = Directory.GetCurrentDirectory();

            SaveFileDialog dialogo = new SaveFileDialog();
            dialogo.FileName = arquivo;

            if (dialogo.ShowDialog() == DialogResult.OK)
            {
                string nome = dialogo.FileName;

                if (nome != "")
                {
                    try
                    {
                        arquivo = nome;

                        string comando = "INSERT INTO tbl_Pedidos (ID_Fornecedor, Valor_Esperado, Data_Solicitacao, Previsao_Entrega, Responsavel, Status) VALUES ((SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor), @valor, @data, @previsao, @operador, 'Envio Pendente')";
                        SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                        insert.Parameters.AddWithValue("@fornecedor", fornecedor);
                        insert.Parameters.AddWithValue("@valor", valor);
                        insert.Parameters.AddWithValue("@data", data);
                        insert.Parameters.AddWithValue("@previsao", previsao);
                        insert.Parameters.AddWithValue("@operador", operador);
                        insert.ExecuteNonQuery();
                        conexao.Desconectar();

                        int periodo_reposicao = TrazerPeriodoDeReposicao(fornecedor);
                        string proxima = DateTime.Now.AddDays(periodo_reposicao).ToShortDateString();
                        string comand = "UPDATE tbl_Fornecedores SET Proxima_Reposicao = @proxima WHERE Nome_Fornecedor = @fornecedor";
                        SqlCommand up = new SqlCommand(comand, conexao.Conectar());
                        up.Parameters.AddWithValue("@proxima", proxima);
                        up.Parameters.AddWithValue("@fornecedor", fornecedor);
                        up.ExecuteNonQuery();
                        conexao.Desconectar();

                        string cmd = "INSERT INTO tbl_ProdutosPedido (ID_Pedido, Cod_Extra, ID_ProdutoVariacao, Pedido, Base_Custo, Aliquota_IPI, Aliquota_ICMS, IPI, ICMS, Custo, Tipo, Tipo_Conjunto, Status) SELECT (SELECT TOP(1) ID_Pedido FROM tbl_Pedidos WHERE Responsavel = @operador ORDER BY ID_Pedido DESC), Cod_Extra, ID_ProdutoVariacao, Pedido, Base_Custo, Aliquota_IPI, Aliquota_ICMS, IPI, ICMS, Custo, Tipo, Tipo_Conjunto, @status FROM tbl_VisualizarPedido";
                        SqlCommand insrt = new SqlCommand(cmd, conexao.Conectar());
                        insrt.Parameters.AddWithValue("@operador", operador);
                        insrt.Parameters.AddWithValue("@status", "Solicitado");
                        insrt.ExecuteNonQuery();
                        conexao.Desconectar();

                        ExportarPedidoParaPDF(fornecedor, arquivo);

                        MessageBox.Show("O arquivo foi salvo\r\nNa pasta " + arquivo + "\r\nEnvie o pedido para concluir a Atividade.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);

                    }
                    catch { }
                }
            }
        }

        public void ExportarPedidoParaPDF(string fornecedor, string diretorio)
        {
            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();
            formRepPedido relatorio = new formRepPedido();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("fornecedor", fornecedor));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));

            relatorio.VisualizarPedidosTableAdapter.Fill(relatorio.DataSetVisualizarPedidos.VisualizarPedidos);

            relatorio.reportViewer1.RefreshReport();
            var bytes = relatorio.reportViewer1.LocalReport.Render("PDF");

            File.WriteAllBytes(diretorio, bytes);
        }

        public void CadastrarFornecedor(Fornecedor Fornecedor)
        {
            string fornecedor = Fornecedor.Nome_Fornecedor;
            int reposicao = Fornecedor.Reposicao;
            string frete = Fornecedor.Frete;
            string forma_pgmt = Fornecedor.Forma_Pagamento;
            int entrega = Fornecedor.Entrega;
            bool disponibilidade = Fornecedor.Disponibilidade;
            string representante = Fornecedor.Representante;
            string telefone = Fornecedor.Fone_Representante;
            string endereco = Fornecedor.Endereco;
            string email = Fornecedor.Email;
            decimal ipi = Fornecedor.IPI;
            decimal icms = Fornecedor.ICMS;
            decimal minimo = Fornecedor.Pedido_Minimo;
            bool ativacao = Fornecedor.Ativacao;
            string troca = Fornecedor.Troca;

            string comando = "INSERT INTO tbl_Fornecedores (Nome_Fornecedor, Tipo_Frete, Prazo_Entrega, Disponibilidade, Periodo_Reposicao, Nome_Representante, Data_Cadastramento, Forma_Pagamento, Fone_Representante, Endereco_Fabrica, IPI, ICMS, Email, Pedido_Minimo, Ativacao, Troca) VALUES (@fornecedor, @frete, @entrega, @disponibilidade, @reposicao, @representante, GETDATE(), @forma_pgmt, @telefone, @endereco, @ipi, @icms, @email, @minimo, @ativacao, @troca)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@fornecedor", fornecedor);
            insert.Parameters.AddWithValue("@frete", frete);
            insert.Parameters.AddWithValue("@entrega", entrega);
            insert.Parameters.AddWithValue("@disponibilidade", disponibilidade);
            insert.Parameters.AddWithValue("@reposicao", reposicao);
            insert.Parameters.AddWithValue("@representante", representante);
            insert.Parameters.AddWithValue("@forma_pgmt", forma_pgmt);
            insert.Parameters.AddWithValue("@telefone", telefone);
            insert.Parameters.AddWithValue("@endereco", endereco);
            insert.Parameters.AddWithValue("@troca", troca);
            insert.Parameters.AddWithValue("@ativacao", ativacao);
            insert.Parameters.AddWithValue("@minimo", minimo);
            insert.Parameters.AddWithValue("@icms", icms);
            insert.Parameters.AddWithValue("@ipi", ipi);
            insert.Parameters.AddWithValue("@email", email);

            insert.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Fornecedor cadastrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public Fornecedor TrazerInformacoesDoFornecedor(int id_fornecedor)
        {
            Fornecedor Fornecedor = new Fornecedor();
            string comando = "SELECT Nome_Fornecedor, Periodo_Reposicao, Data_Cadastramento, Tipo_Frete, Forma_Pagamento, Prazo_Entrega, Disponibilidade, Nome_Representante, Fone_Representante, Endereco_Fabrica, IPI, ICMS, Fone_Fabrica, Email, Ativacao, Troca, Pedido_Minimo FROM tbl_Fornecedores WHERE ID_Fornecedor = @id_fornecedor";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_fornecedor", id_fornecedor);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                int reposicao;
                if (leitor[1] != DBNull.Value) { reposicao = Convert.ToInt32(leitor[1]); } else { reposicao = 0; }
                int entrega;
                if (leitor[5] != DBNull.Value) { entrega = Convert.ToInt32(leitor[5]); } else { entrega = 0; }
                decimal ipi;
                if (leitor[10] != DBNull.Value) { ipi = Convert.ToDecimal(leitor[10]); } else { ipi = 0; }
                decimal icms;
                if (leitor[11] != DBNull.Value) { icms = Convert.ToDecimal(leitor[11]); } else { icms = 0; }
                decimal pedido_minimo;
                if (leitor[16] != DBNull.Value) { pedido_minimo = Convert.ToDecimal(leitor[16]); } else { pedido_minimo = 0; }

                Fornecedor = new Fornecedor()
                {
                    Nome_Fornecedor = leitor[0].ToString(),
                    Reposicao = reposicao,
                    Data_Cadastramento = Convert.ToDateTime(leitor[2]),
                    Frete = leitor[3].ToString(),
                    Forma_Pagamento = leitor[4].ToString(),
                    Entrega = entrega,
                    Disponibilidade = Convert.ToBoolean(leitor[6]),
                    Representante = leitor[7].ToString(),
                    Fone_Representante = leitor[8].ToString(),
                    Endereco = leitor[9].ToString(),
                    IPI = ipi,
                    ICMS = icms,
                    Fone_Fabrica = leitor[12].ToString(),
                    Email = leitor[13].ToString(),
                    Ativacao = Convert.ToBoolean(leitor[14]),
                    Troca = leitor[15].ToString(),
                    Pedido_Minimo = pedido_minimo
                };
            }
            leitor.Close();
            conexao.Desconectar();
            return Fornecedor;
        }

        public void EditarFornecedor(Fornecedor Fornecedor)
        {
            int id_fornecedor = Fornecedor.ID_Fornecedor;
            string fornecedor = Fornecedor.Nome_Fornecedor;
            int reposicao = Fornecedor.Reposicao;
            string frete = Fornecedor.Frete;
            string forma_pgmt = Fornecedor.Forma_Pagamento;
            int entrega = Fornecedor.Entrega;
            bool disponibilidade = Fornecedor.Disponibilidade;
            string representante = Fornecedor.Representante;
            string fone_representante = Fornecedor.Fone_Representante;
            string endereco = Fornecedor.Endereco;
            decimal ipi = Fornecedor.IPI;
            decimal icms = Fornecedor.ICMS;
            string fone_fabrica = Fornecedor.Fone_Fabrica;
            string email = Fornecedor.Email;
            bool ativacao = Fornecedor.Ativacao;
            string troca = Fornecedor.Troca;
            decimal minimo = Fornecedor.Pedido_Minimo;

            string comando = "UPDATE tbl_Fornecedores SET Nome_Fornecedor = @fornecedor, Periodo_Reposicao = @reposicao, Tipo_Frete = @frete, Forma_Pagamento = @forma_pgmt, Prazo_Entrega = @entrega, Disponibilidade = @disponibilidade, Nome_Representante = @representante, Fone_Representante = @fone_representante, Endereco_Fabrica = @endereco, IPI = @ipi, ICMS = @icms, Fone_Fabrica = @fone_fabrica, Email = @email, Ativacao = @ativacao, Troca = @troca, Pedido_Minimo = @minimo WHERE ID_Fornecedor = @id_fornecedor";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());

            update.Parameters.AddWithValue("@id_fornecedor", id_fornecedor);
            update.Parameters.AddWithValue("@fornecedor", fornecedor);
            update.Parameters.AddWithValue("@frete", frete);
            update.Parameters.AddWithValue("@entrega", entrega);
            update.Parameters.AddWithValue("@disponibilidade", disponibilidade);
            update.Parameters.AddWithValue("@reposicao", reposicao);
            update.Parameters.AddWithValue("@representante", representante);
            update.Parameters.AddWithValue("@forma_pgmt", forma_pgmt);
            update.Parameters.AddWithValue("@fone_representante", fone_representante);
            update.Parameters.AddWithValue("@endereco", endereco);
            update.Parameters.AddWithValue("@ipi", ipi);
            update.Parameters.AddWithValue("@icms", icms);
            update.Parameters.AddWithValue("@fone_fabrica", fone_fabrica);
            update.Parameters.AddWithValue("@email", email);
            update.Parameters.AddWithValue("@ativacao", ativacao);
            update.Parameters.AddWithValue("@troca", troca);
            update.Parameters.AddWithValue("minimo", minimo);
            update.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Fornecedor editado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<Pedido> ListaDePedidosEmAberto()
        {
            string comando = "SELECT ID_Pedido, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_Pedidos.ID_Fornecedor) AS Fornecedor, (SELECT COUNT(*) FROM tbl_ProdutosPedido WHERE ID_Pedido = tbl_Pedidos.ID_Pedido) AS Produtos, Data_Solicitacao, Previsao_Entrega, Status FROM tbl_Pedidos WHERE Status = 'Envio Pendente' OR Status = 'Confirmação Pendente' OR Status = 'Confirmado'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            List<Pedido> Pedidos = new List<Pedido>();

            while (leitor.Read())
            {
                int id_pedido = Convert.ToInt32(leitor[0]);
                string fornecedor = leitor[1].ToString();
                int qtd_produtos = Convert.ToInt32(leitor[2]);
                DateTime solicitacao = Convert.ToDateTime(leitor[3]);
                DateTime entrega = Convert.ToDateTime(leitor[4]);
                string status = leitor[5].ToString();

                Pedidos.Add(new Pedido
                {
                    ID_Pedido = id_pedido,
                    Fornecedor = fornecedor,
                    Qtd_Produtos = qtd_produtos,
                    Solicitacao = solicitacao,
                    Previsao_Entrega = entrega,
                    Status = status
                });
            }
            leitor.Close();
            conexao.Desconectar();

            return Pedidos;
        }

        public void ConfirmarEnvio(int id_pedido)
        {
            DateTime confirmacao = DateTime.Now.AddDays(Convert.ToInt32(ObterValorDoParametro("Prazo padrão para confirmação do pedido (dias)")));
            string comando = "UPDATE tbl_Pedidos SET Status = 'Confirmação Pendente', Proximo_Contato = @confirmacao WHERE ID_Pedido = @id_pedido";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_pedido", id_pedido);
            update.Parameters.AddWithValue("@confirmacao", confirmacao.Date);
            update.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Envio confirmado. É necessário confirmar os produtos para que o pedido seja finalizado.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ConfirmarProdutos(int id_pedido, List<PedidoProdutos> Produtos)
        {
            foreach (PedidoProdutos Produto in Produtos)
            {
                int id_produtoPedido = Produto.ID_ProdutoPedido;
                decimal custo = Produto.Preco;
                int quantidade = Produto.Pedido;

                if (Produto.Confirmacao)
                {
                    string command = "UPDATE tbl_ProdutosPedido SET Status = 'Confirmado', Preco_Confirmacao = @custo, Qtd_Confirmacao = @quantidade WHERE ID_ProdutoPedido = @id_produtoPedido";
                    SqlCommand up = new SqlCommand(command, conexao.Conectar());
                    up.Parameters.AddWithValue("@id_produtoPedido", id_produtoPedido);
                    up.Parameters.AddWithValue("@custo", custo);
                    up.Parameters.AddWithValue("@quantidade", quantidade);
                    up.ExecuteNonQuery();
                }
                else
                {
                    string command = "UPDATE tbl_ProdutosPedido SET Status = 'Cancelado' WHERE ID_ProdutoPedido = @id_produtoPedido";
                    SqlCommand up = new SqlCommand(command, conexao.Conectar());
                    up.Parameters.AddWithValue("@id_produtoPedido", id_produtoPedido);
                    up.ExecuteNonQuery();
                }
            }
            string comando = "UPDATE tbl_Pedidos SET Status = 'Confirmado' WHERE ID_Pedido = @id_pedido";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_pedido", id_pedido);
            update.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Produtos confirmados. O pedido foi finalizado.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void CancelarPedido(int id_pedido)
        {
            string comando = "UPDATE tbl_Pedidos SET Status = 'Cancelado' WHERE ID_Pedido = @id_pedido";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_pedido", id_pedido);
            update.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Pedido cancelado. O sistema calculará uma nova data para realização do pedido desse fornecedor.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ReagendarPedido(DateTime data, int id_pedido)
        {
            string comando = "UPDATE tbl_Pedidos SET Proximo_Contato = @data WHERE ID_Pedido = @id_pedido";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@data", data);
            update.Parameters.AddWithValue("@id_pedido", id_pedido);
            update.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Confirmação de pedido reagendada para o dia " + data.ToShortDateString() + ".", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<PedidoProdutos> ListaDeProdutosParaConfirmacao(int id_pedido)
        {
            List<PedidoProdutos> Produtos = new List<PedidoProdutos>();
            string comando = "SELECT tbl_ProdutosPedido.ID_ProdutoVariacao, ID_ProdutoPedido, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Produto, Base_Custo, Aliquota_IPI, Aliquota_ICMS, Custo, Pedido, (SELECT Cod_Extra FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) AS Cod_Extra, (SELECT Nome_Original FROM tbl_Conjuntos WHERE ID_Conjunto = (SELECT ID_Conjunto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto)) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Conjunto FROM tbl_ProdutosPedido INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_ProdutosPedido.ID_ProdutoVariacao WHERE ID_Pedido = @id_pedido";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_pedido", id_pedido);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                int id_produto = Convert.ToInt32(leitor[0]);
                int id_produtoPedido = Convert.ToInt32(leitor[1]);
                string produto = leitor[2].ToString();
                decimal preco_base = Convert.ToDecimal(leitor[3]);
                decimal ipi = Convert.ToDecimal(leitor[4]);
                decimal icms = Convert.ToDecimal(leitor[5]);
                decimal custo = Convert.ToDecimal(leitor[6]);
                int pedido = Convert.ToInt32(leitor[7]);
                string cod_extra = leitor[8].ToString();
                string conjunto = leitor[9].ToString();

                if (conjunto != string.Empty) { produto = conjunto; }

                Produtos.Add(new PedidoProdutos
                {
                    ID_ProdutoVariacao = id_produto,
                    ID_ProdutoPedido = id_produtoPedido,
                    Produto = produto,
                    Base_Custo = preco_base,
                    Aliquota_IPI = ipi,
                    Aliquota_ICMS = icms,
                    Preco = custo,
                    Pedido = pedido,
                    Codigo = cod_extra,
                    Confirmacao = false
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return Produtos;
        }

        public List<Pedido> ProximosRecebimentos()
        {
            List<Pedido> Pedidos = new List<Pedido>();

            string comando = "SELECT ID_Pedido, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_Pedidos.ID_Fornecedor), Previsao_Entrega, 'Recebido' FROM tbl_Pedidos WHERE Status = 'Confirmado' AND CONVERT(DATE, (SELECT Data_Recebimento FROM tbl_Recebimentos WHERE ID_Pedido = tbl_Pedidos.ID_Pedido)) = CONVERT(DATE, GETDATE()) UNION SELECT ID_Pedido, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_Pedidos.ID_Fornecedor), Previsao_Entrega, 'Confirmado' FROM tbl_Pedidos WHERE Status = 'Confirmado' AND (SELECT COUNT(*) FROM tbl_Recebimentos WHERE ID_Pedido = tbl_Pedidos.ID_Pedido) = 0";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());

            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                int id_pedido = Convert.ToInt32(leitor[0]);
                string fornecedor = leitor[1].ToString();
                string data = leitor[2].ToString();
                string status = leitor[3].ToString();

                Pedidos.Add(new Pedido
                {
                    ID_Pedido = id_pedido,
                    Fornecedor = fornecedor,
                    Previsao_Entrega = Convert.ToDateTime(data),
                    Status = status
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return Pedidos;
        }

        public void RegistrarRecebimento(int id_pedido, string alteracao)
        {
            string comando = "INSERT INTO tbl_Recebimentos (Data_Recebimento, ID_Pedido, ID_Colaborador, Alteracao) VALUES (GETDATE(), @id_pedido, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), @alteracao)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@id_pedido", id_pedido);
            insert.Parameters.AddWithValue("@matricula", Program.matricula);
            insert.Parameters.AddWithValue("@alteracao", alteracao);
            insert.ExecuteNonQuery();

            conexao.Desconectar();
        }

        public void AlterarPrevisaoDeEntrega(DateTime data, int id_pedido)
        {
            string comando = "UPDATE tbl_Pedidos SET Previsao_Entrega = @data WHERE ID_Pedido = @id_pedido";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@data", data);
            update.Parameters.AddWithValue("@id_pedido", id_pedido);
            update.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Previsão de entrega reagendada para o dia " + data.ToShortDateString() + ".", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ImprimirCupomDeRecebimento(int id_pedido, string fornecedor)
        {
            string matricula = Program.matricula;
            string operador = Program.colaborador.Nome_Colaborador;
            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();

            formRepCupomDeRecebimento relatorio = new formRepCupomDeRecebimento();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("id", id_pedido.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("matricula", matricula));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("fornecedor", fornecedor));

            relatorio.reportViewer1.RefreshReport();
            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            autoprintme.Print();
        }

        public bool VerificarVinculoEntreEntradaEPedido(int id)
        {
            string comando = "SELECT ID_Pedido FROM tbl_Lotes WHERE ID_Pedido = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);

            bool contem;
            if (select.ExecuteScalar() == null) { contem = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { contem = false; }
            else { contem = true; }
            conexao.Desconectar();
            return contem;
        }

        #endregion

        #region Fabricantes
        public void CadastrarFabricante(Fabricante Fabricante)
        {
            string comando = "INSERT INTO tbl_Fabricantes (Fabricante, CNPJ, Data_Cadastramento, Endereco) VALUES (@fabricante, @cnpj, GETDATE(), @endereco)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@fabricante", Fabricante.Nome_Fabricante);
            insert.Parameters.AddWithValue("@cnpj", Fabricante.CNPJ);
            insert.Parameters.AddWithValue("@endereco", Fabricante.Endereco);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Fabricante cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        #endregion

        #endregion

        #region Métodos do Formulário de Vendas

        #region Caixa Atual

        public bool VerificarCaixaAberto()
        {
            bool aberto;
            string resultado;
            string matricula = Program.matricula;
            SqlCommand select = new SqlCommand("SELECT TOP(1) Status FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Caixa DESC", conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            try { resultado = select.ExecuteScalar().ToString(); }
            catch { resultado = ""; }
            conexao.Desconectar();

            if (resultado != "Aberto")
            {
                aberto = false;
            }
            else
            {
                aberto = true;
            }
            return aberto;
        }

        public bool VerificarVendasRealizadas()
        {
            bool JaVendeu;
            int resultado;
            SqlCommand select = new SqlCommand("SELECT COUNT(Data_Venda) FROM tbl_Vendas WHERE CONVERT(Date, Data_Venda, 103) = CONVERT(Date, GETDATE(), 103)", conexao.Conectar());
            try { resultado = Convert.ToInt32(select.ExecuteScalar()); }
            catch { resultado = 0; }
            conexao.Desconectar();

            if (resultado != 0)
            {
                JaVendeu = true;
            }
            else
            {
                JaVendeu = false;
            }
            return JaVendeu;
        }

        public decimal ValorDeAbertura()
        {
            string comando = "SELECT Valor_Abertura FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", Program.matricula);
            decimal valor = Convert.ToDecimal(select.ExecuteScalar());

            conexao.Desconectar();
            return valor;
        }

        public bool VerificarTerminal(int id)
        {
            string comando = "SELECT Status FROM tbl_Terminais WHERE ID_Terminal = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            string status = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            bool disponivel;
            if (status == "Aberto") { disponivel = false; }
            else { disponivel = true; }
            return disponivel;
        }

        public List<string> ListaDeTerminais()
        {
            List<string> lista = new List<string>();
            SqlCommand select = new SqlCommand("SELECT ID_Terminal FROM tbl_Terminais", conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public void AbrirTerminal(int id_terminal, decimal valor)
        {
            string matricula = Program.matricula;
            string comando = "UPDATE tbl_Terminais SET Status = 'Aberto', Valor = @valor, ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), Registro = GETDATE() WHERE ID_Terminal = @id";
           
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@valor", valor);
                update.Parameters.AddWithValue("@matricula", matricula);
                update.Parameters.AddWithValue("@id", id_terminal);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AbrirCaixa(int id_terminal, decimal valor)
        {
            string matricula = Program.matricula;
            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();

            string texto = "INSERT INTO tbl_CaixasAnteriores (ID_Colaborador, Hora_Abertura, Valor_Abertura, Data, Status, ID_Terminal) SELECT tbl_Colaboradores.ID_Colaborador, @hora, @valor, @data, 'Aberto', @id_terminal from tbl_Colaboradores WHERE Matricula = @matricula";

            using (SqlCommand insert = new SqlCommand(texto, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@valor", valor);
                insert.Parameters.AddWithValue("@matricula", matricula);
                insert.Parameters.AddWithValue("@data", data);
                insert.Parameters.AddWithValue("@hora", hora);
                insert.Parameters.AddWithValue("@id_terminal", id_terminal);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public bool VerificarMovimentacoesPendentes()
        {
            string matricula = Program.matricula;
            string comando = "SELECT ID_MovimentacaoCaixa, Tipo_Movimentacao, Valor, Data, 'Pendente' FROM tbl_MovimentacoesCaixa WHERE ID_Caixa = (SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto' ORDER BY ID_Caixa DESC) AND ID_Operador IS NULL AND ID_Intermediario IS NULL UNION SELECT ID_MovimentacaoCaixa, Tipo_Movimentacao, Valor, Data, 'Pendente' FROM tbl_MovimentacoesCaixa WHERE ID_Caixa = (SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto' ORDER BY ID_Caixa DESC) AND ID_Recebedor IS NULL";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            bool verificar;
            if (select.ExecuteScalar() == null) { verificar = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { verificar = false; }
            else { verificar = true; }
            conexao.Desconectar();
            return verificar;
        }

        public List<InformacoesFechamento> InformacoesDoFechamentoDeCaixa()
        {
            string matricula = Program.matricula;
            List<InformacoesFechamento> lista = new List<InformacoesFechamento>();
            string comando = "SELECT ID_Caixa, (SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_MovimentacoesCaixa.ID_Caixa AND Tipo_Movimentacao = 'Sangria') AS Sangria, (SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_MovimentacoesCaixa.ID_Caixa AND Tipo_Movimentacao = 'Suprimento') AS Suprimento, (SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_MovimentacoesCaixa.ID_Caixa AND Tipo_Movimentacao = 'Sobrando') AS Sobrando, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'DINHEIRO') AS Dinheiro, (SELECT SUM(Troco) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa) AS Troco, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'DÉBITO') AS Débito, (SELECT SUM (Valor_Pagamento + Juros) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'CRÉDITO') AS Crédito, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'PICPAY') AS TEF, (SELECT SUM (Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'VALE-TROCA') AS Vale, (SELECT SUM (Valor_Venda) FROM tbl_Vendas WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_Vendas.ID_Caixa) AS 'Total Venda', (SELECT SUM (Valor_Custo) FROM tbl_Vendas WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_Vendas.ID_Caixa) AS 'Total Custo', (SELECT SUM (Desconto) FROM tbl_Vendas WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_Vendas.ID_Caixa) AS Desconto, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'PIX') AS PIX, Valor_Abertura AS Abertura FROM tbl_CaixasAnteriores WHERE tbl_CaixasAnteriores.ID_Caixa = (SELECT ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador from tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto')";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            SqlDataReader leitor = select.ExecuteReader();
            decimal sangria = 0;
            decimal suprimento = 0;
            decimal sobrando = 0;
            decimal dinheiro = 0;
            decimal debito = 0;
            decimal credito = 0;
            decimal picpay = 0;
            decimal vale = 0;
            decimal pix = 0;
            decimal abertura = 0;

            while (leitor.Read())
            {
                try
                {
                    sangria = Convert.ToDecimal(leitor[1]);
                }
                catch { }

                try
                {
                    suprimento = Convert.ToDecimal(leitor[2]);
                }
                catch { }

                try
                {
                    sobrando = Convert.ToDecimal(leitor[3]);
                }
                catch { }
                try
                {
                    dinheiro = Convert.ToDecimal(leitor[4]);
                }
                catch { }

                try
                {
                    debito = Convert.ToDecimal(leitor[6]);
                }
                catch { }

                try
                {
                    credito = Convert.ToDecimal(leitor[7]);
                }
                catch { }

                try
                {
                    picpay = Convert.ToDecimal(leitor[8]);
                }
                catch { }

                try
                {
                    vale = Convert.ToDecimal(leitor[9]);
                }
                catch { }

                try
                {
                    pix = Convert.ToDecimal(leitor[13]);
                }
                catch { }

                try
                {
                    abertura = Convert.ToDecimal(leitor[14]);
                }
                catch { }
            }
            leitor.Close();
            conexao.Desconectar();

            lista.Add(new InformacoesFechamento()
            {
                Dinheiro = dinheiro,
                Debito = debito,
                Credito = credito,
                Pix = pix,
                PICPAY = picpay,
                Vale = vale,
                Sangrias = sangria,
                Suprimentos = suprimento,
                Sobrando = sobrando,
                Abertura = abertura
            });
            return lista;
        }

        public List<InformacoesFechamento> InformacoesDoFechamentoDeCaixaPeloID(int id_caixa)
        {
            string matricula = Program.matricula;
            List<InformacoesFechamento> lista = new List<InformacoesFechamento>();
            string comando = "SELECT ID_Caixa, (SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_MovimentacoesCaixa.ID_Caixa AND Tipo_Movimentacao = 'Sangria') AS Sangria, (SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_MovimentacoesCaixa.ID_Caixa AND Tipo_Movimentacao = 'Suprimento') AS Suprimento, (SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_MovimentacoesCaixa.ID_Caixa AND Tipo_Movimentacao = 'Sobrando') AS Sobrando, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'DINHEIRO') AS Dinheiro, (SELECT SUM(Troco) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa) AS Troco, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'DÉBITO') AS Débito, (SELECT SUM (Valor_Pagamento + Juros) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'CRÉDITO') AS Crédito, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'PICPAY') AS TEF, (SELECT SUM (Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'VALE-TROCA') AS Vale, (SELECT SUM (Valor_Venda) FROM tbl_Vendas WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_Vendas.ID_Caixa) AS 'Total Venda', (SELECT SUM (Valor_Custo) FROM tbl_Vendas WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_Vendas.ID_Caixa) AS 'Total Custo', (SELECT SUM (Desconto) FROM tbl_Vendas WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_Vendas.ID_Caixa) AS Desconto, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'PIX') AS PIX, Valor_Abertura AS Abertura FROM tbl_CaixasAnteriores WHERE tbl_CaixasAnteriores.ID_Caixa = @id_caixa";
           
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_caixa", id_caixa);

            select.Parameters.AddWithValue("@matricula", matricula);
            SqlDataReader leitor = select.ExecuteReader();
            decimal sangria = 0;
            decimal suprimento = 0;
            decimal sobrando = 0;
            decimal dinheiro = 0;
            decimal debito = 0;
            decimal credito = 0;
            decimal picpay = 0;
            decimal vale = 0;
            decimal pix = 0;
            decimal abertura = 0;

            while (leitor.Read())
            {
                try
                {
                    sangria = Convert.ToDecimal(leitor[1]);
                }
                catch { }

                try
                {
                    suprimento = Convert.ToDecimal(leitor[2]);
                }
                catch { }

                try
                {
                    sobrando = Convert.ToDecimal(leitor[3]);
                }
                catch { }
                try
                {
                    dinheiro = Convert.ToDecimal(leitor[4]);
                }
                catch { }

                try
                {
                    debito = Convert.ToDecimal(leitor[6]);
                }
                catch { }

                try
                {
                    credito = Convert.ToDecimal(leitor[7]);
                }
                catch { }

                try
                {
                    picpay = Convert.ToDecimal(leitor[8]);
                }
                catch { }

                try
                {
                    vale = Convert.ToDecimal(leitor[9]);
                }
                catch { }

                try
                {
                    pix = Convert.ToDecimal(leitor[13]);
                }
                catch { }

                try
                {
                    abertura = Convert.ToDecimal(leitor[14]);
                }
                catch { }
            }
            leitor.Close();
            conexao.Desconectar();

            lista.Add(new InformacoesFechamento()
            {
                Dinheiro = dinheiro,
                Debito = debito,
                Credito = credito,
                Pix = pix,
                PICPAY = picpay,
                Vale = vale,
                Sangrias = sangria,
                Suprimentos = suprimento,
                Sobrando = sobrando,
                Abertura = abertura
            });
            return lista;
        }

        public void FecharTerminal(decimal valor)
        {
            string matricula = Program.matricula;
            string comando = "UPDATE tbl_Terminais SET Status = 'Fechado', Valor = @valor, Registro = GETDATE() WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto'";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@valor", valor);
            update.Parameters.AddWithValue("@matricula", matricula);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void FecharCaixa(InformacoesFechamento info)
        {
            decimal dinheiro;
            decimal debito;
            decimal credito;
            decimal tef;
            decimal vale;
            decimal pix;
            decimal total;
            decimal quebra;
            decimal picpay;

            dinheiro = info.Dinheiro;
            debito = info.Debito;
            credito = info.Credito;
            pix = info.Pix;
            tef = info.TEF;
            vale = info.Vale;
            total = info.Total;
            quebra = info.Quebra;
            picpay = info.PICPAY;

            string matricula = Program.matricula;

            string comando = "UPDATE tbl_CaixasAnteriores SET Hora_Fechamento = CONVERT (TIME, GETDATE()), Valor_Fechamento = @total, Status = 'Fechado', Dinheiro = @dinheiro, Debito = @debito, Credito = @credito, Picpay = @picpay, Pix = @pix, Vale = @vale, Quebra = @quebra WHERE ID_Caixa = (SELECT ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador from tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto')";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@matricula", matricula);
            update.Parameters.AddWithValue("@total", total);
            update.Parameters.AddWithValue("@quebra", quebra);
            update.Parameters.AddWithValue("@dinheiro", dinheiro);
            update.Parameters.AddWithValue("@debito", debito);
            update.Parameters.AddWithValue("@credito", credito);
            update.Parameters.AddWithValue("@pix", pix);
            update.Parameters.AddWithValue("@picpay", picpay);
            update.Parameters.AddWithValue("@vale", vale);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public int TrazerIdDoCaixa()
        {
            string matricula = Program.matricula;
            string comando = "SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE Status = 'Aberto' AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Caixa DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            int id = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();
            return id;
        }

        public void RegistrarMovimentacoesDoFechamento(Movimentacao Stone, Movimentacao Quebra, Movimentacao Transferencias)
        {
            string matricula = Program.matricula;

            if (Stone.Valor > 0)
            {
                string comando = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_Colaborador, Conta, Registro) VALUES (@descricao, @valor, GETDATE(), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'RECEBÍVEL', GETDATE())";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@matricula", matricula);
                insert.Parameters.AddWithValue("@descricao", Stone.Descricao);
                insert.Parameters.AddWithValue("@valor", Stone.Valor);
                insert.ExecuteNonQuery();
                conexao.Desconectar();
            }

            if (Quebra.Valor != 0)
            {
                decimal quebra = Quebra.Valor;
                string comando1;
                if (quebra > 0)
                {
                    quebra = -quebra;
                    comando1 = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, ID_Colaborador, Saldo, Conta, Registro) VALUES (@descricao, @valor, GETDATE(), 31, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO DISPONÍVEL', 'DINHEIRO EM CAIXA', GETDATE())";
                }
                else
                {
                    comando1 = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, ID_Colaborador, Saldo, Conta, Registro) VALUES (@descricao, @valor, GETDATE(), 31, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO DISPONÍVEL', 'DINHEIRO EM CAIXA', GETDATE())";
                }
                SqlCommand insert1 = new SqlCommand(comando1, conexao.Conectar());
                insert1.Parameters.AddWithValue("@matricula", matricula);
                insert1.Parameters.AddWithValue("@descricao", Quebra.Descricao);
                insert1.Parameters.AddWithValue("@valor", quebra);
                insert1.ExecuteNonQuery();
                conexao.Desconectar();
            }

            if (Transferencias.Valor > 0)
            {
                string comando2 = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, ID_Colaborador, Saldo, Conta, Registro) VALUES (@descricao, @valor, GETDATE(), 32, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO DISPONÍVEL', 'DINHEIRO EM CAIXA', GETDATE())";
                SqlCommand insert2 = new SqlCommand(comando2, conexao.Conectar());
                insert2.Parameters.AddWithValue("@matricula", matricula);
                insert2.Parameters.AddWithValue("@descricao", Transferencias.Descricao);
                insert2.Parameters.AddWithValue("@valor", Transferencias.Valor);
                insert2.ExecuteNonQuery();
                conexao.Desconectar();
            }
        }

        public void RegistrarRecebiveis(Recebivel debito, Recebivel credito)
        {
            string matricula = Program.matricula;
            CultureInfo cultura = new CultureInfo("pt-BR");
            DateTimeFormatInfo formato = cultura.DateTimeFormat;
            DateTime data = DateTime.Now.Date;
            string dia_da_semana = formato.GetDayName(data.DayOfWeek).PrimeiraLetraMaiuscula();

            DateTime vencimento = new DateTime();
            if (dia_da_semana == "Sexta-feira") { vencimento = vencimento.AddDays(3); }
            else if (dia_da_semana == "Sábado") { vencimento = vencimento.AddDays(2); }
            else { vencimento = vencimento.AddDays(1); }

            if (debito.Valor > 0)
            {
                string comando = "INSERT INTO tbl_Recebiveis (Descricao, Valor, Vencimento, ID_Colaborador, Data_Registro, Status, Tipo) VALUES (@descricao, @Valor, @vencimento, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), 'Pendente', 'Vendas Cartão de Crédito')";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@matricula", matricula);
                insert.Parameters.AddWithValue("@descricao", debito.Descricao);
                insert.Parameters.AddWithValue("@valor", debito.Valor);
                insert.Parameters.AddWithValue("@vencimento", vencimento.ToShortDateString());
                insert.ExecuteNonQuery();
                conexao.Desconectar();
            }

            if (credito.Valor > 0)
            {
                string comando = "INSERT INTO tbl_Recebiveis (Descricao, Valor, Vencimento, ID_Colaborador, Data_Registro, Status, Tipo) VALUES (@descricao, @Valor, @vencimento, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), 'Pendente', 'Vendas Cartão de Crédito')";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@matricula", matricula);
                insert.Parameters.AddWithValue("@descricao", credito.Descricao);
                insert.Parameters.AddWithValue("@valor", credito.Valor);
                insert.Parameters.AddWithValue("@vencimento", vencimento.ToShortDateString());
                insert.ExecuteNonQuery();
                conexao.Desconectar();
            }
        }

        public void RegistrarSaldoDeReposicao(int id_caixa)
        {
            string matricula = Program.matricula;
            string descricao = "REPOSIÇÃO DOS PRODUTOS VENDIDOS - " + id_caixa.ToString();
            decimal valor = CustoDasMercadoriasVendidas(id_caixa);

            if (valor > 0)
            {
                string comando = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, ID_Colaborador, Saldo, Conta) VALUES (@descricao , @valor, GETDATE(), 8, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO DISPONÍVEL', 'DINHEIRO EM CAIXA')";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@descricao", descricao);
                insert.Parameters.AddWithValue("@valor", -valor);
                insert.Parameters.AddWithValue("@matricula", matricula);
                insert.ExecuteNonQuery();
                conexao.Desconectar();

                string comando2 = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, ID_Colaborador, Saldo, Conta) VALUES (@descricao , @valor, GETDATE(), 30, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO MERCADORIA', 'DINHEIRO EM CAIXA')";
                SqlCommand insert2 = new SqlCommand(comando2, conexao.Conectar());
                insert2.Parameters.AddWithValue("@descricao", descricao);
                insert2.Parameters.AddWithValue("@valor", valor);
                insert2.Parameters.AddWithValue("@matricula", matricula);
                insert2.ExecuteNonQuery();
                conexao.Desconectar();
            }
        }

        public List<Pagamento> ListaDePagamentosComJurosDaMaquineta(int id_caixa)
        {
            List<Pagamento> pagamentos = new List<Pagamento>();
            string comando = "SELECT Valor_Pagamento, Forma_Pagamento, Bandeira, Parcelas FROM tbl_PagamentosRecebidos WHERE ID_Caixa = @id_caixa AND Forma_Pagamento = 'CRÉDITO' AND Parcelas <= 2 UNION SELECT Valor_Pagamento, Forma_Pagamento, Bandeira, 1 FROM tbl_PagamentosRecebidos WHERE ID_Caixa = @id_caixa AND Forma_Pagamento = 'DÉBITO'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_caixa", id_caixa);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                pagamentos.Add(new Pagamento
                {
                    Valor = Convert.ToDecimal(leitor[0]),
                    Forma = leitor[1].ToString(),
                    Bandeira = leitor[2].ToString(),
                    Parcelas = Convert.ToInt32(leitor[3])
                });
            }
            leitor.Close();

            conexao.Desconectar();

            foreach (Pagamento pagamento in pagamentos)
            {
                string bandeira = pagamento.Bandeira;
                decimal valor = pagamento.Valor;
                int parcelas = pagamento.Parcelas;
                string funcao = pagamento.Forma.PrimeiraLetraMaiuscula();

                decimal taxa = TaxaDeJurosDoCartao(bandeira, parcelas, funcao);

                decimal juros = (100 * valor / (100 - taxa)) - valor;
                juros = Math.Round(juros, 2);
                pagamento.Juros = juros;
            }

            return pagamentos;
        }

        public void RegistrarJurosDaMaquineta(int id_caixa)
        {
            string matricula = Program.matricula;
            string descricao = "DESCONTO VENDAS REALIZADAS POR CARTÕES - " + id_caixa.ToString();
            List<Pagamento> Pagamentos = ListaDePagamentosComJurosDaMaquineta(id_caixa);
            decimal juros = Pagamentos.Sum(x => x.Juros);

            if (juros > 0)
            {
                string comando = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, ID_Colaborador, Saldo, Conta, Registro) VALUES (@descricao, @valor, GETDATE(), 14, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO DISPONÍVEL', 'EXIGÍVEL', GETDATE())";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@descricao", descricao);
                insert.Parameters.AddWithValue("@valor", -juros);
                insert.Parameters.AddWithValue("@matricula", matricula);
                insert.ExecuteNonQuery();
                conexao.Desconectar();
            }
        }

        public decimal CustoDasMercadoriasVendidas(int id_caixa)
        {
            string comando = "SELECT SUM (Valor_Custo) FROM tbl_Vendas WHERE ID_Caixa = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id_caixa);
            decimal valor;
            if (select.ExecuteScalar().ToString() == string.Empty) { valor = 0; }
            else { valor = Convert.ToDecimal(select.ExecuteScalar()); }
            conexao.Desconectar();
            return valor;
        }

        public void PreencherDataGridCaixaAtual(DataGridView dataGrid, BindingSource bindingSource)
        {
            string matricula = Program.matricula;
            string comando = "SELECT tbl_Vendas.ID_Venda, CONVERT(VARCHAR(5), CONVERT(TIME, Data_Venda, 108)) AS Hora, STUFF((SELECT DISTINCT '/' + Forma_Pagamento FROM tbl_PagamentosRecebidos WHERE tbl_Vendas.ID_Venda = tbl_PagamentosRecebidos.ID_Venda FOR XML PATH('')), 1,1,'') AS Pagamento, (SELECT SUM (Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_Vendas.ID_Venda = tbl_PagamentosRecebidos.ID_Venda) AS Valor, (SELECT SUM(Troco) FROM tbl_PagamentosRecebidos WHERE tbl_Vendas.ID_Venda = tbl_PagamentosRecebidos.ID_Venda) AS Troco, tbl_Vendas.Desconto, (SELECT SUM(Quantidade) FROM tbl_ProdutosVendidos WHERE tbl_Vendas.ID_Venda = tbl_ProdutosVendidos.ID_Venda) AS Quantidade, tbl_Clientes.Nome_Cliente AS Cliente, (SELECT CONVERT(VARCHAR(30), CONVERT(DATE, Data_Venda), 103)) AS Data, (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AS Operador FROM tbl_Vendas INNER JOIN tbl_PagamentosRecebidos ON tbl_Vendas.ID_Venda = tbl_PagamentosRecebidos.ID_Venda INNER JOIN tbl_Clientes ON tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente INNER JOIN tbl_ProdutosVendidos ON tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda WHERE tbl_Vendas.ID_Caixa = (SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Caixa DESC) GROUP BY tbl_Vendas.ID_Venda, tbl_Vendas.Valor_Venda, tbl_Vendas.Desconto, Nome_Cliente, Data_Venda ORDER BY ID_Venda DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            bindingSource.DataSource = dataSet;
            bindingSource.DataMember = dataSet.Tables[0].TableName;
            dataGrid.DataSource = bindingSource;
            conexao.Desconectar();
        }

        public void PreencherDataGridVendasDoCaixa(DataGridView dataGrid, BindingSource bindingSource, int id_caixa)
        {
            string comando = "SELECT tbl_Vendas.ID_Venda, CONVERT(VARCHAR(5), CONVERT(TIME, Data_Venda, 108)) AS Hora, STUFF((SELECT DISTINCT '/' + Forma_Pagamento FROM tbl_PagamentosRecebidos WHERE tbl_Vendas.ID_Venda = tbl_PagamentosRecebidos.ID_Venda FOR XML PATH('')), 1,1,'') AS Pagamento, (SELECT SUM (Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_Vendas.ID_Venda = tbl_PagamentosRecebidos.ID_Venda) AS Valor, (SELECT SUM(Troco) FROM tbl_PagamentosRecebidos WHERE tbl_Vendas.ID_Venda = tbl_PagamentosRecebidos.ID_Venda) AS Troco, tbl_Vendas.Desconto, (SELECT SUM(Quantidade) FROM tbl_ProdutosVendidos WHERE tbl_Vendas.ID_Venda = tbl_ProdutosVendidos.ID_Venda) AS Quantidade, tbl_Clientes.Nome_Cliente AS Cliente, (SELECT CONVERT(VARCHAR(30), CONVERT(DATE, Data_Venda), 103)) AS Data, (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Vendas.ID_Colaborador) AS Operador FROM tbl_Vendas INNER JOIN tbl_PagamentosRecebidos ON tbl_Vendas.ID_Venda = tbl_PagamentosRecebidos.ID_Venda INNER JOIN tbl_Clientes ON tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente INNER JOIN tbl_ProdutosVendidos ON tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda WHERE tbl_Vendas.ID_Caixa = @id_caixa GROUP BY tbl_Vendas.ID_Venda, tbl_Vendas.Valor_Venda, tbl_Vendas.Desconto, Nome_Cliente, Data_Venda, ID_Colaborador ORDER BY ID_Venda DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_caixa", id_caixa);
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            bindingSource.DataSource = dataSet;
            bindingSource.DataMember = dataSet.Tables[0].TableName;
            dataGrid.DataSource = bindingSource;
            conexao.Desconectar();
        }

        public List<Pagamento> PagamentosDoCaixa(int id_caixa)
        {
            List<Pagamento> pagamentos = new List<Pagamento>();

            string comando = "SELECT Valor_Pagamento, Forma_Pagamento, Troco, ISNULL(Juros, 0) AS Juros FROM tbl_PagamentosRecebidos WHERE ID_Caixa = @id_caixa";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_caixa", id_caixa);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        pagamentos.Add(new Pagamento
                        {
                            Valor = Convert.ToDecimal(leitor[0]),
                            Forma = leitor[1].ToString(),
                            Troco = Convert.ToDecimal(leitor[2]),
                            Juros = Convert.ToDecimal(leitor[3])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return pagamentos;
        }

        public void PreencherDataGridCaixasAnteriores(DataGridView dataGrid, BindingSource bindingSource)
        {
            string matricula = Program.matricula;
            string comando = "SELECT ID_Caixa, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_CaixasAnteriores.ID_Colaborador) AS Colaborador, Data, FORMAT(Valor_Abertura, 'C', 'pt-br') AS Abertura, ISNULL(CONVERT(VARCHAR(30), FORMAT(Valor_Fechamento, 'C', 'pt-br')), '- - -') AS Fechamento, Status, ISNULL(CONVERT(VARCHAR(30), FORMAT(Quebra, 'C', 'PT-BR')), '- - -') AS Quebra, FORMAT(ISNULL((SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE ID_Caixa = tbl_CaixasAnteriores.ID_Caixa AND Tipo_Movimentacao = 'Sangria'), 0), 'C', 'pt-br') AS Sangrias, FORMAT(ISNULL((SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE ID_Caixa = tbl_CaixasAnteriores.ID_Caixa AND Tipo_Movimentacao = 'Suprimento'), 0), 'C', 'pt-br') AS Suprimentos, FORMAT(ISNULL(Dinheiro, 0), 'C', 'pt-br') AS Dinheiro,FORMAT(ISNULL(Debito, 0), 'C', 'pt-br') AS Débito, FORMAT(ISNULL(Credito, 0), 'C', 'pt-br') AS Crédito, FORMAT(ISNULL(Transferencia, 0), 'C', 'pt-br') AS Transferência,FORMAT(ISNULL(Pix, 0), 'C', 'pt-br') AS Pix, FORMAT(ISNULL(Vale, 0), 'C', 'pt-br') AS Vale, FORMAT(ISNULL(Picpay, 0), 'C', 'pt-br') AS Picpay FROM tbl_CaixasAnteriores ORDER BY ID_Caixa DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            bindingSource.DataSource = dataSet;
            bindingSource.DataMember = dataSet.Tables[0].TableName;
            dataGrid.DataSource = bindingSource;
            conexao.Desconectar();
        }

        public void SalvarMovimentacaoDoCaixaComDigital(string movimentacao, decimal valor, int id_intermediario)
        {
            string matricula = Program.matricula;
            string comando = "INSERT INTO tbl_MovimentacoesCaixa (ID_Caixa, Tipo_Movimentacao, Valor, ID_Operador, ID_Intermediario, Data) VALUES ((SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto' ORDER BY ID_Caixa DESC), @movimentacao, @valor, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), @id_intermediario, GETDATE())";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@matricula", matricula);
            insert.Parameters.AddWithValue("@movimentacao", movimentacao);
            insert.Parameters.AddWithValue("@id_intermediario", id_intermediario);
            insert.Parameters.AddWithValue("@valor", valor);
            insert.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void SalvarMovimentacaoDoCaixaSemDigital(string movimentacao, decimal valor)
        {
            string matricula = Program.matricula;
            string comando = "INSERT INTO tbl_MovimentacoesCaixa (ID_Caixa, Tipo_Movimentacao, Valor, ID_Operador, Data) VALUES ((SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto' ORDER BY ID_Caixa DESC), @movimentacao, @valor, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE())";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@matricula", matricula);
            insert.Parameters.AddWithValue("@movimentacao", movimentacao);
            insert.Parameters.AddWithValue("@valor", valor);
            insert.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public bool VerificarSeHaSuprimentoEmAberto()
        {
            bool verificar;
            string comando = "SELECT Tipo_movimentacao FROM tbl_MovimentacoesCaixa WHERE Tipo_Movimentacao = 'Suprimento' AND ID_Operador IS NULL";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            if (select.ExecuteScalar() == null) { verificar = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { verificar = false; }
            else { verificar = true; }
            conexao.Desconectar();
            return verificar;
        }

        public void SalvarSuprimentoComDigital(int id, int id_intermediario)
        {
            string matricula = Program.matricula;
            string comando = "UPDATE tbl_MovimentacoesCaixa SET ID_Operador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), ID_Intermediario = @id_intermediario WHERE ID_MovimentacaoCaixa = @id";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@matricula", matricula);
            update.Parameters.AddWithValue("@id_intermediario", id_intermediario);
            update.Parameters.AddWithValue("@id", id);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void SalvarSuprimentoSemDigital(int id)
        {
            string matricula = Program.matricula;
            string comando = "UPDATE tbl_MovimentacoesCaixa SET ID_Operador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) WHERE ID_MovimentacaoCaixa = @id";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@matricula", matricula);
            update.Parameters.AddWithValue("@id", id);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public int TrazerIdDoColaboradorPelaMatricula(string matricula)
        {
            string comando = "SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            int id_colaborador;
            if (select.ExecuteScalar() == DBNull.Value) { id_colaborador = 0; }
            else { id_colaborador = Convert.ToInt32(select.ExecuteScalar()); }
            conexao.Desconectar();
            return id_colaborador;
        }

        public string TrazerMatriculaPeloID(int id_colaborador)
        {
            string comando = "SELECT Matricula FROM tbl_Colaboradores WHERE ID_Colaborador = @id_colaborador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            string matricula;
            if (select.ExecuteScalar() == DBNull.Value) { matricula = string.Empty; }
            else { matricula = select.ExecuteScalar().ToString(); }
            conexao.Desconectar();
            return matricula;
        }

        public string TrazerColaboradorPeloID(int id_colaborador)
        {
            string comando = "SELECT Nome_Colaborador + ' ' + Sobrenome FROM tbl_Colaboradores WHERE ID_Colaborador = @id_colaborador";

            string colaborador = string.Empty;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                colaborador = select.ExecuteScalar().ToString();
            }

            conexao.Desconectar();

            return colaborador;
        }

        public string TrazerColaboradorEMatriculaPeloID(int id_colaborador)
        {
            string comando = "SELECT SUBSTRING(Nome_Colaborador, 1, 1) + LOWER(SUBSTRING(Nome_Colaborador, 2, LEN(Nome_Colaborador))) + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = @id_colaborador";

            string colaborador = string.Empty;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                colaborador = select.ExecuteScalar().ToString();
            }

            conexao.Desconectar();

            return colaborador;
        }

        public List<MovimentacaoCaixa> ListaDeMovimentacoesDoCaixa()
        {
            string matricula = Program.matricula;
            List<MovimentacaoCaixa> lista = new List<MovimentacaoCaixa>();
            string comando = "SELECT ID_MovimentacaoCaixa, Tipo_Movimentacao, Valor, Data, (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_MovimentacoesCaixa.ID_Operador), (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_MovimentacoesCaixa.ID_Intermediario), (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_MovimentacoesCaixa.ID_Recebedor) FROM tbl_MovimentacoesCaixa WHERE ID_Caixa = (SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto' ORDER BY ID_Caixa DESC) ";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(new MovimentacaoCaixa
                {
                    ID = Convert.ToInt32(leitor[0]),
                    Tipo = leitor[1].ToString(),
                    Valor = Convert.ToDecimal(leitor[2]),
                    Hora = Convert.ToDateTime(leitor[3]).ToShortDateString().Substring(0, 5) + " " + Convert.ToDateTime(leitor[3]).ToShortTimeString().Substring(0, 5),
                    Operador = leitor[4].ToString(),
                    Intermedio = leitor[5].ToString(),
                    Recebedor = leitor[6].ToString()
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<ContadorDeMoeda> TrazerQuantidadePeloValor()
        {
            List<ContadorDeMoeda> quantidades = new List<ContadorDeMoeda>();
            string comando = "SELECT Valor, Quantidade FROM tbl_ContadorDeMoedas WHERE ID_Terminal = (SELECT ID_Terminal FROM tbl_Terminais WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto')";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", Program.matricula);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                quantidades.Add(new ContadorDeMoeda
                {
                    Valor = leitor[0].ToString(),
                    Quantidade = Convert.ToInt32(leitor[1])
                });
            }

            leitor.Close();
            conexao.Desconectar();

            return quantidades;
        }

        public void EditarQuantidadeDeMoedas(string valor, int quantidade)
        {
            string comando = "UPDATE tbl_ContadorDeMoedas SET Quantidade = @quantidade WHERE Valor = @valor AND ID_Terminal = (SELECT ID_Terminal FROM tbl_Terminais WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto')";
            
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@quantidade", quantidade);
            update.Parameters.AddWithValue("@valor", valor);
            update.Parameters.AddWithValue("@matricula", Program.matricula);

            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public Venda InformacoesDaVenda(int id)
        {
            Venda Venda = new Venda();
            string comando = "SELECT (SELECT Nome_Cliente FROM tbl_Clientes WHERE tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente) AS cliente, Data_Venda, (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Vendas.ID_Colaborador) FROM tbl_Vendas INNER JOIN tbl_Clientes ON tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente WHERE tbl_Vendas.ID_Venda = @id GROUP BY tbl_Vendas.ID_Venda, tbl_Vendas.ID_Cliente, Data_Venda, ID_Colaborador ORDER BY ID_Venda DESC";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);

                string cliente = string.Empty;
                DateTime data = new DateTime();
                string operador = string.Empty;

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        cliente = leitor[0].ToString();
                        data = Convert.ToDateTime(leitor[1].ToString());
                        operador = leitor[2].ToString();
                    }
                }

                Venda.ID_Venda = id;
                Venda.Cliente = cliente;
                Venda.Data = data;
                Venda.Operador = operador;
            }

            conexao.Desconectar();


            Venda.Pagamentos = new List<Pagamento>();
            Venda.Produtos = new List<ProdutoVenda>();

            string cmd = "SELECT Cod_Barras, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) AS Produto, SUM(Desconto) AS Desconto, Preco_Vendido AS Preço, SUM(Quantidade) AS Quantidade, SUM(Preco_Vendido) AS Total  FROM tbl_ProdutosVendidos INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutosVendidos.ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao WHERE ID_Venda = @id GROUP BY Cod_Barras, tbl_ProdutoVariacao.ID_Produto, Preco_Vendido";

            using (SqlCommand select = new SqlCommand(cmd, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        string codigo = leitor[0].ToString();
                        string produto = leitor[1].ToString();
                        decimal desconto = Convert.ToDecimal(leitor[2]);
                        decimal preco = Convert.ToDecimal(leitor[3]);
                        int quantidade = Convert.ToInt32(leitor[4]);

                        Venda.Produtos.Add(new ProdutoVenda
                        {
                            Codigo = codigo,
                            Produto = produto,
                            Desconto = desconto,
                            Preco = preco,
                            Quantidade = quantidade,
                            Total = preco * quantidade
                        });
                    }
                }
            }

            conexao.Desconectar();

            string cmd1 = "SELECT Forma_Pagamento, Valor_Pagamento AS Total, Valor_Pagamento + Troco AS Pago, Troco, Juros, IIF(Parcelas IS NULL, '- - -', IIF(Parcelas > 1, Bandeira + ' ' + CONVERT(VARCHAR(3), Parcelas) + 'x', Bandeira)), ID_Pagamento FROM tbl_PagamentosRecebidos WHERE ID_Venda = @id";

            using (SqlCommand select = new SqlCommand(cmd1, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        string forma = leitor[0].ToString();
                        decimal total = Convert.ToDecimal(leitor[1]);
                        decimal pago = Convert.ToDecimal(leitor[2]);
                        decimal troco = Convert.ToDecimal(leitor[3]);
                        decimal juros = 0;
                        try { juros = Convert.ToDecimal(leitor[4]); } catch { }
                        string bandeira = leitor[5].ToString();
                        int id_pagamento = Convert.ToInt32(leitor[6]);

                        Venda.Pagamentos.Add(new Pagamento
                        {
                            ID_Pagamento = id_pagamento,
                            Forma = forma,
                            Valor = total,
                            Troco = troco,
                            Pago = pago,
                            Juros = juros,
                            Bandeira = bandeira
                        });
                    }
                }
            }

            conexao.Desconectar();

            return Venda;
        }

        public void AlterarFormaDePagamento(Pagamento pagamento)
        {
            string comando = "UPDATE tbl_PagamentosRecebidos SET Forma_Pagamento = @forma WHERE ID_Pagamento = @id_pagamento";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@forma", pagamento.Forma);
                update.Parameters.AddWithValue("@id_pagamento", pagamento.ID_Pagamento);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Forma de pagamento alterada.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarVenda(int id)
        {        
            string cmd = "DELETE FROM tbl_ProdutosTrocados WHERE (SELECT ID_Venda FROM tbl_Trocas WHERE ID_Troca = tbl_ProdutosTrocados.ID_Troca) = @id_venda";
            string cmd1 = "DELETE FROM tbl_ProdutosEntrega WHERE (SELECT ID_Venda FROM tbl_Entregas WHERE ID_Entrega = tbl_ProdutosEntrega.ID_Entrega) = @id_venda";
            string cmd2 = "DELETE FROM tbl_ProdutosRetirada WHERE (SELECT ID_Venda FROM tbl_Retiradas WHERE ID_Retirada = tbl_Retiradas.ID_Retirada) = @id_venda";
            string cmd3 = "DELETE FROM tbl_Trocas WHERE ID_Venda = @id_venda";
            string cmd4 = "DELETE FROM tbl_Entregas WHERE ID_Venda = @id_venda";
            string cmd5 = "DELETE FROM tbl_Retiradas WHERE ID_Venda = @id_venda";
            string cmd6= "DELETE FROM tbl_ProdutosVendidos WHERE ID_Venda = @id_venda";
            string cmd7 = "DELETE FROM tbl_PagamentosRecebidos WHERE ID_Venda = @id_venda";
            string cmd8 = "DELETE FROM tbl_Vendas WHERE ID_Venda = @id_venda";

            using (SqlCommand delete = new SqlCommand(cmd, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_venda", id);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand(cmd1, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_venda", id);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand(cmd2, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_venda", id);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand(cmd3, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_venda", id);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand(cmd4, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_venda", id);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand(cmd5, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_venda", id);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand(cmd6, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_venda", id);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand(cmd7, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_venda", id);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand(cmd8, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_venda", id);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarCaixaETodasAsSuasVendas(int id_caixa)
        {
            List<int> vendas = new List<int>();
            string comando = "SELECT ID_Venda FROM tbl_Vendas WHERE ID_Caixa = @id_caixa";
            string cmd = "DELETE FROM tbl_CaixasAnteriores WHERE ID_Caixa = @id_caixa";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_caixa", id_caixa);
                
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        vendas.Add(Convert.ToInt32(leitor[0]));
                    }
                }
            }

            conexao.Desconectar();

            foreach(int venda in vendas)
            {
                ApagarVenda(venda);
            }

            using (SqlCommand delete = new SqlCommand(cmd, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_caixa", id_caixa);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("O caixa e todas as suas vendas foram apagados com sucesso.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        #endregion

        #region PDV
        public AutoCompleteStringCollection AutoCompleteVendas()//Sugestão enquanto digita o nome do Produto
        {
            string comando = "SELECT Nome FROM tbl_Catalogo ORDER BY Nome";
            AutoCompleteStringCollection colecao = new AutoCompleteStringCollection();

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        colecao.Add(leitor["Nome"].ToString());
                    }
                }
            }

            conexao.Desconectar();
            return colecao;
        }

        public ProdutoVenda TrazerInformacoesDoProdutoParaVenda(string produto, bool codigo)
        {
            string comando;
            ProdutoVenda Produto = new ProdutoVenda();

            if (codigo)
            {
                comando = "SELECT tbl_ProdutoVariacao.ID_ProdutoVariacao, tbl_ProdutoVariacao.Cod_Barras, Nome, ISNULL((SELECT ID_Combo FROM tbl_ProdutosCombo WHERE ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao), 0) AS Combo, IIF((SELECT COUNT(*) FROM tbl_ProdutosPromocao WHERE ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao AND (SELECT Data_Final FROM tbl_Promocoes WHERE ID_Promocao = tbl_ProdutosPromocao.ID_Promocao) >= CONVERT(DATE, GETDATE())) > 0, 1, 0) AS Promocao, ISNULL((SELECT Preco FROM tbl_ProdutosPromocao WHERE ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao AND (SELECT Data_Final FROM tbl_Promocoes WHERE ID_Promocao = tbl_ProdutosPromocao.ID_Promocao) >= CONVERT(DATE, GETDATE())), Preco_Venda) AS Preco, (SELECT ID_Categoria FROM tbl_Utensilios WHERE ID_Utensilio = (SELECT ID_Utensilio FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto)) AS ID_Categoria FROM tbl_Catalogo INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao WHERE tbl_ProdutoVariacao.Cod_Barras = @produto GROUP BY tbl_ProdutoVariacao.ID_ProdutoVariacao, Cod_Barras, Nome, tbl_Catalogo.Preco_Venda, tbl_ProdutoVariacao.ID_Produto";
            }
            else
            {
                comando = "SELECT tbl_ProdutoVariacao.ID_ProdutoVariacao, tbl_ProdutoVariacao.Cod_Barras, Nome, ISNULL((SELECT ID_Combo FROM tbl_ProdutosCombo WHERE ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao), 0) AS Combo, IIF((SELECT COUNT(*) FROM tbl_ProdutosPromocao WHERE ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao AND (SELECT Data_Final FROM tbl_Promocoes WHERE ID_Promocao = tbl_ProdutosPromocao.ID_Promocao) >= CONVERT(DATE, GETDATE())) > 0, 1, 0) AS Promocao, ISNULL((SELECT Preco FROM tbl_ProdutosPromocao WHERE ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao AND (SELECT Data_Final FROM tbl_Promocoes WHERE ID_Promocao = tbl_ProdutosPromocao.ID_Promocao) >= CONVERT(DATE, GETDATE())), Preco_Venda) AS Preco, (SELECT ID_Categoria FROM tbl_Utensilios WHERE ID_Utensilio = (SELECT ID_Utensilio FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto)) AS ID_Categoria FROM tbl_Catalogo INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao WHERE tbl_ProdutoVariacao.Cod_Barras = (SELECT Cod_Barras FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = (SELECT ID_ProdutoVariacao FROM tbl_Catalogo WHERE Nome = @produto)) GROUP BY tbl_ProdutoVariacao.ID_ProdutoVariacao, Cod_Barras, Nome, tbl_Catalogo.Preco_Venda, tbl_ProdutoVariacao.ID_Produto";
            }

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@produto", produto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Produto.ID_Produto = Convert.ToInt32(leitor[0]);
                        Produto.Codigo = leitor[1].ToString();
                        Produto.Produto = leitor[2].ToString();
                        Produto.ID_Combo = Convert.ToInt32(leitor[3]);
                        Produto.Promocao = Convert.ToBoolean(leitor[4]);
                        Produto.Preco = Convert.ToDecimal(leitor[5]);
                        Produto.ID_Categoria = Convert.ToInt32(leitor[6]);
                    }
                }
            }

            conexao.Desconectar();

            return Produto;
        }

        public ProdutoEtiqueta TrazerInformacoesDoProdutoParaEtiqueta(string produto, bool codigo)
        {
            string comando;
            ProdutoEtiqueta Produto = new ProdutoEtiqueta();

            if (codigo)
            {
                comando = "SELECT tbl_ProdutoVariacao.Cod_Barras, Nome, IIF((SELECT COUNT(*) FROM tbl_ProdutosPromocao WHERE ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao AND (SELECT Data_Final FROM tbl_Promocoes WHERE ID_Promocao = tbl_ProdutosPromocao.ID_Promocao) >= CONVERT(DATE, GETDATE())) > 0, 1, 0) AS Promocao, Preco_Venda, ISNULL((SELECT Preco FROM tbl_ProdutosPromocao WHERE ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao AND (SELECT Data_Final FROM tbl_Promocoes WHERE ID_Promocao = tbl_ProdutosPromocao.ID_Promocao) >= CONVERT(DATE, GETDATE())), Preco_Venda) AS Preco FROM tbl_Catalogo INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao WHERE tbl_ProdutoVariacao.Cod_Barras = @produto GROUP BY tbl_ProdutoVariacao.ID_ProdutoVariacao, Cod_Barras, Nome, tbl_Catalogo.Preco_Venda, tbl_ProdutoVariacao.ID_Produto";
            }
            else
            {
                comando = "SELECT tbl_ProdutoVariacao.Cod_Barras, Nome, IIF((SELECT COUNT(*) FROM tbl_ProdutosPromocao WHERE ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao AND (SELECT Data_Final FROM tbl_Promocoes WHERE ID_Promocao = tbl_ProdutosPromocao.ID_Promocao) >= CONVERT(DATE, GETDATE())) > 0, 1, 0) AS Promocao, Preco_Venda, ISNULL((SELECT Preco FROM tbl_ProdutosPromocao WHERE ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao AND (SELECT Data_Final FROM tbl_Promocoes WHERE ID_Promocao = tbl_ProdutosPromocao.ID_Promocao) >= CONVERT(DATE, GETDATE())), Preco_Venda) AS Preco FROM tbl_Catalogo INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao WHERE tbl_ProdutoVariacao.Cod_Barras = (SELECT Cod_Barras FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = (SELECT ID_ProdutoVariacao FROM tbl_Catalogo WHERE Nome = @produto)) GROUP BY Cod_Barras, Nome, tbl_Catalogo.Preco_Venda, tbl_ProdutoVariacao.ID_Produto, tbl_ProdutoVariacao.ID_ProdutoVariacao";
            }

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@produto", produto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Produto.Codigo = leitor[0].ToString();
                        Produto.Produto = leitor[1].ToString();
                        Produto.Promocao = Convert.ToBoolean(leitor[2]);
                        Produto.Venda = Convert.ToDecimal(leitor[3]).ToString("F");
                        Produto.Venda_Promocional = Convert.ToDecimal(leitor[4]).ToString("F");
                    }
                }
            }

            conexao.Desconectar();

            return Produto;
        }

        public decimal pesquisarPrecoPromocionalPeloID(int id_produto)
        {
            SqlCommand comando = new SqlCommand("SELECT Preco_Promocao FROM tbl_Produtos WHERE ID_Produto = @id_produto", conexao.Conectar());
            comando.Parameters.AddWithValue("@id_produto", id_produto);
            decimal resultado;
            if (comando.ExecuteScalar() == DBNull.Value) { resultado = 0; }
            else { resultado = Convert.ToDecimal(comando.ExecuteScalar()); }
            conexao.Desconectar();
            return resultado;
        }

        public List<Tabela_Descontos> TrazerFaixasDeDesconto()
        {
            List<Tabela_Descontos> tabelas = new List<Tabela_Descontos>();

            string comando = "SELECT ID_Tabela, Nome_Tabela, ISNULL(Inicio, 0), ISNULL(Termino, 0) FROM tbl_Tabelas";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        tabelas.Add(new Tabela_Descontos
                        {
                            ID_Tabela = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Inicio = Convert.ToDecimal(leitor[2]),
                            Termino = Convert.ToDecimal(leitor[3])
                        }) ;
                    }
                }
            }

            conexao.Desconectar();

            return tabelas;
        }

        public List<Categoria> TrazerPercentualDeDescontoPorCategoria()
        {
            List<Categoria> categorias = new List<Categoria>();

            string comando = "SELECT ID_Categoria, Nome_Categoria, Cliente1, Cliente2, Cliente3, Revendedor1, Revendedor2, Revendedor3 FROM tbl_Categorias";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        categorias.Add(new Categoria
                        {
                            ID_Categoria = Convert.ToInt32(leitor[0]),
                            Cliente1 = Convert.ToDecimal(leitor[2]),
                            Cliente2 = Convert.ToDecimal(leitor[3]),
                            Cliente3 = Convert.ToDecimal(leitor[4]),
                            Revendedor1 = Convert.ToDecimal(leitor[5]),
                            Revendedor2 = Convert.ToDecimal(leitor[6]),
                            Revendedor3 = Convert.ToDecimal(leitor[7]),
                        });
                    }
                }
            }

            conexao.Desconectar();

            return categorias;
        }

        public decimal pesquisarTabelaPeloValorTotal(int id_produto, string tabela, decimal total)
        {
            decimal subtotal = 0;
            decimal preco1 = 0;
            decimal preco2 = 0;
            decimal preco3 = 0;
            decimal preco4 = 0;
            decimal preco5 = 0;

            if (tabela == "Padrão")
            {
                SqlCommand comando = new SqlCommand("SELECT Preco_Venda FROM tbl_Produtos WHERE ID_Produto = @id_produto", conexao.Conectar());
                comando.Parameters.AddWithValue("@id_produto", id_produto);
                subtotal = Convert.ToDecimal(comando.ExecuteScalar());
                conexao.Desconectar();
            }
            else
            {
                if (tabela == "Cliente")
                {
                    SqlCommand comando = new SqlCommand("SELECT Inicio FROM tbl_Tabelas WHERE Nome_Tabela = 'Cliente1'", conexao.Conectar());
                    preco1 = Convert.ToDecimal(comando.ExecuteScalar());
                    SqlCommand comando2 = new SqlCommand("SELECT Termino FROM tbl_Tabelas WHERE Nome_Tabela = 'Cliente1'", conexao.Conectar());
                    preco2 = Convert.ToDecimal(comando2.ExecuteScalar());
                    SqlCommand comando3 = new SqlCommand("SELECT Inicio FROM tbl_Tabelas WHERE Nome_Tabela = 'Cliente2'", conexao.Conectar());
                    preco3 = Convert.ToDecimal(comando3.ExecuteScalar());
                    SqlCommand comando4 = new SqlCommand("SELECT Termino FROM tbl_Tabelas WHERE Nome_Tabela = 'Cliente2'", conexao.Conectar());
                    preco4 = Convert.ToDecimal(comando4.ExecuteScalar());
                    SqlCommand comando5 = new SqlCommand("SELECT Inicio FROM tbl_Tabelas WHERE Nome_Tabela = 'Cliente3'", conexao.Conectar());
                    preco5 = Convert.ToDecimal(comando5.ExecuteScalar());
                }
                else if (tabela == "Revendedor")
                {
                    SqlCommand comando = new SqlCommand("SELECT Inicio FROM tbl_Tabelas WHERE Nome_Tabela = 'Revendedor1'", conexao.Conectar());
                    preco1 = Convert.ToDecimal(comando.ExecuteScalar());
                    SqlCommand comando2 = new SqlCommand("SELECT Termino FROM tbl_Tabelas WHERE Nome_Tabela = 'Revendedor1'", conexao.Conectar());
                    preco2 = Convert.ToDecimal(comando2.ExecuteScalar());
                    SqlCommand comando3 = new SqlCommand("SELECT Inicio FROM tbl_Tabelas WHERE Nome_Tabela = 'Revendedor2'", conexao.Conectar());
                    preco3 = Convert.ToDecimal(comando3.ExecuteScalar());
                    SqlCommand comando4 = new SqlCommand("SELECT Termino FROM tbl_Tabelas WHERE Nome_Tabela = 'Revendedor2'", conexao.Conectar());
                    preco4 = Convert.ToDecimal(comando4.ExecuteScalar());
                    SqlCommand comando5 = new SqlCommand("SELECT Inicio FROM tbl_Tabelas WHERE Nome_Tabela = 'Revendedor3'", conexao.Conectar());
                    preco5 = Convert.ToDecimal(comando5.ExecuteScalar());
                }

                if (total < preco1)
                {
                    SqlCommand comando = new SqlCommand("SELECT Preco_Venda FROM tbl_Produtos WHERE ID_Produto = @id_produto", conexao.Conectar());
                    comando.Parameters.AddWithValue("@id_produto", id_produto);

                    subtotal = Convert.ToDecimal(comando.ExecuteScalar());
                }
                else if (total >= preco1 && total <= preco2)
                {
                    if (tabela == "Cliente")
                    {
                        SqlCommand comando = new SqlCommand("SELECT Cliente1 FROM tbl_Produtos WHERE ID_Produto = @id_produto", conexao.Conectar());
                        comando.Parameters.AddWithValue("@id_produto", id_produto);
                        subtotal = Convert.ToDecimal(comando.ExecuteScalar());
                    }
                    else if (tabela == "Revendedor")
                    {
                        SqlCommand comando = new SqlCommand("SELECT Revendedor1 FROM tbl_Produtos WHERE ID_Produto = @id_produto", conexao.Conectar());
                        comando.Parameters.AddWithValue("@id_produto", id_produto);
                        subtotal = Convert.ToDecimal(comando.ExecuteScalar());
                    }
                }
                else if (total >= preco3 && total <= preco4)
                {
                    if (tabela == "Cliente")
                    {
                        SqlCommand comando = new SqlCommand("SELECT Cliente2 FROM tbl_Produtos WHERE ID_Produto = @id_produto", conexao.Conectar());
                        comando.Parameters.AddWithValue("@id_produto", id_produto);
                        subtotal = Convert.ToDecimal(comando.ExecuteScalar());
                    }
                    else if (tabela == "Revendedor")
                    {
                        SqlCommand comando = new SqlCommand("SELECT Revendedor2 FROM tbl_Produtos WHERE ID_Produto = @id_produto", conexao.Conectar());
                        comando.Parameters.AddWithValue("@id_produto", id_produto);
                        subtotal = Convert.ToDecimal(comando.ExecuteScalar());
                    }
                }
                else if (total >= preco5)
                {
                    if (tabela == "Cliente")
                    {
                        SqlCommand comando = new SqlCommand("SELECT Cliente3 FROM tbl_Produtos WHERE ID_Produto = @id_produto", conexao.Conectar());
                        comando.Parameters.AddWithValue("@id_produto", id_produto);
                        subtotal = Convert.ToDecimal(comando.ExecuteScalar());
                    }
                    else if (tabela == "Revendedor")
                    {
                        SqlCommand comando = new SqlCommand("SELECT Revendedor3 FROM tbl_Produtos WHERE ID_Produto = @id_produto", conexao.Conectar());
                        comando.Parameters.AddWithValue("@id_produto", id_produto);
                        subtotal = Convert.ToDecimal(comando.ExecuteScalar());
                    }
                }
            }
            conexao.Desconectar();
            return subtotal;
        }

        public string pesquisarProdutoPeloCodigo(string cod_barras)
        {
            string comando = "SELECT (SELECT Nome FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) AS Produto FROM tbl_ProdutoVariacao WHERE Cod_Barras = @cod_barras";
            string resultado;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@cod_barras", cod_barras);
                resultado = Convert.ToString(select.ExecuteScalar());
            }

            conexao.Desconectar();
            return resultado;
        }

        public string pesquisarCodigoPeloProduto(string produto)
        {
            string comando = "SELECT Cod_Barras FROM tbl_ProdutoVariacao WHERE (SELECT Nome FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) = @produto";

            string resultado = string.Empty;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@produto", produto);
                resultado = Convert.ToString(select.ExecuteScalar());
            }

            conexao.Desconectar();
            return resultado;
        }

        public string pesquisarProdutoPorCodigoAvulso(string cod_barras)
        {
            string comando = "SELECT TOP(1) (SELECT Nome FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosLote.ID_ProdutoVariacao) AS Produto FROM tbl_ProdutosLote WHERE Cod_Barras = @cod_barras";
            string resultado;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@cod_barras", cod_barras);
                resultado = Convert.ToString(select.ExecuteScalar());
            }

            conexao.Desconectar();
            return resultado;
        }

        public List<Combo> TrazerListaDeCombos()
        {
            List<Combo> lista = new List<Combo>();
            string comando = "SELECT Id_Combo, Multiplicador, Preco_Combo, Nome_Promocao FROM tbl_Combos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(new Combo()
                {
                    ID_Combo = Convert.ToInt32(leitor[0]),
                    Multiplicador = Convert.ToInt32(leitor[1]),
                    Preco = Convert.ToDecimal(leitor[2]),
                    Descricao = leitor[3].ToString()
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public int PesquisarComboPeloProduto(int id_produto)
        {
            string comando = "SELECT ID_Combo FROM tbl_ProdutosCombo WHERE ID_Produto = @id_produto";
            int ID_Combo;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_produto", id_produto);

                try
                {
                    ID_Combo = Convert.ToInt32(select.ExecuteScalar());
                }
                catch { ID_Combo = 0; }
            }

            conexao.Desconectar();

            return ID_Combo;
        }

        public string TrazerPromocoesPelaData(string data)
        {
            string promocao;

            string comando = "SELECT ISNULL(STUFF((SELECT DISTINCT '/' + Nome_Promocao FROM tbl_Promocoes WHERE Data_Inicial = @data FOR XML PATH('')), 1,1,''), '') AS Pagamento FROM tbl_Promocoes WHERE Data_Inicial = @data";
            //string comando = "SELECT Nome_Promocao FROM tbl_Promocoes WHERE Data_Inicial = @data";
            string comando1 = "SELECT Nome_Promocao FROM tbl_Promocoes WHERE Data_Final = @data";
            
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlCommand select1 = new SqlCommand(comando1, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            select1.Parameters.AddWithValue("@data", data);

            try
            {
                promocao = select.ExecuteScalar().ToString();
            }
            catch
            {
                try
                {
                    promocao = select1.ExecuteScalar().ToString() + " - Fim da Promoção";
                }
                catch
                {
                    promocao = string.Empty;
                }
            }
            conexao.Desconectar();
            return promocao;
        }

        public bool VerificarSeProdutoEstaNaPromocao(int id_produtovariacao)
        {
            bool verificar;
            string comando = "SELECT IIF(COUNT(*) > 0, 1, 0) FROM tbl_ProdutosPromocao WHERE ID_Produto = @id_produtovariacao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_produtovariacao", id_produtovariacao);
                verificar = Convert.ToBoolean(select.ExecuteScalar());
            }     

            conexao.Desconectar();
            return verificar;
        }

        public ProdutoVenda TrazerInformacoesDoProdutoNaPromocao(int id_produtovariacao)
        {
            ProdutoVenda Produto = new ProdutoVenda();

            string comando = "SELECT Nome, (SELECT Preco_Base + (Aliquota_ICMS * (Preco_Base / 100)) + (Aliquota_IPI * (Preco_Base / 100)) FROM tbl_Produtos2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao)) AS Custo, Preco_Venda, Preco AS Promocao FROM tbl_ProdutosPromocao INNER JOIN tbl_Catalogo ON tbl_Catalogo.ID_ProdutoVariacao = tbl_ProdutosPromocao.ID_Produto WHERE ID_Produto = @id_produtovariacao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_produtovariacao", id_produtovariacao);
                
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Produto.ID_Produto = id_produtovariacao;
                        Produto.Produto = leitor[0].ToString();
                        Produto.Custo = Convert.ToDecimal(leitor[1]);
                        Produto.Preco = Convert.ToDecimal(leitor[2]);
                        Produto.Preco_Promocional = Convert.ToDecimal(leitor[3]);
                    }
                }
            }

            conexao.Desconectar();

            return Produto;
        }

        public void EditarProdutoDaPromocao(ProdutoVenda Produto)
        {
            string comando = "UPDATE tbl_ProdutosPromocao SET Preco = @preco WHERE ID_Produto = @id_produtovariacao";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@preco", Produto.Preco_Promocional);
                update.Parameters.AddWithValue("@id_produtovariacao", Produto.ID_Produto);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public bool VerificarNomeDaPromocao(string promocao)
        {
            bool verificar;
            string comando = "SELECT ID_Promocao FROM tbl_Promocoes WHERE Nome_Promocao = @promocao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@promocao", promocao);
            int id_promocao = 0;

            try
            {
                id_promocao = Convert.ToInt32(select.ExecuteScalar());
            }
            catch { }

            if (id_promocao != 0)
            {
                verificar = false;
            }
            else
            {
                verificar = true;
            }
            conexao.Desconectar();
            return verificar;
        }

        public bool VerificarNomeDoCombo(string combo)
        {
            bool verificar;
            string comando = "SELECT ID_Combo FROM tbl_Combos WHERE Nome_Promocao = @combo";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@combo", combo);
            int id_promocao = 0;

            try
            {
                id_promocao = Convert.ToInt32(select.ExecuteScalar());
            }
            catch { }

            if (id_promocao != 0)
            {
                verificar = false;
            }
            else
            {
                verificar = true;
            }
            conexao.Desconectar();
            return verificar;
        }

        public string TrazerParametrosDeDesconto(string tabela)
        {
            string Valores = "";
            string comando = "SELECT Inicio, Termino FROM tbl_Tabelas WHERE Nome_Tabela = @tabela";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@tabela", tabela);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                Valores = leitor[0].ToString() + "/" + leitor[1].ToString();
            }
            return Valores;
        }

        public void PreencherDataGridProdutosDescontos(string tabela, DataGridView dataGrid, BindingSource binding)
        {
            if (tabela == "") { }
            else
            {
                string select1;
                if (tabela == "Cliente1")
                {
                    select1 = "SELECT Nome_Categoria AS CATEGORIA, Cliente1 AS 'DESCONTO %' FROM tbl_Categorias";
                }
                else if (tabela == "Cliente2")
                {
                    select1 = "SELECT Nome_Categoria AS CATEGORIA, Cliente2 AS 'DESCONTO %' FROM tbl_Categorias";
                }
                else if (tabela == "Cliente3")
                {
                    select1 = "SELECT Nome_Categoria AS CATEGORIA, Cliente3 AS 'DESCONTO %' FROM tbl_Categorias";
                }
                else if (tabela == "Revendedor1")
                {
                    select1 = "SELECT Nome_Categoria AS CATEGORIA, Revendedor1 AS 'DESCONTO %' FROM tbl_Categorias";
                }
                else if (tabela == "Revendedor2")
                {
                    select1 = "SELECT Nome_Categoria AS CATEGORIA, Revendedor2 AS 'DESCONTO %' FROM tbl_Categorias";
                }
                else if (tabela == "Revendedor3")
                {
                    select1 = "SELECT Nome_Categoria AS CATEGORIA, Revendedor3 AS 'DESCONTO %' FROM tbl_Categorias";
                }
                else
                {
                    select1 = "";
                }
                SqlCommand select = new SqlCommand(select1, conexao.Conectar());
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                binding.DataSource = dataSet;
                binding.DataMember = dataSet.Tables[0].TableName;
                dataGrid.DataSource = binding;
                conexao.Desconectar();
            }
        }

        #endregion

        #region Clientes

        public List<Cliente> ListaDeClientes()
        {
            List<Cliente> clientes = new List<Cliente>();
            string comando = "SELECT ID_Cliente, CPF_Cliente, Nome_Cliente, Especial FROM tbl_Clientes";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        clientes.Add(new Cliente
                        {
                            ID_Cliente = Convert.ToInt32(leitor[0]),
                            CPF = leitor[1].ToString(),
                            Nome = leitor[2].ToString(),
                            Especial = Convert.ToBoolean(leitor[3])
                        });
                    }
                }
            }

            return clientes;
        }

        public void PreencherDataGridClientes(DataGridView dataGrid, BindingSource binding)
        {
            string comando = "";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            binding.DataSource = dataSet;
            binding.DataMember = dataSet.Tables[0].TableName;
            dataGrid.DataSource = binding;
            conexao.Desconectar();
        }

        public void CadastrarCliente(Cliente Cliente)
        {
            string nome = Cliente.Nome;
            string cpf = Cliente.CPF;
            string nascimento = Cliente.Nascimento;
            string cep = Cliente.CEP;
            string telefone = Cliente.Telefone;
            string email = Cliente.Email;
            bool especial = Cliente.Especial;

            string comando = "INSERT INTO tbl_Clientes (Nome_Cliente, CPF_Cliente, Telefone_Cliente, Email_Cliente, Tabela, Nascimento, Endereco, Numero_Casa, Bairro, Cidade, Estado, Celular_Cliente, CEP) VALUES(@nome, @cpf, @telefone, @email, @tabela, @nascimento, @endereco, @numero, @bairro, @cidade, @estado, @celular, @cep)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());

            insert.Parameters.AddWithValue("@nome", nome);
            insert.Parameters.AddWithValue("@cpf", cpf);
            insert.Parameters.AddWithValue("@telefone", telefone);
            insert.Parameters.AddWithValue("@email", email);
            insert.Parameters.AddWithValue("@nascimento", nascimento);
            insert.Parameters.AddWithValue("@cep", cep);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Cliente cadastrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void RegistrarProdutoDesejado(int id_cliente, List<Produto> Produtos)
        {
            foreach (Produto Produto in Produtos)
            {
                string comando = "INSERT INTO tbl_ProdutosProcurados (ID_Produto, ID_Cliente, Data, Status) VALUES (@id_produto, @id_cliente, GETDATE(), 'Pendente')";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@id_cliente", id_cliente);
                insert.Parameters.AddWithValue("id_produto", Produto.ID_Produto);
                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();
            MessageBox.Show("Produto desejado registrado com sucesso.\r\n O cliente será informado quando o produto voltar ao nosso estoque.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<string> TrazerListaDeHabitos(string categoria)
        {
            List<string> Habitos = new List<string>();
            string especificacao = string.Empty;
            string comando = "SELECT Habito FROM tbl_Habitos WHERE Especificacao = @especificacao";

            if (categoria == "Cores") { especificacao = "Cor"; }
            else if (categoria == "Negócios") { especificacao = "Negócios"; }
            else if (categoria == "Sentimento - Hobby") { especificacao = "Sentimento"; }

            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@especificacao", especificacao);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Habitos.Add(leitor[0].ToString());
            }

            leitor.Close();
            conexao.Desconectar();

            return Habitos;
        }

        public void RegistrarHabitoDoCliente(HabitoDoCliente Habito)
        {
            string comando = "INSERT INTO tbl_HabitosClientes (ID_Habito, ID_Cliente) VALUES ((SELECT ID_Habito FROM tbl_Habitos WHERE Habito = @habito), @id_cliente)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@habito", Habito.Habito);
            insert.Parameters.AddWithValue("@id_cliente", Habito.ID_Cliente);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Informação registrada.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        #endregion

        #region Pagamento

        public void RegistrarProdutoVendido(List<ProdutoVenda> lista, int id_reparticao)
        {
            string matricula = Program.matricula;

            string comando = "INSERT INTO tbl_ProdutosVendidos (ID_Produto, ID_Venda, Quantidade, Preco_Vendido, Desconto, Status, Preco_Custo, ID_ProdutoLote) VALUES (@id_produto, (SELECT TOP(1) ID_Venda from tbl_Vendas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Venda DESC), @quantidade, @preco, @desconto, @status, (SELECT CAST(Preco_Base + (Preco_Base / 100 * Aliquota_ICMS) + (Preco_Base / 100 * Aliquota_IPI) AS DECIMAL(7, 2)) AS Custo FROM tbl_Produtos2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = @id_produto)), (SELECT TOP(1) ID_ProdutoLote FROM tbl_ProdutosLote WHERE Disponibilidade = 1 AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = 1 AND ID_ProdutoVariacao = @id_produto))";
            string comando2 = "UPDATE tbl_ProdutosLote SET Data_Saida = GETDATE(), Disponibilidade = 0, Status = 'Vendido' WHERE ID_ProdutoVariacao = @id_produto AND (SELECT COUNT(*) FROM tbl_ProdutosVendidos WHERE ID_ProdutoLote = tbl_ProdutosLote.ID_ProdutoLote) > 0 AND Disponibilidade = 1 AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = @id_reparticao";

            foreach (ProdutoVenda linha in lista)
            {
                int id_produto = linha.ID_Produto;

                decimal preco = linha.Total;
                int quantidade = linha.Quantidade;
                decimal desconto = linha.Desconto;

                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@id_produto", id_produto);
                    insert.Parameters.AddWithValue("@matricula", matricula);
                    insert.Parameters.AddWithValue("@quantidade", quantidade);
                    insert.Parameters.AddWithValue("@preco", preco);
                    insert.Parameters.AddWithValue("@desconto", desconto);
                    insert.Parameters.AddWithValue("@id_reparticao", id_reparticao);
                    insert.Parameters.AddWithValue("@status", "Vendido");
                    insert.ExecuteNonQuery();
                }

                using (SqlCommand update = new SqlCommand(comando2, conexao.Conectar()))
                {
                    update.Parameters.AddWithValue("@id_reparticao", id_reparticao);
                    update.Parameters.AddWithValue("@id_produto", id_produto);
                    update.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();
        }

        public void RegistrarVenda(List<ProdutoVenda> Produtos, string CPF_Cliente)
        {
            string comando = "INSERT INTO tbl_Vendas (Data_Venda, Valor_Custo, Valor_Venda, Desconto, ID_Cliente, ID_Colaborador, ID_Caixa) VALUES (GETDATE(), @custo_total, @venda_total, @desconto, (SELECT ID_Cliente FROM tbl_Clientes WHERE CPF_Cliente = @cpf_cliente), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), (SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Caixa DESC))";
            decimal custo = Produtos.Sum(x => x.Custo);
            decimal total = Produtos.Sum(x => x.Subtotal);
            decimal desconto = Produtos.Sum(x => x.Desconto);

            string matricula = Program.matricula;
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@custo_total", custo);
                insert.Parameters.AddWithValue("@venda_total", total);
                insert.Parameters.AddWithValue("@desconto", desconto);
                insert.Parameters.AddWithValue("@cpf_cliente", CPF_Cliente);
                insert.Parameters.AddWithValue("@matricula", matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void RegistrarPagamento(List<Pagamento> lista)
        {
            string matricula = Program.matricula;

            foreach (Pagamento pagamento in lista)
            {
                decimal valor = pagamento.Valor;
                string forma = pagamento.Forma;
                decimal troco = pagamento.Troco;
                decimal juros = pagamento.Juros;
                string bandeira = pagamento.Bandeira;
                int parcelas = pagamento.Parcelas;

                string comando;

                if (forma == "DÉBITO")
                {
                    comando = "INSERT INTO tbl_PagamentosRecebidos (Valor_Pagamento, ID_Venda, Forma_Pagamento, Troco, Bandeira, Parcelas, ID_Caixa) VALUES (@valor, (SELECT TOP(1) Id_Venda from tbl_Vendas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Venda DESC), @forma, @troco, @bandeira, 1, (SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto'))";
                }
                else if (forma == "CRÉDITO")
                {
                    comando = "INSERT INTO tbl_PagamentosRecebidos (Valor_Pagamento, ID_Venda, Forma_Pagamento, Troco, Bandeira, Parcelas, Juros, ID_Caixa) VALUES (@valor, (SELECT TOP(1) Id_Venda from tbl_Vendas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Venda DESC), @forma, @troco, @bandeira, @parcelas, @juros, (SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto'))";
                }
                else if (forma == "PICPAY")
                {
                    comando = "INSERT INTO tbl_PagamentosRecebidos (Valor_Pagamento, ID_Venda, Forma_Pagamento, Troco, Bandeira, Parcelas, Juros, ID_Caixa) VALUES (@valor, (SELECT TOP(1) Id_Venda from tbl_Vendas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Venda DESC), @forma, @troco, 'PICPAY', @parcelas, @juros, (SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto'))";
                }
                else
                {
                    comando = "INSERT INTO tbl_PagamentosRecebidos (Valor_Pagamento, ID_Venda, Forma_Pagamento, Troco, ID_Caixa) VALUES (@valor, (SELECT TOP(1) Id_Venda from tbl_Vendas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Venda DESC), @forma, @troco, (SELECT TOP (1) ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto'))";
                }

                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@valor", valor);
                    insert.Parameters.AddWithValue("@forma", forma);
                    insert.Parameters.AddWithValue("@troco", troco);
                    insert.Parameters.AddWithValue("@matricula", matricula);

                    if (forma == "DÉBITO" || forma == "CRÉDITO" || forma == "PICPAY")
                    {
                        insert.Parameters.AddWithValue("@bandeira", bandeira);
                        insert.Parameters.AddWithValue("@parcelas", parcelas);
                        insert.Parameters.AddWithValue("@juros", juros);
                    }

                    insert.ExecuteNonQuery();
                }
            }
            conexao.Desconectar();
        }
        public void RegistrarReserva(string cpf)
        {
            string comando = "INSERT INTO tbl_Reservas (ID_Cliente, Data, Status, Validade, ID_Colaborador) VALUES ((SELECT ID_Cliente FROM tbl_Clientes WHERE CPF_Cliente = @cpf), GETDATE(), @status, @validade, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula))";

            string matricula = Program.matricula;
            decimal prazo = ObterValorDoParametro("Prazo de Reserva");
            string status = "Pendente";
            string validade = DateTime.Now.AddDays(Convert.ToInt32(prazo)).ToShortDateString();
            
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@cpf", cpf);
                insert.Parameters.AddWithValue("@status", status);
                insert.Parameters.AddWithValue("@validade", validade);
                insert.Parameters.AddWithValue("@matricula", matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void RegistrarProdutosReserva(string cpf, List<ProdutoVenda> lista)
        {
            string comando = "INSERT INTO tbl_ProdutosReserva (ID_Reserva, ID_Produto, Quantidade) VALUES ((SELECT TOP (1) ID_Reserva FROM tbl_Reservas WHERE ID_Cliente = (SELECT id_Cliente FROM tbl_Clientes WHERE CPF_Cliente = @CPF) ORDER BY ID_Reserva DESC), @id_produto, @quantidade)";

            foreach (ProdutoVenda row in lista)
            {
                int id_produto = row.ID_Produto;

                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@id_produto", id_produto);
                    insert.Parameters.AddWithValue("@cpf", cpf);
                    insert.Parameters.AddWithValue("@quantidade", 1);
                    insert.ExecuteNonQuery();
                }

                conexao.Desconectar();
            }
        }
        public void RegistrarEntrega(Entrega entrega)
        {
            decimal prazo = ObterValorDoParametro("Prazo de Entrega");
            string data_entrega = DateTime.Now.AddDays(Convert.ToInt32(prazo)).ToShortDateString();

            string comando = "INSERT INTO tbl_entregas (ID_Venda, Data_Solicitacao, Previsao_Entrega, Endereco, Recebedor, Bairro, Cidade, Estado, Pagamento, Status, Valor) VALUES ((SELECT TOP 1(ID_Venda) FROM tbl_Vendas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Venda DESC), GETDATE(), @entrega, @endereco, @recebedor, @bairro, @cidade, @estado, 'Realizado', 'Pendente', @valor)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.Parameters.AddWithValue("@entrega", data_entrega);
                insert.Parameters.AddWithValue("@endereco", entrega.Endereco);
                insert.Parameters.AddWithValue("@recebedor", entrega.Recebedor);
                insert.Parameters.AddWithValue("@bairro", entrega.Bairro);
                insert.Parameters.AddWithValue("@cidade", entrega.Cidade);
                insert.Parameters.AddWithValue("@estado", entrega.Estado);
                insert.Parameters.AddWithValue("@valor", entrega.Valor);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void AgendarRetirada(string data)
        {
            string matricula = Program.matricula;
            decimal prazo = ObterValorDoParametro("Prazo de Retirada");
            string validade = DateTime.Now.AddDays(Convert.ToInt32(prazo)).ToShortDateString();
            string status = "Pendente";
            string comando = "INSERT INTO tbl_Retiradas (ID_Venda, Data, Status, Validade) VALUES ((SELECT TOP 1(ID_Venda) FROM tbl_Vendas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Venda DESC), @data, @status, @validade)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@matricula", matricula);
                insert.Parameters.AddWithValue("@data", data);
                insert.Parameters.AddWithValue("@status", status);
                insert.Parameters.AddWithValue("@validade", validade);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void RegistrarProdutoRetirada(List<string> lista)
        {
            string comando = "INSERT INTO tbl_ProdutosRetirada (ID_Retirada, Id_Produto, Quantidade) VALUES((SELECT ID_Retirada FROM tbl_Retiradas WHERE id_Venda = (SELECT TOP 1(ID_Venda) FROM tbl_Vendas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Venda DESC)), (SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema), @quantidade)";

            string matricula = Program.matricula;
            int quantidade = 1;

            foreach (string row in lista)
            {
                string nome_sistema = row;

                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@matricula", matricula);
                    insert.Parameters.AddWithValue("@nome_sistema", nome_sistema);
                    insert.Parameters.AddWithValue("@quantidade", quantidade);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();
        }
        public void RegistrarProdutoEntrega(List<string> lista)
        {
            string comando = "INSERT INTO tbl_ProdutosEntrega (ID_Entrega, Id_Produto, Quantidade) VALUES ((SELECT ID_Entrega FROM tbl_Entregas WHERE id_Venda = (SELECT TOP 1(ID_Venda) FROM tbl_Vendas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Venda DESC)), (SELECT ID_Produto FROM tbl_Encapsulamento WHERE Nome_Sistema = @nome_sistema), @quantidade)";
            int quantidade = 1;
            string matricula = Program.matricula;

            foreach (string row in lista)
            {
                string nome_sistema = row;

                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@matricula", matricula);
                    insert.Parameters.AddWithValue("@nome_sistema", nome_sistema);
                    insert.Parameters.AddWithValue("@quantidade", quantidade);
                    insert.ExecuteNonQuery();
                }
            }
            conexao.Desconectar();
        }
        public bool VerificarValeTroca(int id_troca)
        {
            string comando = "SELECT IIF(ID_Troca IS NULL, 0, 1) FROM tbl_Trocas WHERE ID_Troca = @id_troca";
            bool verificar = false;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_troca", id_troca);
                verificar = Convert.ToBoolean(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return verificar;
        }
        public bool VerificarValidadeDoValeTroca(int id_troca)
        {
            bool verificar;
            string comando = "SELECT IIF(Validade >= CONVERT(DATE, GETDATE()), 1, 0) FROM tbl_Trocas WHERE ID_Troca = @id_troca";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_troca", id_troca);
                verificar = Convert.ToBoolean(select.ExecuteScalar());
            }

            conexao.Desconectar();
            return verificar;
        }
        public string StatusDoValeTroca(int id_troca)
        {
            string comando = "SELECT Status FROM tbl_Trocas WHERE ID_Troca = @id_troca";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_troca", id_troca);
            string status = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return status;
        }
        public decimal ValorDoValeTroca(int id)
        {
            decimal valor = 0;
            try
            {
                string comando1 = "SELECT SUM (tbl_ProdutosTrocados.Valor) FROM tbl_ProdutosTrocados INNER JOIN tbl_Trocas ON tbl_ProdutosTrocados.ID_Troca = tbl_Trocas.ID_Troca WHERE tbl_Trocas.Status = 'Pendente' AND tbl_Trocas.ID_Troca = @id";
                SqlCommand select1 = new SqlCommand(comando1, conexao.Conectar());
                select1.Parameters.AddWithValue("@id", id);
                valor = Convert.ToDecimal(select1.ExecuteScalar());
            }
            catch
            {
                if (valor == 0)
                {
                    MessageBox.Show("N° do Vale-troca inválido!\r\nVerifique se o código foi digitado corretamente.", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            conexao.Desconectar();
            return valor;
        }

        public Vale_Troca InformacoesDoValeTroca(int id_troca)
        {
            Vale_Troca vale = new Vale_Troca();
            string comando = "SELECT ID_Troca, Status, Validade, (SELECT SUM (Valor) FROM tbl_ProdutosTrocados WHERE ID_Troca = tbl_Trocas.ID_Troca) AS Valor FROM tbl_Trocas WHERE ID_Troca = @id_troca";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_troca", id_troca);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        vale.ID_Troca = Convert.ToInt32(leitor[0]);
                        vale.ID_Venda = Convert.ToInt32(leitor[1]);
                        vale.Status = leitor[2].ToString();
                        vale.Validade = Convert.ToDateTime(leitor[3]);
                        vale.Valor = Convert.ToDecimal(leitor[4]);
                    }
                }
            }

            conexao.Desconectar();

            return vale;
        }

        public void RegistrarPagamentoComValeTroca(int id_troca)
        {
            string comando = "UPDATE tbl_Trocas SET Status = 'Concluído' WHERE ID_Troca = @id_troca";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_troca", id_troca);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }
        public DataTable PreencherComboBoxBairro()//Preencher Combobox Fornecedores
        {
            DataTable dataTableFornecedores = new DataTable("Bairros");
            using (SqlCommand Command = new SqlCommand("SELECT ID_BairroEntrega, Bairro FROM tbl_BairrosEntrega ORDER BY Bairro", conexao.Conectar()))
            {
                dataTableFornecedores.Load(Command.ExecuteReader());
            }
            conexao.Desconectar();
            return dataTableFornecedores;
        }
        public List<string> PreencherComboBoxEstado()//Preencher Combobox Fornecedores
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Sigla FROM tbl_Estados ORDER BY Sigla";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(leitor[0].ToString());
            }
            leitor.Close();

            return lista;
        }
        #endregion

        #region Pagamento - Novo
        public List<string> BandeirasDosCartoes(string funcao)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT DISTINCT Bandeira FROM tbl_BandeirasCartoes WHERE Funcao = @funcao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@funcao", funcao);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(leitor[0].ToString());
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }
        public List<string> ParcelasDosCartoes(string bandeira, string funcao)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Vezes FROM tbl_BandeirasCartoes WHERE Bandeira = @bandeira AND Funcao = @funcao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@bandeira", bandeira);
            select.Parameters.AddWithValue("@funcao", funcao);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(leitor[0].ToString());
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        #endregion

        #region Cupons
        public List<ProdutoVenda> ListaDoCupom(List<ProdutoVenda> lista)
        {
            bool contem = false;
            int index = 0;
            List<ProdutoVenda> cupom = new List<ProdutoVenda>();
            foreach (ProdutoVenda linha in lista)
            {
                string produto = linha.Produto;
                decimal preco = linha.Preco;
                int quantidade = linha.Quantidade;
                decimal total = linha.Total;

                int qtd_agregado = lista.Cast<ProdutoVenda>().Where(x => x.Produto == produto).Sum(i => i.Quantidade);
                decimal total_agregado = lista.Cast<ProdutoVenda>().Where(x => x.Produto == produto).Sum(i => i.Total);
                decimal desconto_agregado = lista.Cast<ProdutoVenda>().Where(x => x.Produto == produto).Sum(i => i.Desconto);
                decimal subtotal_agregado = lista.Cast<ProdutoVenda>().Where(x => x.Produto == produto).Sum(i => i.Subtotal);

                foreach (ProdutoVenda row in cupom)
                {
                    string produto_encontrado = row.Produto;

                    if (produto == produto_encontrado)
                    {
                        contem = true;
                        index = row.Index;
                    }
                }
                if (contem)
                {
                    cupom[index].Quantidade = qtd_agregado;
                    cupom[index].Total = total_agregado;
                }
                else
                {
                    cupom.Add(new ProdutoVenda()
                    {
                        Produto = produto,
                        Preco = preco,
                        Quantidade = quantidade,
                        Total = total
                    });
                }
            }
            return cupom;
        }
        public void AbrirGaveta()
        {
            formRepAbrirGaveta relatorio = new formRepAbrirGaveta();
            relatorio.reportViewer1.RefreshReport();
            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_Termica;
            autoprintme.Print();
        }
        public int IdDaUltimaVenda()
        {
            int id;
            string matricula = Program.matricula;
            string comando = "SELECT TOP (1) tbl_Vendas.ID_Venda FROM tbl_Vendas  WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Venda DESC";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", matricula);
                id = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return id;
        }
        public void ImprimirCupomAlternativo(List<ProdutoVenda> Produtos, List<Pagamento> Pagamentos, Cliente Cliente)
        {
            int id = IdDaUltimaVenda();

            string operador = Program.colaborador.Nome_Colaborador;

            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();
            int quantidade_produtos = Produtos.Sum(x => x.Quantidade);
            decimal subtotal = Produtos.Sum(x => x.Subtotal);
            decimal total = Produtos.Sum(x => x.Total);
            decimal valor_pago = Pagamentos.Sum(x=> x.Valor + x.Troco);
            decimal troco = Pagamentos.Sum(x => x.Troco);
            decimal desconto = Produtos.Sum(x => x.Desconto);
            decimal juros = Pagamentos.Sum(x => x.Juros);

            string forma_pagamento = string.Empty;

            foreach (string pagamento in Pagamentos.Select(x => x.Forma).Distinct().ToList())
            {
                if (forma_pagamento == string.Empty)
                {
                    forma_pagamento = pagamento;
                }
                else
                {
                    forma_pagamento = " / " + pagamento;
                }
            }

            Form1 relatorio = new Form1();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("cliente", Cliente.Nome));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("id", id.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("quantidade_produtos", quantidade_produtos.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("subtotal", subtotal.ToString("F")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("total", total.ToString("F")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("valor_pago", valor_pago.ToString("F")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("troco", troco.ToString("F")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("juros", juros.ToString("F")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("desconto", desconto.ToString("F")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("forma_pagamento", forma_pagamento.ToString()));

            var lista = Produtos.GroupBy(x => (x.Codigo, x.Produto, x.Preco)).Select(g => ( 
            g.Key.Codigo, g.Key.Produto, g.Key.Preco, Quantidade: g.Sum(x => x.Quantidade), Total: g.Sum(x => x.Total)));

            Produtos.Clear();

            foreach (var produto in lista)
            {
                Produtos.Add(new ProdutoVenda
                {
                   Produto = produto.Produto,
                   Quantidade = produto.Quantidade,
                   Preco = produto.Preco,
                   Total = produto.Total
                });
            }

            relatorio.reportViewer1.LocalReport.DataSources.Clear();
            relatorio.reportViewer1.LocalReport.DataSources.Add(new ReportDataSource("DataSetProdutos", Produtos));

            relatorio.reportViewer1.RefreshReport();

            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            //autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_Termica;
            autoprintme.Print();
        }
        public void ImprimirCupom()
        {
            string matricula = Program.matricula;
            string operador = Program.colaborador.Nome_Colaborador;

            string comando = "SELECT TOP (1) tbl_Vendas.ID_Venda as ID, (SELECT SUM (Quantidade) FROM tbl_ProdutosVendidos WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda) as quantidade_produtos, (SELECT Nome_Cliente FROM tbl_Clientes WHERE tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente) AS cliente, STUFF ((SELECT DISTINCT '/' + Forma_Pagamento FROM tbl_PagamentosRecebidos WHERE tbl_Vendas.ID_Venda = tbl_PagamentosRecebidos.ID_Venda FOR XML PATH('')), 1,1,'') AS forma_pagamento, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_PagamentosRecebidos.ID_Venda = tbl_Vendas.ID_Venda) AS valor_a_pagar, (SELECT SUM(Valor_Pagamento + Troco) FROM tbl_PagamentosRecebidos WHERE tbl_PagamentosRecebidos.ID_Venda = tbl_Vendas.ID_Venda) AS valor_pago, (SELECT SUM(tbl_ProdutosVendidos.Preco_Vendido + tbl_ProdutosVendidos.Desconto) FROM tbl_ProdutosVendidos WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda)  + ISNULL((SELECT Valor FROM tbl_Entregas WHERE ID_Venda = tbl_Vendas.ID_Venda), 0) AS valor_total, SUM(Desconto) AS desconto, (SELECT SUM(Troco) FROM tbl_PagamentosRecebidos WHERE tbl_PagamentosRecebidos.ID_Venda = tbl_Vendas.ID_Venda) AS troco, (SELECT SUM(Juros) FROM tbl_PagamentosRecebidos WHERE tbl_PagamentosRecebidos.ID_Venda = tbl_Vendas.ID_Venda) AS Juros FROM tbl_Vendas INNER JOIN tbl_Clientes ON tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente WHERE tbl_Vendas.ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) GROUP BY tbl_Vendas.ID_Venda, tbl_Vendas.ID_Cliente ORDER BY ID_Venda DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            SqlDataReader leitor = select.ExecuteReader();

            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();
            int id = 0;
            int quantidade_produtos = 0;
            decimal valor_total = 0;
            decimal valor_a_pagar = 0;
            decimal valor_pago = 0;
            decimal troco = 0;
            decimal desconto = 0;
            decimal juros = 0;
            string forma_pagamento = string.Empty;
            string cliente = string.Empty;

            while (leitor.Read())
            {
                id = Convert.ToInt32(leitor[0]);
                quantidade_produtos = Convert.ToInt32(leitor[1]);
                cliente = leitor[2].ToString();
                forma_pagamento = leitor[3].ToString();
                valor_a_pagar = Convert.ToDecimal(leitor[4]);
                valor_pago = Convert.ToDecimal(leitor[5]);
                valor_total = Convert.ToDecimal(leitor[6]);
                desconto = Convert.ToDecimal(leitor[7]);
                troco = Convert.ToDecimal(leitor[8]);
                try { juros = Convert.ToDecimal(leitor[9]); } catch { }
            }
            leitor.Close();
            conexao.Desconectar();

            formRelatorioCupomVenda relatorio = new formRelatorioCupomVenda();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("cliente", cliente));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("id", id.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("quantidade_produtos", quantidade_produtos.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("valor_total", valor_total.ToString("F")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("valor_a_pagar", valor_a_pagar.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("valor_pago", valor_pago.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("troco", troco.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("juros", juros.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("desconto", desconto.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("forma_pagamento", forma_pagamento.ToString()));


            using (bd_MarbaConnection marba = new bd_MarbaConnection())
            {
                relatorio.PreencherCupomVendas_ResultBindingSource.DataSource = marba.PreencherCupomVendas(matricula).ToList();
            }
            relatorio.reportViewer1.RefreshReport();
            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_Termica;
            autoprintme.Print();
        }
        public void ImprimirCupomRetirada()
        {
            string matricula = Program.colaborador.Matricula;
            string operador = Program.colaborador.Nome_Colaborador;

            string comando = "SELECT top (1) (SELECT TOP (1) ID_Retirada FROM tbl_Retiradas WHERE ID_Venda = (SELECT TOP (1) tbl_Vendas.ID_Venda FROM tbl_Vendas WHERE tbl_Vendas.ID_Venda = tbl_Retiradas.ID_Venda) ORDER BY ID_Retirada DESC) AS id, (SELECT Nome_Cliente FROM tbl_Clientes WHERE tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente) AS cliente, (SELECT Data FROM tbl_Retiradas WHERE tbl_Vendas.ID_Venda = tbl_Retiradas.ID_Venda) AS agendamento FROM tbl_Retiradas INNER JOIN tbl_Vendas ON tbl_Retiradas.ID_Venda = tbl_Vendas.ID_Venda INNER JOIN tbl_Clientes ON tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente	WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Retirada DESC";

            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();
            decimal prazo = ObterValorDoParametro("Prazo de Retirada");
            string validade = DateTime.Now.AddDays(Convert.ToInt32(prazo)).ToShortDateString();
            int id = 0;
            string cliente = string.Empty;
            string agendamento = string.Empty;

            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                id = Convert.ToInt32(leitor[0]);
                cliente = leitor[1].ToString();
                agendamento = Convert.ToDateTime(leitor[2]).ToShortDateString();
            }
            leitor.Close();
            conexao.Desconectar();

            formRelatorioCupomRetirada relatorio = new formRelatorioCupomRetirada();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("cliente", cliente));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("id", id.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("validade", validade));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("agendamento", agendamento));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("prazo", prazo.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("code128", ConverterStringParaCod128(id.ToString())));
            relatorio.PreencherCupomRetiradaTableAdapter.Fill(relatorio.bd_MarbaDataSet4.PreencherCupomRetirada, matricula);
            relatorio.reportViewer1.RefreshReport();
            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_Termica;

            for (int i = 0; i < 2; i++)
            {
                autoprintme.Print();
            }
        }
        public void ImprimirCupomReserva()
        {
            string operador = Program.colaborador.Nome_Colaborador;
            string matricula = Program.matricula;
            string comando = "SELECT TOP (1) ID_Reserva, (SELECT Nome_Cliente FROM tbl_Clientes WHERE tbl_Reservas.ID_Cliente = tbl_Clientes.ID_Cliente) AS Cliente, Validade FROM tbl_Reservas ORDER BY ID_Reserva DESC";

            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();
            decimal prazo = ObterValorDoParametro("Prazo de Reserva");
            string validade = DateTime.Now.AddDays(Convert.ToInt32(prazo)).ToShortDateString();
            int id = 0;
            string cliente = string.Empty;

            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                id = Convert.ToInt32(leitor[0]);
                cliente = leitor[1].ToString();
            }
            leitor.Close();
            conexao.Desconectar();

            formRepCupomReserva relatorio = new formRepCupomReserva();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("cliente", cliente));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("id", id.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("code128", ConverterStringParaCod128(id.ToString())));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("validade", validade));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("prazo", prazo.ToString()));
            using (bd_MarbaEntitiesReservas marba = new bd_MarbaEntitiesReservas())
            {
                relatorio.PreencherCupomReserva_ResultBindingSource.DataSource = marba.PreencherCupomReserva(matricula).ToList();
            }
            relatorio.reportViewer1.RefreshReport();
            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_Termica;

            for (int i = 0; i < 2; i++)
            {
                autoprintme.Print();
            }
        }
        public void ImprimirCupomEntrega()
        {
            string matricula = Program.matricula;
            string operador = Program.colaborador.Nome_Colaborador;
            string comando = "SELECT top (1) (SELECT TOP (1) ID_Entrega FROM tbl_Entregas WHERE ID_Venda = (SELECT TOP (1) tbl_Vendas.ID_Venda FROM tbl_Vendas WHERE tbl_Vendas.ID_Venda = tbl_Entregas.ID_Venda) ORDER BY ID_Entrega DESC) AS id, (SELECT Nome_Cliente FROM tbl_Clientes WHERE tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente) AS cliente FROM tbl_Entregas INNER JOIN tbl_Vendas ON tbl_Entregas.ID_Venda = tbl_Vendas.ID_Venda INNER JOIN tbl_Clientes ON tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Entrega DESC";

            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();
            decimal prazo = ObterValorDoParametro("Prazo de Entrega");
            string agendamento = DateTime.Now.AddDays(Convert.ToInt32(prazo)).ToShortDateString();
            int id = 0;
            string cliente = string.Empty;

            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                id = Convert.ToInt32(leitor[0]);
                cliente = leitor[1].ToString();
            }
            leitor.Close();
            conexao.Desconectar();

            formRelatorioCupomEntrega relatorio = new formRelatorioCupomEntrega();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("cliente", cliente));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("id", id.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("agendamento", agendamento));
            relatorio.PreencherCupomEntregasTableAdapter.Fill(relatorio.bd_MarbaDataSetEntregas.PreencherCupomEntregas, matricula);
            relatorio.reportViewer1.RefreshReport();
            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_Termica;

            for (int i = 0; i < 2; i++)
            {
                autoprintme.Print();
            }
        }
        public void ImprimirCupomMovimentacao(string valor, string movimentacao)
        {
            string operador = Program.colaborador.Nome_Colaborador;
            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();
            formRelatorioCupomMovimentacoes relatorio = new formRelatorioCupomMovimentacoes();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("valor", valor));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("movimentacao", movimentacao));
            relatorio.reportViewer1.RefreshReport();
            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_Termica;
            autoprintme.Print();
        }
        public void ImprimirCupomRelatorioDeVendas(bool imprimir)
        {
            string matricula = Program.matricula; string operador = Program.colaborador.Nome_Colaborador;

            string comando = "SELECT ID_Caixa, (SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_MovimentacoesCaixa.ID_Caixa AND Tipo_Movimentacao = 'Sangria') AS Sangria, (SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_MovimentacoesCaixa.ID_Caixa AND Tipo_Movimentacao = 'Suprimento') AS Suprimento, (SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_MovimentacoesCaixa.ID_Caixa AND Tipo_Movimentacao = 'Sobrando') AS Sobrando, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'DINHEIRO') AS Dinheiro, (SELECT SUM(Troco) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa) AS Troco, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'DÉBITO') AS Débito, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'CRÉDITO') AS Crédito, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'PICPAY') AS TEF, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'TRANSFERÊNCIA') AS Transferência, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'VALE-TROCA') AS Vale, (SELECT SUM (Valor_Venda) FROM tbl_Vendas WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_Vendas.ID_Caixa) AS 'Total Venda', (SELECT SUM (Valor_Custo) FROM tbl_Vendas WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_Vendas.ID_Caixa) AS 'Total Custo', (SELECT SUM (Desconto) FROM tbl_Vendas WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_Vendas.ID_Caixa) AS Desconto, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE tbl_CaixasAnteriores.ID_Caixa = tbl_PagamentosRecebidos.ID_Caixa AND Forma_Pagamento = 'PIX') AS PIX FROM tbl_CaixasAnteriores WHERE tbl_CaixasAnteriores.ID_Caixa = (SELECT ID_Caixa FROM tbl_CaixasAnteriores WHERE ID_Colaborador = (SELECT ID_Colaborador from tbl_Colaboradores WHERE Matricula = @matricula) AND Status = 'Aberto')";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            SqlDataReader leitor = select.ExecuteReader();
            decimal sangria = 0;
            decimal suprimento = 0;
            decimal sobrando = 0;
            decimal dinheiro = 0;
            decimal troco = 0;
            decimal debito = 0;
            decimal credito = 0;
            decimal picpay = 0;
            decimal transferencia = 0;
            decimal vale = 0;
            decimal total_venda = 0;
            decimal total_custo = 0;
            decimal desconto = 0;
            decimal pix = 0;

            while (leitor.Read())
            {
                try
                {
                    sangria = Convert.ToDecimal(leitor[1]);
                }
                catch { }

                try
                {
                    suprimento = Convert.ToDecimal(leitor[2]);
                }
                catch { }

                try
                {
                    sobrando = Convert.ToDecimal(leitor[3]);
                }
                catch { }
                try
                {
                    dinheiro = Convert.ToDecimal(leitor[4]);
                }
                catch { }
                try
                {
                    troco = Convert.ToDecimal(leitor[5]);
                }
                catch { }

                try
                {
                    debito = Convert.ToDecimal(leitor[6]);
                }
                catch { }

                try
                {
                    credito = Convert.ToDecimal(leitor[7]);
                }
                catch { }

                try
                {
                    picpay = Convert.ToDecimal(leitor[8]);
                }
                catch { }

                try
                {
                    transferencia = Convert.ToDecimal(leitor[9]);
                }
                catch { }

                try
                {
                    vale = Convert.ToDecimal(leitor[10]);
                }
                catch { }

                try
                {
                    total_venda = Convert.ToDecimal(leitor[11]);
                }
                catch { }

                try
                {
                    total_custo = Convert.ToDecimal(leitor[12]);
                }
                catch { }

                try
                {
                    desconto = Convert.ToDecimal(leitor[13]);
                }
                catch { }

                try
                {
                    pix = Convert.ToDecimal(leitor[14]);
                }
                catch { }
            }
            leitor.Close();
            conexao.Desconectar();

            string data = DateTime.Now.ToShortDateString();
            string hora = DateTime.Now.ToShortTimeString();
            formRepCupomCaixaAtual relatorio = new formRepCupomCaixaAtual();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("sangria", sangria.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("suprimento", suprimento.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("sobrando", sobrando.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("dinheiro", dinheiro.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("debito", debito.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("credito", credito.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("picpay", picpay.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("vale", vale.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("venda", total_venda.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("desconto", desconto.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("pix", pix.ToString("C")));
            relatorio.reportViewer1.RefreshReport();

            if (imprimir)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_Termica;
                autoprintme.Print();
            }
            else
            {
                relatorio.ShowDialog();
            }
        }
        public void ImprimirCuponsAnteriores(int id)
        {
            string comando = "SELECT (SELECT SUM (Quantidade) FROM tbl_ProdutosVendidos WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda) as quantidade_produtos, (SELECT Nome_Cliente FROM tbl_Clientes WHERE tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente) AS cliente, STUFF((SELECT DISTINCT '/' + Forma_Pagamento FROM tbl_PagamentosRecebidos WHERE tbl_Vendas.ID_Venda = tbl_PagamentosRecebidos.ID_Venda FOR XML PATH('')), 1,1,'') AS forma_pagamento,(SELECT SUM(Preco_Vendido) FROM tbl_ProdutosVendidos WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda) AS valor_a_pagar, (SELECT SUM(Valor_Pagamento + Troco) FROM tbl_PagamentosRecebidos WHERE tbl_PagamentosRecebidos.ID_Venda = tbl_Vendas.ID_Venda) AS valor_pago,(SELECT SUM(tbl_ProdutosVendidos.Preco_Vendido + tbl_ProdutosVendidos.Desconto) FROM tbl_ProdutosVendidos WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda) AS valor_total, SUM(Desconto) AS desconto, (SELECT SUM(Troco) FROM tbl_PagamentosRecebidos WHERE tbl_PagamentosRecebidos.ID_Venda = tbl_Vendas.ID_Venda) AS troco, Data_Venda, (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Vendas.ID_Colaborador), (SELECT SUM(Juros) FROM tbl_PagamentosRecebidos WHERE tbl_PagamentosRecebidos.ID_Venda = tbl_Vendas.ID_Venda) AS Juros FROM tbl_Vendas INNER JOIN tbl_Clientes ON tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente WHERE tbl_Vendas.ID_Venda = @id GROUP BY tbl_Vendas.ID_Venda, tbl_Vendas.ID_Cliente, Data_Venda, ID_Colaborador ORDER BY ID_Venda DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            SqlDataReader leitor = select.ExecuteReader();

            int quantidade_produtos = 0;
            decimal valor_total = 0;
            decimal valor_a_pagar = 0;
            decimal valor_pago = 0;
            decimal troco = 0;
            decimal desconto = 0;
            string forma_pagamento = string.Empty;
            string cliente = string.Empty;
            string data = string.Empty;
            string hora = string.Empty;
            string operador = string.Empty;
            decimal juros = 0;

            while (leitor.Read())
            {
                quantidade_produtos = Convert.ToInt32(leitor[0]);
                cliente = leitor[1].ToString();
                forma_pagamento = leitor[2].ToString();
                valor_a_pagar = Convert.ToDecimal(leitor[3]);
                valor_pago = Convert.ToDecimal(leitor[4]);
                valor_total = Convert.ToDecimal(leitor[5]);
                desconto = Convert.ToDecimal(leitor[6]);
                troco = Convert.ToDecimal(leitor[7]);
                data = Convert.ToDateTime(leitor[8].ToString()).ToShortDateString();
                hora = Convert.ToDateTime(leitor[8].ToString()).ToShortTimeString();
                operador = leitor[9].ToString();
                try { juros = Convert.ToDecimal(leitor[10]); } catch { }
            }
            leitor.Close();
            conexao.Desconectar();

            formRepCuponsAnteriores relatorio = new formRepCuponsAnteriores();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("id", id.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", operador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("cliente", cliente));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("quantidade_produtos", quantidade_produtos.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("valor_total", valor_total.ToString("F")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("valor_a_pagar", valor_a_pagar.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("valor_pago", valor_pago.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("troco", troco.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("juros", juros.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("desconto", desconto.ToString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("forma_pagamento", forma_pagamento.ToString()));
            relatorio.PreencherCuponsAnterioresTableAdapter.Fill(relatorio.dataSetCuponsAnteriores.PreencherCuponsAnteriores, id);
            relatorio.reportViewer1.RefreshReport();
            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_Termica;
            autoprintme.Print();
        }
        public void ImprimirComprovanteDePagamento(Pagamento Pagamento)
        {
            string forma = Pagamento.Forma;
            string valor = (Pagamento.Valor + Pagamento.Juros).ToString("C");
            string data = DateTime.Now.ToShortDateString(), hora = DateTime.Now.ToShortTimeString();

            string comando = "SELECT TOP(1) ID_Venda FROM tbl_Vendas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_Venda DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", Program.matricula);
            string id = select.ExecuteScalar().ToString();
            conexao.Desconectar();

            formRepComprovanteDePagamento relatorio = new formRepComprovanteDePagamento();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operador", Program.colaborador.Nome_Colaborador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("matricula", Program.matricula));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("forma", forma));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("hora", hora));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("id", id));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("valor", valor));

            relatorio.reportViewer1.RefreshReport();

            AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
            autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_Termica;
            autoprintme.Print();
        }
        #endregion

        #region Reservas
        public void PreencherDataGridReservas(DataGridView dataGrid, BindingSource bindingSource)
        {
            string comando = "SELECT ID_Reserva, tbl_Clientes.CPF_Cliente AS CPF, tbl_Clientes.Nome_Cliente AS Cliente, Data, Validade, Status  FROM tbl_Reservas INNER JOIN tbl_Clientes ON tbl_Reservas.ID_Cliente = tbl_Clientes.ID_Cliente WHERE Status = @status";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@status", "Pendente");
            SqlDataReader leitor = select.ExecuteReader();
            List<Reserva> Reservas = new List<Reserva>();

            while (leitor.Read())
            {
                int id = Convert.ToInt32(leitor[0]);
                string cpf = leitor[1].ToString();
                string nome = leitor[2].ToString();
                string data;
                string validade;
                try
                {
                    data = Convert.ToDateTime(leitor[3]).ToShortDateString();
                }
                catch { data = string.Empty; }
                try
                {
                    validade = Convert.ToDateTime(leitor[4]).ToShortDateString();
                }
                catch { validade = string.Empty; }

                string status = leitor[5].ToString();
                Reservas.Add(new Reserva
                {
                    ID = id,
                    CPF = cpf,
                    Cliente = nome,
                    Data = data,
                    Validade = validade,
                    Status = status
                });
            }
            leitor.Close();

            bindingSource.DataSource = Reservas;
            dataGrid.DataSource = bindingSource;
            conexao.Desconectar();
        }
        public string TrazerInformacoesDoClienteParaReserva(int id_reserva)
        {
            string dados = string.Empty;
            string comando = "SELECT tbl_Clientes.Nome_Cliente, tbl_Clientes.CPF_Cliente, tbl_Clientes.Tabela FROM tbl_Reservas INNER JOIN tbl_Clientes on tbl_Clientes.ID_Cliente = tbl_Reservas.ID_Cliente WHERE ID_Reserva = @id_reserva";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_reserva", id_reserva);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                dados = leitor[0].ToString() + ";" + leitor[1].ToString() + ";" + leitor[2].ToString();
            }
            leitor.Close();
            conexao.Desconectar();
            return dados;
        }
        public void AlterarStatusDaReserva(int id_reserva)
        {
            string comando = "UPDATE tbl_Reservas SET Status = @status WHERE ID_Reserva = @id_reserva";
            string status = "Concluído";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@status", status);
            update.Parameters.AddWithValue("@id_reserva", id_reserva);
            update.ExecuteNonQuery();
        }
        public List<ProdutoVenda> TrazerProdutosReservados(int id_reserva)
        {
            List<ProdutoVenda> lista = new List<ProdutoVenda>();
            string comando = "select tbl_Produtos.Nome_Produto, tbl_Produtos.Preco_Venda, tbl_Produtos.ID_Produto FROM tbl_ProdutosReserva INNER JOIN tbl_Produtos ON tbl_Produtos.ID_Produto = tbl_ProdutosReserva.ID_Produto WHERE ID_Reserva = @id_reserva";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_reserva", id_reserva);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(new ProdutoVenda()
                {
                    Produto = leitor[0].ToString(),
                    Preco = Convert.ToDecimal(leitor[1]),
                    ID_Produto = Convert.ToInt32(leitor[2])
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }
        public bool VerificarIdReserva(int id_reserva)
        {
            bool avancar;
            string comando = "SELECT Validade FROM tbl_Reservas WHERE ID_Reserva = @id_reserva AND Status = @status";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_reserva", id_reserva);
            select.Parameters.AddWithValue("@status", "Pendente");

            if (Convert.ToString(select.ExecuteScalar()) == string.Empty)
            {
                MessageBox.Show("Número da Reserva inválido!", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                avancar = false;
            }
            else
            {
                DateTime validade = Convert.ToDateTime(select.ExecuteScalar());
                DateTime hoje = DateTime.Now;

                int intervalo = validade.Subtract(hoje).Days;
                if (intervalo < 0)
                {
                    MessageBox.Show("O prazo da Reserva expirou!\r\nOs produtos foram devolvidos ao estoque.", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    avancar = false;
                }
                else
                {
                    avancar = true;
                }
            }
            conexao.Desconectar();
            return avancar;
        }
        #endregion

        #region Retiradas
        public bool VerificarIdRetirada(int id_retirada)
        {
            bool permitir;
            string comando = "SELECT Validade FROM tbl_Retiradas WHERE ID_Retirada = @id_retirada AND Status = @status";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_retirada", id_retirada);
            select.Parameters.AddWithValue("@status", "Pendente");

            if (Convert.ToString(select.ExecuteScalar()) == string.Empty)
            {
                MessageBox.Show("Número da Retirada inválido!", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                permitir = false;
            }
            else
            {
                permitir = true;
                DateTime validade = Convert.ToDateTime(select.ExecuteScalar());
                DateTime hoje = DateTime.Now;

                int intervalo = validade.Subtract(hoje).Days;
                if (intervalo < 0)
                {
                    MessageBox.Show("O prazo combinado com o cliente expirou!\r\nInforme ao cliente que suas mercadorias serão liberadas,\r\nmas, caso o sistema identifique dois atrasos\r\ndo mesmo cliente, o serviço não será mais concedido.", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            conexao.Desconectar();
            return permitir;
        }
        public void RegistrarRetirada(string operador, int id_retirada)
        {
            string comando = "UPDATE tbl_Retiradas SET Status = 'Concluído', Responsavel = @operador WHERE ID_Retirada = @id_retirada";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_retirada", id_retirada);
            update.Parameters.AddWithValue("@operador", operador);
            update.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Retirada realizada com sucesso!\r\nOs produtos relacionados a esta compra constam como entregues.\r\nUtilize o carimbo 'Entregue' antes de entregar a nota fiscal ao cliente", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public void PreencherDataGridRetiradas(DataGridView dataGrid, BindingSource bindingSource)
        {
            string comando = "SELECT ID_Retirada, tbl_Clientes.CPF_Cliente AS CPF, tbl_Clientes.Nome_Cliente AS Cliente, tbl_Vendas.Valor_Venda AS Valor, tbl_Retiradas.Data, tbl_Retiradas.Validade, tbl_Retiradas.Status FROM tbl_Retiradas INNER JOIN tbl_Vendas ON tbl_Vendas.ID_Venda = tbl_Retiradas.ID_Venda INNER JOIN tbl_Clientes ON tbl_Vendas.ID_Cliente = tbl_Clientes.ID_Cliente WHERE Status = @status";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@status", "Pendente");
            SqlDataReader leitor = select.ExecuteReader();

            List<Retirada> Retiradas = new List<Retirada>();

            while (leitor.Read())
            {
                int id = Convert.ToInt32(leitor[0]);
                string cpf = leitor[1].ToString();
                string nome = leitor[2].ToString();
                decimal valor = Convert.ToDecimal(leitor[3]);
                string data;
                string validade;
                try
                {
                    data = Convert.ToDateTime(leitor[4]).ToShortDateString();
                }
                catch
                {
                    data = string.Empty;
                }
                try
                {
                    validade = Convert.ToDateTime(leitor[5]).ToShortDateString();
                }
                catch { validade = string.Empty; }
                string status = leitor[6].ToString();

                Retiradas.Add(new Retirada
                {
                    ID = id,
                    CPF = cpf,
                    Cliente = nome,
                    Valor = valor,
                    Data = data,
                    Validade = validade,
                    Status = status
                });
            }
            leitor.Close();

            bindingSource.DataSource = Retiradas;
            dataGrid.DataSource = bindingSource;

            conexao.Desconectar();
        }
        public void PreencherDataGridHistoricoRetiradas(BindingSource binding, DataGridView dataGrid)
        {
            string comando = "SELECT ID_Retirada AS Id, tbl_Clientes.CPF_Cliente AS CPF, tbl_Vendas.Valor_Venda AS Valor, tbl_Retiradas.Validade, tbl_Retiradas.Status FROM tbl_Retiradas INNER JOIN tbl_Vendas ON tbl_Vendas.ID_Venda = tbl_Retiradas.ID_Venda INNER JOIN tbl_Clientes ON tbl_Vendas.ID_Cliente = tbl_Clientes.ID_Cliente WHERE Status <> @status";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@status", "Pendente");

            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            binding.DataSource = dataSet;
            binding.DataMember = dataSet.Tables[0].TableName;
            dataGrid.DataSource = binding;
            conexao.Desconectar();

            //while (leitor.Read())
            //{
            //    int id = Convert.ToInt32(leitor[0]);
            //    string cpf = leitor[1].ToString();
            //    double valor = Convert.ToDouble(leitor[2]);
            //    string validade;
            //    try
            //    {
            //        validade = Convert.ToDateTime(leitor[3]).ToShortDateString();
            //    }
            //    catch { validade = string.Empty; }
            //    string status = leitor[4].ToString();
            //    dataGrid.Rows.Add(id, cpf, valor.ToString("F"), validade, status);
            //}
            //leitor.Close();
        }
        public SqlDataReader PreencherInformacoesDaRetirada(int id)
        {
            string comando = "SELECT Status, ID_Retirada, tbl_Retiradas.ID_Venda, (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Vendas.ID_Colaborador), tbl_Clientes.Nome_Cliente, CONVERT(DATE, tbl_Vendas.Data_Venda, 108), CONVERT(TIME, tbl_Vendas.Data_Venda, 108) FROM tbl_Retiradas INNER JOIN tbl_Vendas ON tbl_Vendas.ID_Venda = tbl_Retiradas.ID_Venda INNER JOIN tbl_Clientes ON tbl_Clientes.ID_Cliente = tbl_Vendas.ID_Cliente WHERE ID_Retirada = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            SqlDataReader leitor = select.ExecuteReader();
            return leitor;
        }
        public SqlDataReader PreencherDataGridDetalhesRetiradas(int id)
        {
            string comando = "SELECT DISTINCT tbl_Produtos.Nome_Produto AS Produto, SUM (Quantidade) AS Quantidade FROM tbl_ProdutosRetirada INNER JOIN tbl_Produtos ON tbl_Produtos.ID_Produto = tbl_ProdutosRetirada.ID_Produto  WHERE ID_Retirada = @id GROUP BY Nome_Produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            SqlDataReader leitor = select.ExecuteReader();
            return leitor;
        }
        #endregion

        #region Trocas
        public bool VerificarPrazoParaTroca(int id_venda)
        {
            bool avancar;
            string comando = "SELECT Data_Venda FROM tbl_Vendas WHERE ID_Venda = @id_venda";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_venda", id_venda);

            if (Convert.ToString(select.ExecuteScalar()) == string.Empty)
            {
                MessageBox.Show("Número da Venda inválido!", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                avancar = false;
            }
            else
            {
                DateTime data_venda = Convert.ToDateTime(select.ExecuteScalar());
                DateTime hoje = DateTime.Now;

                int intervalo = hoje.Subtract(data_venda).Days;
                decimal prazo = ObterValorDoParametro("Prazo para Troca");

                if (intervalo > prazo)
                {
                    MessageBox.Show("O prazo para troca expirou!", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    avancar = false;
                }
                else
                {
                    avancar = true;
                }
            }
            conexao.Desconectar();
            return avancar;
        }
        public void PreencherDataGridTrocas(int id_venda, DataGridView dataGrid)
        {
            List<Produto> lista = new List<Produto>();
            string comando = "SELECT ID_ProdutoVendido AS ID, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_ProdutosVendidos.ID_Produto)) AS Nome, Preco_Vendido AS Preco FROM tbl_ProdutosVendidos WHERE ID_Venda = @id_venda";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_venda", id_venda);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(new Produto()
                {
                    ID_Produto = Convert.ToInt32(leitor[0]),
                    Nome_Produto = leitor[1].ToString(),
                    //Preco = Convert.ToDecimal(leitor[2]),
                });
            }
            leitor.Close();
            conexao.Desconectar();

            foreach (Produto row in lista)
            {
                int id = row.ID_Produto;
                string comand = "SELECT ID_ProdutoVendido FROM tbl_ProdutosTrocados WHERE ID_ProdutoVendido = @id";
                SqlCommand select2 = new SqlCommand(comand, conexao.Conectar());
                select2.Parameters.AddWithValue("@id", id);
                //if (Convert.ToInt32(select2.ExecuteScalar()) > 0)
                //{
                //    row.Status = "Trocado";
                //}
                //else
                //{
                //    row.Status = "Vendido";
                //}
            }

            conexao.Desconectar();

            //foreach (Produto row in lista)
            //{
            //    int id_ProdutoVendido = row.ID_Produto;
            //    string produto = row.Nome_Produto;
            //    decimal preco = row.Preco;
            //    if (row.Status != "Trocado")
            //    {
            //        dataGrid.Rows.Add(id_ProdutoVendido, produto, preco.ToString("F"));
            //    }
            //}
        }
        public string PreencherDadosTroca(int id_venda)
        {
            string dados = string.Empty;
            string comando = "SELECT Data_Venda, tbl_Clientes.Nome_Cliente FROM tbl_Vendas INNER JOIN tbl_Clientes ON tbl_Vendas.ID_Cliente = tbl_Clientes.ID_Cliente WHERE ID_Venda = @id_venda";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_venda", id_venda);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                DateTime Data = Convert.ToDateTime(leitor[0]);
                string data = Data.ToShortDateString();
                dados = data + ";" + leitor[1].ToString();
            }
            leitor.Close();
            conexao.Desconectar();
            return dados;
        }
        public void PreencherDataGridProdutosTrocados(DataGridView dataGrid)
        {
            string status = "Devolvido";
            string comando = "SELECT ID_ProdutoTrocado AS ID, tbl_Produtos.Nome_Produto AS Produto, tbl_ProdutosTrocados.Status FROM tbl_ProdutosTrocados INNER JOIN tbl_ProdutosVendidos ON tbl_ProdutosVendidos.ID_ProdutoVendido = tbl_ProdutosTrocados.ID_ProdutoVendido INNER JOIN tbl_Produtos ON tbl_ProdutosVendidos.ID_Produto = tbl_Produtos.ID_Produto WHERE tbl_ProdutosTrocados.Status = @status";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@status", status);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                DataGridViewComboBoxColumn combo1 = new DataGridViewComboBoxColumn();
                //combo1.HeaderText = "Situação";
                //combo1.Items.Add("Devolvido");
                //combo1.Items.Add("Avaria");
                //combo1.Items.Add("Restituído");
                //dataGrid.Columns.Add(combo1);
                dataGrid.Rows.Add(leitor[0], leitor[1], leitor[2]);
            }
            leitor.Close();
            conexao.Desconectar();
        }
        public void AlterarStatusProdutosTrocados(DataGridView dataGrid)
        {
            foreach (DataGridViewRow row in dataGrid.Rows)
            {
                int id = Convert.ToInt32(dataGrid.Rows[row.Index].Cells[0].Value);
                string status = dataGrid.Rows[row.Index].Cells[2].Value.ToString();
                string comando = "UPDATE tbl_ProdutosTrocados SET Status = @status WHERE ID_ProdutoTrocado = @id";
                SqlCommand update = new SqlCommand(comando, conexao.Conectar());
                update.Parameters.AddWithValue("@status", status);
                update.Parameters.AddWithValue("@id", id);
                update.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Status do produto alterado com sucesso.\r\nConclua a atividade direcionando fisicamente\r\nos produtos.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public void RegistrarTroca(string valor, string operador, bool valetroca, int id_venda)
        {
            string data = DateTime.Now.ToShortDateString();
            string validade = DateTime.Now.AddDays(Convert.ToDouble(ObterValorDoParametro("Prazo para Troca"))).ToShortDateString();
            string status;
            if (valetroca)
            {
                status = "Pendente";
            }
            else
            {
                status = "Concluída";
            }
            string comando = "INSERT INTO tbl_Trocas (ID_Venda, Data, Validade, Status, Operador) VALUES (@id_venda, @data, @validade, @status, @operador)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@id_venda", id_venda);
            insert.Parameters.AddWithValue("@data", data);
            insert.Parameters.AddWithValue("@validade", validade);
            insert.Parameters.AddWithValue("@status", status);
            insert.Parameters.AddWithValue("@operador", operador);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            if (valetroca)
            {
                string comando1 = "SELECT TOP 1 (ID_Troca) FROM tbl_Trocas WHERE Operador = @operador ORDER BY ID_Troca DESC";
                SqlCommand select = new SqlCommand(comando1, conexao.Conectar());
                select.Parameters.AddWithValue("@operador", operador);

                int troca = Convert.ToInt32(select.ExecuteScalar());

                formRelatorioValeTroca relatorio = new formRelatorioValeTroca();
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("Valor", valor));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("Troca", troca.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("Data", data));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("Validade", validade));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("Operador", operador));
                relatorio.reportViewer1.RefreshReport();
                AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_Termica;
                autoprintme.Print();
            }

        }
        public void RegistrarProdutoTrocado(string operador, DataGridView dataGrid)
        {
            foreach (DataGridViewRow row in dataGrid.Rows)
            {
                if (Convert.ToBoolean(dataGrid.Rows[row.Index].Cells[3].Value))
                {
                    int id_ProdutoVendido = Convert.ToInt32(dataGrid.Rows[row.Index].Cells[0].Value);
                    decimal valor = Convert.ToDecimal(dataGrid.Rows[row.Index].Cells[2].Value);
                    string status = "Devolvido";
                    string comando = "INSERT INTO tbl_ProdutosTrocados (ID_Troca, ID_ProdutoVendido, Status, Valor) VALUES ((SELECT ID_Troca FROM tbl_Trocas WHERE ID_Troca = (SELECT TOP(1) ID_Troca FROM tbl_Trocas WHERE Operador = @operador ORDER BY ID_Troca DESC)), @id_ProdutoVendido, @status, @valor)";
                    SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                    insert.Parameters.AddWithValue("@operador", operador);
                    insert.Parameters.AddWithValue("@id_ProdutoVendido", id_ProdutoVendido);
                    insert.Parameters.AddWithValue("@status", status);
                    insert.Parameters.AddWithValue("@valor", valor);
                    insert.ExecuteNonQuery();
                }
            }
            conexao.Desconectar();
        }
        #endregion

        #region Simulação
        public decimal TaxaDeJurosDoCartao(string bandeira, int parcelas, string funcao)
        {
            string comando = "SELECT Juros FROM tbl_BandeirasCartoes WHERE Bandeira = @bandeira AND Vezes = @parcelas AND Funcao = @funcao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@bandeira", bandeira);
            select.Parameters.AddWithValue("@parcelas", parcelas);
            select.Parameters.AddWithValue("@funcao", funcao);
            decimal juros = Convert.ToDecimal(select.ExecuteScalar());
            return juros;
        }
        #endregion

        #region Entregas
        public void PreencherDataGridEntregas(DataGridView dataGrid)
        {
            string comando = "SELECT ID_Entrega, tbl_Clientes.Nome_Cliente AS Cliente, Pagamento, tbl_Vendas.Valor_Venda AS Valor, Previsao_Entrega AS Previsao, tbl_entregas.Bairro  FROM tbl_Entregas INNER JOIN tbl_Vendas ON tbl_Vendas.ID_Venda = tbl_Entregas.ID_Venda INNER JOIN tbl_Clientes ON tbl_Vendas.ID_Cliente = tbl_Clientes.ID_Cliente WHERE Status = @status";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@status", "Pendente");
            BindingSource binding = new BindingSource();
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            binding.DataSource = dataSet;
            binding.DataMember = dataSet.Tables[0].TableName;
            dataGrid.DataSource = binding;
            conexao.Desconectar();
        }
        public Entrega TrazerInformacoesDaEntrega(string cpf)
        {
            string comando = "SELECT Nome_Cliente, Endereco, Numero_Casa, Bairro, Ponto_Referencia FROM tbl_Clientes WHERE Cpf_Cliente = @cpf";
            Conexao conexao = new Conexao();
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@cpf", cpf);
            SqlDataReader leitor = select.ExecuteReader();
            Entrega Entrega = new Entrega();

            while (leitor.Read())
            {
                Entrega.Cliente = leitor["Nome_Cliente"].ToString();
                Entrega.Endereco = leitor["Endereco"].ToString();
                Entrega.Numero = leitor["Numero_Casa"].ToString();
                Entrega.Bairro = leitor["Bairro"].ToString();
                Entrega.Referencia = leitor["Ponto_Referencia"].ToString();
            }
            leitor.Close();
            conexao.Desconectar();

            return Entrega;
        }
        public List<string> CidadesDisponiveisParaEntrega()
        {
            string comando = "SELECT DISTINCT Cidade FROM tbl_BairrosEntrega";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            List<string> Cidades = new List<string>();
            while (leitor.Read())
            {
                Cidades.Add(leitor[0].ToString());
            }
            leitor.Close();
            conexao.Desconectar();

            return Cidades;
        }
        public List<string> BairrosDisponiveisParaEntrega(string cidade)
        {
            string comando = "SELECT Bairro FROM tbl_BairrosEntrega WHERE Cidade = @cidade";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@cidade", cidade);
            SqlDataReader leitor = select.ExecuteReader();
            List<string> Cidades = new List<string>();
            while (leitor.Read())
            {
                Cidades.Add(leitor[0].ToString());
            }
            leitor.Close();
            conexao.Desconectar();

            return Cidades;
        }
        public decimal TaxaDeEntregaPorBairro(string cidade, string bairro)
        {
            string comando = "SELECT Valor FROM tbl_BairrosEntrega WHERE Bairro = @bairro AND Cidade = @cidade";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@bairro", bairro);
            select.Parameters.AddWithValue("@cidade", cidade);
            decimal taxa;
            if (select.ExecuteScalar() == DBNull.Value) { taxa = 0; }
            else { taxa = Convert.ToDecimal(select.ExecuteScalar()); }

            conexao.Desconectar();
            return taxa;
        }
        #endregion

        #endregion

        #region Métodos do Formulário Promoções

        #region Tabelas
        public List<string> TrazerListaDeTabelas(bool verificar)
        {
            List<string> lista = new List<string>();
            if (!verificar)
            {
                lista.Add("");
            }
            SqlCommand comando = new SqlCommand("SELECT Nome_Tabela FROM tbl_Tabelas", conexao.Conectar());
            SqlDataReader leitor = comando.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public string TrazerPercentualDaTabela(string tabela)
        {
            string comando = "SELECT Porcentagem FROM tbl_Tabelas WHERE Nome_Tabela = @tabela";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@tabela", tabela);
            string porcentagem = select.ExecuteScalar().ToString() + "%";
            conexao.Desconectar();
            return porcentagem;
        }

        public void SalvarPercentuaisDasCategorias(int descontoGeral, string tabela, DataGridView dataGrid, double inicio, double termino)
        {
            List<Produto> lista = new List<Produto>();
            foreach (DataGridViewRow linha in dataGrid.Rows)
            {
                string categoria = dataGrid.Rows[linha.Index].Cells[0].Value.ToString();
                double desconto = Convert.ToDouble(dataGrid.Rows[linha.Index].Cells[1].Value);
                string select = "SELECT Nome_Produto, Preco_Venda FROM tbl_Produtos WHERE ID_Categoria = (SELECT ID_Categoria FROM tbl_Categorias WHERE Nome_Categoria = @categoria)";
                SqlCommand selecionarProdutos = new SqlCommand(select, conexao.Conectar());
                selecionarProdutos.Parameters.AddWithValue("@categoria", categoria);
                SqlDataReader leitor = selecionarProdutos.ExecuteReader();
                while (leitor.Read())
                {
                    lista.Add(new Produto()
                    {
                        //Nome_Produto = leitor["Nome_Produto"].ToString(),
                        //Preco_Venda = Convert.ToDecimal(leitor["Preco_Venda"])
                    });
                }
                leitor.Close();

                string update;
                string update1;
                string update2;
                int percentual = Convert.ToInt32(dataGrid.Rows[linha.Index].Cells[1].Value);
                if (tabela == string.Empty)
                {
                    MessageBox.Show("Selecione a tabela que deseja\r\naplicar alterações.", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                else
                {
                    if (tabela == "Cliente1")
                    {
                        update = "update tbl_Categorias SET Cliente1 = @cliente WHERE Nome_Categoria = @categoria";
                        update1 = "update tbl_Produtos SET Cliente1 = @venda WHERE Nome_Produto = @produto";
                        update2 = "UPDATE tbl_Tabelas SET Porcentagem = @desconto, Inicio = @inicio, Termino = @termino WHERE Nome_Tabela = @tabela";
                    }
                    else if (tabela == "Cliente2")
                    {
                        update = "update tbl_Categorias SET Cliente2 = @cliente WHERE Nome_Categoria = @categoria";
                        update1 = "update tbl_Produtos SET Cliente2 = @venda WHERE Nome_Produto = @produto";
                        update2 = "UPDATE tbl_Tabelas SET Porcentagem = @desconto, Inicio = @inicio, Termino = @termino WHERE Nome_Tabela = @tabela";
                    }
                    else if (tabela == "Cliente3")
                    {
                        update = "update tbl_Categorias SET Cliente3 = @cliente WHERE Nome_Categoria = @categoria";
                        update1 = "update tbl_Produtos SET Cliente3 = @venda WHERE Nome_Produto = @produto";
                        update2 = "UPDATE tbl_Tabelas SET Porcentagem = @desconto, Inicio = @inicio WHERE Nome_Tabela = @tabela";
                    }
                    else if (tabela == "Revendedor1")
                    {
                        update = "update tbl_Categorias SET Revendedor1 = @cliente WHERE Nome_Categoria = @categoria";
                        update1 = "update tbl_Produtos SET Revendedor1 = @venda WHERE Nome_Produto = @produto";
                        update2 = "UPDATE tbl_Tabelas SET Porcentagem = @desconto, Inicio = @inicio, Termino = @termino WHERE Nome_Tabela = @tabela";
                    }
                    else if (tabela == "Revendedor2")
                    {
                        update = "update tbl_Categorias SET Revendedor2 = @cliente WHERE Nome_Categoria = @categoria";
                        update1 = "update tbl_Produtos SET Revendedor2 = @venda WHERE Nome_Produto = @produto";
                        update2 = "UPDATE tbl_Tabelas SET Porcentagem = @desconto, Inicio = @inicio, Termino = @termino WHERE Nome_Tabela = @tabela";
                    }
                    else if (tabela == "Revendedor3")
                    {
                        update = "update tbl_Categorias SET Revendedor3 = @cliente WHERE Nome_Categoria = @categoria";
                        update1 = "update tbl_Produtos SET Revendedor3 = @venda WHERE Nome_Produto = @produto";
                        update2 = "UPDATE tbl_Tabelas SET Porcentagem = @desconto, Inicio = @inicio WHERE Nome_Tabela = @tabela";
                    }
                    else
                    {
                        update = "";
                        update1 = "";
                        update2 = "";
                    }

                    SqlCommand atualizarCategoria = new SqlCommand(update, conexao.Conectar());
                    atualizarCategoria.Parameters.AddWithValue("@cliente", desconto);
                    atualizarCategoria.Parameters.AddWithValue("@categoria", categoria);
                    atualizarCategoria.ExecuteNonQuery();

                    SqlCommand atualizarTabela = new SqlCommand(update2, conexao.Conectar());
                    atualizarTabela.Parameters.AddWithValue("@desconto", descontoGeral);
                    atualizarTabela.Parameters.AddWithValue("@tabela", tabela);
                    atualizarTabela.Parameters.AddWithValue("@inicio", inicio);
                    atualizarTabela.Parameters.AddWithValue("@termino", termino);
                    atualizarTabela.ExecuteNonQuery();

                    foreach (Produto produto in lista)
                    {
                        //string nome_produto = produto.Nome_Produto;
                        //double venda = Convert.ToDouble(produto.Preco_Venda);
                        //double nova_venda = venda - ((venda * desconto) / 100);
                        //SqlCommand atualizarVenda = new SqlCommand(update1, conexao.Conectar());
                        //atualizarVenda.Parameters.AddWithValue("@venda", nova_venda);
                        //atualizarVenda.Parameters.AddWithValue("@produto", nome_produto);
                        //atualizarVenda.ExecuteNonQuery();
                    }
                    lista.Clear();
                }
            }
            conexao.Desconectar();
            MessageBox.Show("Preços atualizados com sucesso!");
        }
        #endregion

        public void AdicionarPromocao(string nome, string inicio, string fim, List<Produto> lista)
        {
            string comando = "INSERT INTO tbl_Promocoes (Nome_Promocao, Data_Inicial, Data_Final) VALUES (@nome, @inicio, @fim)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@nome", nome);
            insert.Parameters.AddWithValue("@inicio", inicio);
            insert.Parameters.AddWithValue("@fim", fim);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            foreach (Produto row in lista)
            {
                string produto = row.Nome_Produto;
                //decimal preco = row.Preco_Promocao;
                string promocao = "Sim";

                string comando1 = "UPDATE tbl_Produtos SET Preco_Promocao = @preco, Promocao = @promocao WHERE Nome_Produto = @produto";
                SqlCommand update = new SqlCommand(comando1, conexao.Conectar());
                //update.Parameters.AddWithValue("@preco", preco);
                update.Parameters.AddWithValue("@promocao", promocao);
                update.Parameters.AddWithValue("@produto", produto);
                update.ExecuteNonQuery();

                string comando2 = "INSERT INTO tbl_ProdutosPromocao (ID_Promocao, ID_Produto) VALUES ((SELECT MAX(ID_Promocao) FROM tbl_Promocoes), (SELECT ID_Produto FROM tbl_Produtos WHERE Nome_Produto = @produto))";
                SqlCommand insert2 = new SqlCommand(comando2, conexao.Conectar());
                insert2.Parameters.AddWithValue("@produto", produto);
                insert2.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Promoção agendada com sucesso!");
        }

        public List<Combo> TrazerCombos()
        {
            List<Combo> combos = new List<Combo>();
            string comando = "SELECT ID_Combo, Nome_Promocao, Multiplicador, Preco_Combo, Data_Inicio, Data_Termino FROM tbl_Combos";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        combos.Add(new Combo
                        {
                            ID_Combo = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Multiplicador = Convert.ToInt32(leitor[2]),
                            Preco = Convert.ToDecimal(leitor[3]),
                            Inicio = Convert.ToDateTime(leitor[4]),
                            Termino = Convert.ToDateTime(leitor[5])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return combos;
        }

        public void AdicionarCombo(Combo combo, List<Catalogo> lista)
        {
            string comando = "INSERT INTO tbl_Combos (Nome_Promocao, Preco_Combo, Multiplicador, Data_Inicio, Data_Termino) VALUES (@combo, @preco, @quantidade, @inicio, @termino)";
            
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@combo", combo.Descricao);
                insert.Parameters.AddWithValue("@inicio", combo.Inicio);
                insert.Parameters.AddWithValue("@termino", combo.Termino);
                insert.Parameters.AddWithValue("@preco", combo.Preco);
                insert.Parameters.AddWithValue("@quantidade", combo.Multiplicador);
                insert.ExecuteNonQuery();
            }

            string comando2 = "INSERT INTO tbl_ProdutosCombo (ID_Combo, ID_Produto) VALUES ((SELECT TOP(1) ID_Combo FROM tbl_Combos ORDER BY ID_Combo DESC), (SELECT ID_ProdutoVariacao FROM tbl_Catalogo WHERE Nome = @nome))";

            foreach (Catalogo produto in lista)
            {
                string nome = produto.Nome;
                
                using (SqlCommand insert = new SqlCommand(comando2, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@nome", nome);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Combo cadastrado!");
        }

        public void ApagarCombo(int id_combo)
        {
            string comando = "DELETE FROM tbl_ProdutosCombo WHERE ID_Combo = @id_combo";
            string comando2 = "DELETE FROM tbl_Combos WHERE ID_Combo = @id_combo";


            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_combo", id_combo);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand(comando2, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_combo", id_combo);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("O combo foi excluído!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        #endregion

        #region Métodos do Formulário Financeiro

        #region Previsões de pagamento

        public List<string> TrazerListaDePrevisoes()
        {
            List<string> lista = new List<string>();
            lista.Add("");
            lista.Add("Imprevisto");

            SqlCommand select = new SqlCommand("SELECT (CONVERT(VARCHAR(15), convert(VARCHAR, Data, 103)) + ' - ' + Descricao) AS Descricao FROM tbl_Previsoes_de_Gastos WHERE Status = 'Pendente' ORDER BY Data ASC", conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public string TrazerPrevisoesDePagamento(string data)
        {
            string comando = "SELECT Descricao, Valor FROM tbl_Previsoes_de_Gastos WHERE Data = @data UNION SELECT Descricao + ' (' + Tipo + ')', Valor FROM tbl_Boletos WHERE Vencimento = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);

            SqlDataReader leitor = select.ExecuteReader();
            List<Previsao> lista = new List<Previsao>();

            while (leitor.Read())
            {
                lista.Add(new Previsao
                {
                    Descricao = leitor[0].ToString(),
                    Valor = Convert.ToDecimal(leitor[1])
                });
            }
            leitor.Close();
            conexao.Desconectar();

            int i = 0;
            string promocao = string.Empty;

            foreach (Previsao previsao in lista)
            {
                if (i == 0)
                {
                    promocao = previsao.Descricao + " - " + previsao.Valor.ToString("C");
                    i++;
                }
                else
                {
                    promocao = promocao + "\r\n" + previsao.Descricao + " - " + previsao.Valor.ToString("C");
                }
            }

            return promocao;
        }

        public List<Previsao> ListaDePrevisoesDePagamentos()
        {
            List<Previsao> Previsoes = new List<Previsao>();
            string comando = "SELECT 1 AS N, ID_Previsao, Descricao, Valor, Data, 'Previsão', Status FROM tbl_Previsoes_de_Gastos WHERE Data <= CONVERT(DATE, GETDATE()) AND Status = 'Pendente' UNION SELECT 1, ID_Boleto, Descricao, Valor, Vencimento, 'Boleto', Status FROM tbl_Boletos WHERE Vencimento <= CONVERT(DATE, GETDATE()) AND Status = 'Pendente' UNION SELECT 2, ID_Previsao, Descricao, Valor, Data, 'Previsão', Status FROM tbl_Previsoes_de_Gastos WHERE Data > CONVERT(DATE, GETDATE()) UNION SELECT 2, ID_Boleto, Descricao, Valor, Vencimento, 'Boleto', Status FROM tbl_Boletos WHERE Vencimento > CONVERT(DATE, GETDATE()) ORDER BY Data ASC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                int ID = Convert.ToInt32(leitor[1]);
                string descricao = leitor[2].ToString();
                decimal valor = Convert.ToDecimal(leitor[3]);
                string data = Convert.ToDateTime(leitor[4]).ToShortDateString();
                string tipo = leitor[5].ToString();
                string status = leitor[6].ToString();

                Previsoes.Add(new Previsao
                {
                    ID_Previsao = ID,
                    Descricao = descricao,
                    Valor = valor,
                    Data = data,
                    Tipo = tipo,
                    Status = status
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return Previsoes;
        }

        public decimal PagamentosDoDia(DateTime data)
        {
            string comando = "SELECT (SELECT ISNULL(SUM(Valor), 0) FROM tbl_Previsoes_de_Gastos WHERE Status = 'Pendente' AND Data = @data) + (SELECT ISNULL(SUM(Valor), 0) FROM tbl_Boletos WHERE Status = 'Pendente' AND Vencimento = @data)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal pagamentos = Convert.ToDecimal(select.ExecuteScalar());
            conexao.Desconectar();
            return pagamentos;
        }

        public string InformacoesDeTextoDoBoleto(int id)
        {
            string comando = "SELECT Tipo + ' ' + Parcela, Identificador, Numero FROM tbl_Boletos WHERE ID_Boleto = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            SqlDataReader leitor = select.ExecuteReader();
            string informacoes = string.Empty;

            while (leitor.Read())
            {
                informacoes = leitor[0].ToString();
                if (leitor[1].ToString() != string.Empty) { informacoes = informacoes + "\r\nId: " + leitor[1].ToString(); }
                else { informacoes = informacoes + "\r\nId: - - -"; }
                if (leitor[2].ToString() != string.Empty) { informacoes = informacoes + "\r\nN°:" + leitor[2].ToString(); }
                else { informacoes = informacoes + "\r\nN°: - - -"; }
            }

            conexao.Desconectar();
            return informacoes;
        }

        public string InformacoesDeTextoDoPagamento(int id)
        {
            string comando = "SELECT Tipo + ' ' + Parcela, Identificador, Numero FROM tbl_Boletos WHERE ID_Boleto = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            string informacoes = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return informacoes;
        }

        public bool VerificarSeHaBoletosAtrasados()
        {
            int boletos;
            string comando = "SELECT (SELECT ISNULL(COUNT(*), 0) FROM tbl_Boletos WHERE Vencimento <= CONVERT (DATE, GETDATE()) AND Status = 'Pendente') + (SELECT ISNULL(COUNT(*), 0) FROM tbl_Previsoes_de_Gastos WHERE Data <= CONVERT (DATE, GETDATE()) AND Status = 'Pendente')";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            boletos = Convert.ToInt32(select.ExecuteScalar());
            bool verificar;
            if (boletos > 0) { verificar = true; }
            else { verificar = false; }

            return verificar;
        }

        public List<Previsao> ListaDePagamentosAtrasados()
        {
            List<Previsao> Previsoes = new List<Previsao>();
            string comando = "SELECT 1 AS N, ID_Previsao, Descricao, Valor, Data, 'Previsão', Status FROM tbl_Previsoes_de_Gastos WHERE Data <= CONVERT(DATE, GETDATE()) AND Status = 'Pendente' UNION SELECT 1, ID_Boleto, Descricao, Valor, Vencimento, 'Boleto', Status FROM tbl_Boletos WHERE Vencimento <= CONVERT(DATE, GETDATE()) AND Status = 'Pendente' UNION SELECT 2, ID_Boleto, Descricao, Valor, Vencimento, 'Boleto', Status FROM tbl_Boletos WHERE Vencimento <= CONVERT(DATE, GETDATE()) AND Status = 'Pago' AND Vencimento >= DATEADD(MONTH, -2, GETDATE()) ORDER BY N, Data DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                int ID = Convert.ToInt32(leitor[1]);
                string descricao = leitor[2].ToString();
                decimal valor = Convert.ToDecimal(leitor[3]);
                string data = Convert.ToDateTime(leitor[4]).ToShortDateString();
                string tipo = leitor[5].ToString();
                string status = leitor[6].ToString();

                Previsoes.Add(new Previsao
                {
                    ID_Previsao = ID,
                    Descricao = descricao,
                    Valor = valor,
                    Data = data,
                    Tipo = tipo,
                    Status = status
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return Previsoes;
        }

        public void AdicionarPrevisao(Previsao previsao, bool atrasado)
        {
            string comando = "INSERT INTO tbl_Previsoes_de_Gastos (Descricao, Tipo_Despesa, Valor, Data, Status, ID_CatFin, Data_Registro) VALUES (@descricao, @tipo, @valor, @data, @status, @id_catfin, @data_reg)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@descricao", previsao.Descricao);
            insert.Parameters.AddWithValue("@tipo", previsao.Tipo);
            insert.Parameters.AddWithValue("@valor", previsao.Valor);
            insert.Parameters.AddWithValue("@data", previsao.Data);
            insert.Parameters.AddWithValue("@status", previsao.Status);
            insert.Parameters.AddWithValue("@id_catfin", previsao.ID_CatFin);
            insert.Parameters.AddWithValue("@data_reg", DateTime.Now.ToString());

            insert.ExecuteNonQuery();

            if (atrasado)
            {
                string comando1 = "INSERT INTO tbl_Atrasos (ID, Descricao) SELECT TOP (1) ID_Previsao, 'Previsão de Gasto' FROM tbl_Previsoes_de_Gastos ORDER BY ID_Previsao DESC";
                SqlCommand insert1 = new SqlCommand(comando1, conexao.Conectar());
                insert1.ExecuteNonQuery();
            }
            conexao.Desconectar();
            MessageBox.Show("Previsão de gasto registrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<Despesa> ListaDeDespesas()
        {
            List<Despesa> Despesas = new List<Despesa>();

            string comando = "SELECT 1, ID_Despesa, Descricao, Tipo_Despesa, Valor, Dia_do_Mes, Ultimo_Dia, Dia_Util, ISNULL((SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = tbl_Despesas.ID_Estabelecimento), 'EMPRESA') FROM tbl_Despesas WHERE Ultimo_Dia = 0  UNION SELECT 2, ID_Despesa, Descricao, Tipo_Despesa, Valor, Dia_do_Mes, Ultimo_Dia, Dia_Util, ISNULL((SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = tbl_Despesas.ID_Estabelecimento), 'EMPRESA') FROM tbl_Despesas WHERE Ultimo_Dia = 1";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                Despesas.Add(new Despesa
                {
                    ID_Despesa = Convert.ToInt32(leitor[1]),
                    Descricao = leitor[2].ToString(),
                    Tipo = leitor[3].ToString(),
                    Valor = Convert.ToDecimal(leitor[4]),
                    Dia = Convert.ToInt32(leitor[5]),
                    Ultimo_Dia = Convert.ToBoolean(leitor[6]),
                    Dia_Util = Convert.ToBoolean(leitor[7]),
                    Estabelecimento = leitor[8].ToString()
                });
            }
            leitor.Close();
            conexao.Desconectar();

            return Despesas;
        }

        public void ApagarDespesa(int id)
        {
            string comando = "DELETE FROM tbl_Despesas WHERE ID_Despesa = @id";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id", id);
            delete.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Despesa excluída!", "Excluído", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void RegistrarNovaDespesa(Despesa despesa)
        {
            string comando = "INSERT INTO tbl_Despesas (Descricao, Tipo_Despesa, Valor, Dia_do_Mes, Data_Registro, ID_CatFin, Dia_Util, Ultimo_Dia, Mesmo_Dia, Antes_do_Dia, Depois_do_Dia, ID_Estabelecimento) VALUES (@descricao, @tipo, @valor, @dia, @data, @id_catfin, @dia_util, @ultimo_dia, @mesmo_dia, @antes_do_dia, @depois_do_dia, (SELECT ID_Estabelecimento FROM tbl_Estabelecimentos WHERE Descricao = @estabelecimento))";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@descricao", despesa.Descricao);
            insert.Parameters.AddWithValue("@tipo", despesa.Tipo);
            insert.Parameters.AddWithValue("@valor", despesa.Valor);
            insert.Parameters.AddWithValue("@data", despesa.Data);
            insert.Parameters.AddWithValue("@dia", despesa.Dia);
            insert.Parameters.AddWithValue("@id_catfin", despesa.ID_CatFin);
            insert.Parameters.AddWithValue("@dia_util", despesa.Dia_Util);
            insert.Parameters.AddWithValue("@ultimo_dia", despesa.Ultimo_Dia);
            insert.Parameters.AddWithValue("@mesmo_dia", despesa.Mesmo_Dia);
            insert.Parameters.AddWithValue("@antes_do_dia", despesa.Antes_do_Dia);
            insert.Parameters.AddWithValue("@depois_do_dia", despesa.Depois_do_Dia);
            insert.Parameters.AddWithValue("@estabelecimento", despesa.Estabelecimento);
            insert.ExecuteNonQuery();
            MessageBox.Show("Despesa registrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public Despesa TrazerInformacoesDaDespesa(int id)
        {
            string comando = "SELECT Descricao, Tipo_Despesa, Valor, Dia_do_Mes, ID_CatFin, Dia_Util, Ultimo_Dia, Mesmo_Dia, Antes_do_Dia, Depois_do_Dia, (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = tbl_Despesas.ID_Estabelecimento) FROM tbl_Despesas WHERE ID_Despesa = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            SqlDataReader leitor = select.ExecuteReader();
            Despesa Despesa = new Despesa();

            while (leitor.Read())
            {
                Despesa = new Despesa
                {
                    Descricao = leitor[0].ToString(),
                    Tipo = leitor[1].ToString(),
                    Valor = Convert.ToDecimal(leitor[2]),
                    Dia = Convert.ToInt32(leitor[3]),
                    ID_CatFin = (int)leitor[4],
                    Dia_Util = Convert.ToBoolean(leitor[5]),
                    Ultimo_Dia = Convert.ToBoolean(leitor[6]),
                    Mesmo_Dia = Convert.ToBoolean(leitor[7]),
                    Antes_do_Dia = Convert.ToBoolean(leitor[8]),
                    Depois_do_Dia = Convert.ToBoolean(leitor[9]),
                    Estabelecimento = leitor[10].ToString()
                };
            }
            leitor.Close();

            conexao.Desconectar();

            return Despesa;
        }

        public void EditarDespesa(Despesa despesa)
        {
            string comando = "UPDATE tbl_Despesas SET Descricao = @descricao, Tipo_Despesa = @tipo, Valor = @valor, Dia_do_Mes = @dia, ID_CatFin = @id_catfin, Dia_Util = @dia_util, Ultimo_Dia = @ultimo_dia, Mesmo_Dia = @mesmo_dia, Antes_do_Dia = @antes_do_dia, Depois_do_Dia = @depois_do_dia, ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_Estabelecimentos WHERE Descricao = @estabelecimento) WHERE ID_Despesa = @id";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id", despesa.ID_Despesa);
            update.Parameters.AddWithValue("@descricao", despesa.Descricao);
            update.Parameters.AddWithValue("@tipo", despesa.Tipo);
            update.Parameters.AddWithValue("@valor", despesa.Valor);
            update.Parameters.AddWithValue("@dia", despesa.Dia);
            update.Parameters.AddWithValue("@id_catfin", despesa.ID_CatFin);
            update.Parameters.AddWithValue("@dia_util", despesa.Dia_Util);
            update.Parameters.AddWithValue("@ultimo_dia", despesa.Ultimo_Dia);
            update.Parameters.AddWithValue("@mesmo_dia", despesa.Mesmo_Dia);
            update.Parameters.AddWithValue("@antes_do_dia", despesa.Antes_do_Dia);
            update.Parameters.AddWithValue("@depois_do_dia", despesa.Depois_do_Dia);
            update.Parameters.AddWithValue("@estabelecimento", despesa.Estabelecimento);
            update.ExecuteNonQuery();

            MessageBox.Show("Despesa editada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<Boleto> ListaDeBoletos()
        {
            List<Boleto> Boletos = new List<Boleto>();
            string comando = "SELECT ID_Boleto, Descricao, Vencimento, Valor, Tipo, Beneficiario, Parcela FROM tbl_Boletos WHERE Status = 'Pendente' ORDER BY Vencimento";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                int id = Convert.ToInt32(leitor[0]);
                string descricao = leitor[1].ToString();
                string vencimento = Convert.ToDateTime(leitor[2]).ToShortDateString();
                decimal valor = Convert.ToDecimal(leitor[3]);
                string tipo = leitor[4].ToString();
                string fornecedor = leitor[5].ToString();
                string parcela = leitor[6].ToString();

                Boletos.Add(new Boleto
                {
                    ID_Boleto = id,
                    Descricao = descricao,
                    Vencimento = vencimento,
                    Valor = valor,
                    Tipo = tipo,
                    Fornecedor = fornecedor,
                    Parcela = parcela
                });
            }
            leitor.Close();

            conexao.Desconectar();
            return Boletos;
        }

        public Boleto InformacoesDoBoleto(int id)
        {
            string comando = "SELECT Descricao, Vencimento, Valor, Tipo, Beneficiario, Parcela FROM tbl_Boletos WHERE ID_Boleto = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            Boleto Boleto = new Boleto();

            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                Boleto.ID_Boleto = id;
                Boleto.Descricao = leitor[0].ToString();
                Boleto.Vencimento = leitor[1].ToString();
                Boleto.Valor = Convert.ToDecimal(leitor[2]);
                Boleto.Tipo = leitor[3].ToString();
                Boleto.Fornecedor = leitor[4].ToString();
                Boleto.Parcela = leitor[5].ToString();
            }
            leitor.Close();
            conexao.Desconectar();

            return Boleto;
        }

        public Previsao InformacoesDaPrevisao(int id)
        {
            string comando = "SELECT Descricao, Data_Registro, Valor FROM tbl_Previsoes_de_Gastos WHERE ID_Previsao = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            Previsao Previsao = new Previsao();

            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                Previsao.ID_Previsao = id;
                Previsao.Descricao = leitor[0].ToString();
                Previsao.Data = leitor[1].ToString();
                Previsao.Valor = Convert.ToDecimal(leitor[2]);
            }

            leitor.Close();
            conexao.Desconectar();

            return Previsao;
        }

        public void RegistrarBoleto(List<Boleto> lista)
        {
            foreach (Boleto boleto in lista)
            {
                string comando = "INSERT INTO tbl_Boletos (Descricao, Valor, Vencimento, ID_Pedido, Responsavel, Data_Registro, Status, Tipo, Numero, Beneficiario, Identificador, Parcela) VALUES (@descricao, @valor, @vencimento, @id_pedido, @operador, @data, @status, @tipo, @numero, @fornecedor, @identificador, @parcela)";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@descricao", boleto.Descricao);
                insert.Parameters.AddWithValue("@vencimento", boleto.Vencimento);
                insert.Parameters.AddWithValue("@valor", boleto.Valor);
                insert.Parameters.AddWithValue("@data", boleto.Data_Registro);
                insert.Parameters.AddWithValue("@id_pedido", boleto.ID_Pedido);
                insert.Parameters.AddWithValue("@operador", boleto.Responsavel);
                insert.Parameters.AddWithValue("@status", boleto.Status);
                insert.Parameters.AddWithValue("@tipo", boleto.Tipo);
                insert.Parameters.AddWithValue("@numero", boleto.Numero);
                insert.Parameters.AddWithValue("@fornecedor", boleto.Fornecedor);
                insert.Parameters.AddWithValue("@identificador", boleto.Identificador);
                insert.Parameters.AddWithValue("@parcela", boleto.Parcela);

                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();
            MessageBox.Show("Pagamento agendado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void RegistrarFaturaDoCartao(List<Cartao> lista)
        {
            foreach (Cartao cartao in lista)
            {
                string comando = "INSERT INTO tbl_Fatura (Descricao, Valor, Vencimento, ID_Cartao, Responsavel, Data_Registro, Status) VALUES(@descricao, @valor, @vencimento, (SELECT ID_Cartao FROM tbl_CartoesDeCredito WHERE Descricao = @cartao), @operador, @data, @status)";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@descricao", cartao.Descricao);
                insert.Parameters.AddWithValue("@vencimento", cartao.Vencimento);
                insert.Parameters.AddWithValue("@valor", cartao.Valor);
                insert.Parameters.AddWithValue("@data", cartao.Data_Registro);
                insert.Parameters.AddWithValue("@cartao", cartao.Nome_Cartao);
                insert.Parameters.AddWithValue("@operador", cartao.Responsavel);
                insert.Parameters.AddWithValue("@status", cartao.Status);

                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();
            MessageBox.Show("Boleto registrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void RegistrarOutrosPagamentosNoPrazo(Boleto boleto)
        {
            string comando = "INSERT INTO tbl_Boletos (Descricao, Valor, Vencimento, Responsavel, Data_Registro, Status, Tipo) VALUES (@descricao, @valor, @vencimento, @operador, @data, @status, @tipo)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@descricao", boleto.Descricao);
            insert.Parameters.AddWithValue("@vencimento", boleto.Vencimento);
            insert.Parameters.AddWithValue("@valor", boleto.Valor);
            insert.Parameters.AddWithValue("@data", boleto.Data_Registro);
            insert.Parameters.AddWithValue("@operador", boleto.Responsavel);
            insert.Parameters.AddWithValue("@status", boleto.Status);
            insert.Parameters.AddWithValue("@tipo", boleto.Tipo);

            insert.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Pagamento futuro registrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void RealizarPagamentoDeBoleto(Boleto boleto, int id_conta, string saldo, int id_catfin, DateTime data)
        {
            string comando1 = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, Saldo, ID_Conta, Registro, ID_Colaborador, Previsto) VALUES (@descricao, @valor, CONVERT (DATE, @data), @id_catfin, @saldo, @id_conta, GETDATE(), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 1)";
            SqlCommand insert = new SqlCommand(comando1, conexao.Conectar());
            insert.Parameters.AddWithValue("@descricao", boleto.Descricao);
            insert.Parameters.AddWithValue("@valor", -boleto.Valor);
            insert.Parameters.AddWithValue("@saldo", saldo);
            insert.Parameters.AddWithValue("@id_catfin", id_catfin);
            insert.Parameters.AddWithValue("@id_conta", id_conta);
            insert.Parameters.AddWithValue("@data", data);
            insert.Parameters.AddWithValue("@matricula", Program.matricula);
            insert.ExecuteNonQuery();

            string comando = "UPDATE tbl_Boletos SET Status = 'Pago', Data_Pagamento = GETDATE(), ID_MovimentacaoFin = (SELECT TOP(1) ID_Movimentacao FROM tbl_MovimentacoesFin ORDER BY ID_Movimentacao DESC) WHERE ID_Boleto = @id_boleto";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_boleto", boleto.ID_Boleto);
            update.ExecuteNonQuery();

            MessageBox.Show("Pagamento registrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void RealizarPagamentoPrevisto(Previsao previsao, int id_conta, string saldo, int id_catfin, DateTime data)
        {
            string comando1 = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, Saldo, ID_Conta, Registro, ID_Colaborador, Previsto) VALUES (@descricao, @valor, CONVERT (DATE, @data), @id_catfin, @saldo, @id_conta, GETDATE(), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 1)";

            using (SqlCommand insert = new SqlCommand(comando1, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", previsao.Descricao);
                insert.Parameters.AddWithValue("@valor", -previsao.Valor);
                insert.Parameters.AddWithValue("@saldo", saldo);
                insert.Parameters.AddWithValue("@id_catfin", id_catfin);
                insert.Parameters.AddWithValue("@id_conta", id_conta);
                insert.Parameters.AddWithValue("@data", data);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            string comando = "UPDATE tbl_Previsoes_de_Gastos SET Status = 'Pago', Data_Pagamento = GETDATE(), ID_MovimentacaoFin = (SELECT TOP(1) ID_Movimentacao FROM tbl_MovimentacoesFin ORDER BY ID_Movimentacao DESC) WHERE ID_Previsao = @id";
            
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id", previsao.ID_Previsao);
            update.ExecuteNonQuery();

            MessageBox.Show("Pagamento registrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarBoleto(int id)
        {
            string comando = "DELETE FROM tbl_Boletos WHERE ID_Boleto = @id";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id", id);
            delete.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void ApagarPrevisao(int id)
        {
            string comando = "DELETE FROM tbl_Previsoes_de_Gastos WHERE ID_Previsao = @id";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id", id);
            delete.ExecuteNonQuery();
            conexao.Desconectar();
        }

        #endregion

        #region Relatorio Financeiro Diário

        #region MarbaSoftware
        public bool VerificarVendasNoMarbaSoftware(DateTime data)
        {
            string comando = "SELECT ISNULL(CONVERT(VARCHAR(20), SUM(Valor_Venda)), 'Não') FROM tbl_Vendas WHERE CONVERT(DATE, Data_Venda) = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            bool verificar;
            if (select.ExecuteScalar().ToString() != "Não") { verificar = true; }
            else { verificar = false; }

            conexao.Desconectar();
            return verificar;
        }
        public decimal SaldoDoDia(DateTime data)
        {
            string comando = "SELECT ISNULL(SUM(Valor), 0) FROM tbl_MovimentacoesFin WHERE Data = CONVERT(DATE, @data)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal saldo = Convert.ToDecimal(select.ExecuteScalar());

            conexao.Desconectar();
            return saldo;
        }
        public decimal MetaDoDia(DateTime data)
        {
            decimal meta;
            string comando = "SELECT ISNULL(Meta, 0) FROM tbl_MetasDiarias WHERE Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            try { meta = Convert.ToDecimal(select.ExecuteScalar()); } catch { meta = 0; }
            return meta;
        }
        public Informacoes_Vendas VendasDoDia(DateTime data)
        {
            Informacoes_Vendas Vendas = new Informacoes_Vendas();
            string comando = "SELECT ISNULL((SELECT SUM(Quantidade) FROM tbl_ProdutosVendidos WHERE CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda)) = @data), 0) AS Produtos, ISNULL(COUNT(ID_Venda), 0) AS Vendas, ISNULL((SELECT SUM(Preco_Custo) FROM tbl_ProdutosVendidos WHERE CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda)) = @data), 0) AS CMV, ISNULL(SUM(Valor_Venda - Desconto), 0) AS Receita, ISNULL(SUM(Desconto), 0) AS Desconto, ISNULL((SELECT MAX(Valor_Venda) FROM tbl_Vendas WHERE CONVERT(DATE, Data_Venda) = @data), 0) AS Maior_Venda FROM tbl_Vendas WHERE CONVERT(DATE, Data_Venda) = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Vendas.Produtos_Vendidos = Convert.ToInt32(leitor[0]);
                Vendas.Qtd_Vendas = Convert.ToInt32(leitor[1]);
                Vendas.CMV = Convert.ToDecimal(leitor[2]);
                Vendas.Receita_Vendas = Convert.ToDecimal(leitor[3]);
                Vendas.Descontos = Convert.ToDecimal(leitor[4]);
                Vendas.Maior_Venda_Dia = Convert.ToDecimal(leitor[5]);
            }
            leitor.Close();
            conexao.Desconectar();

            Vendas.Lucro_Bruto = Vendas.Receita_Vendas - Vendas.CMV;
            try { Vendas.Ticket_Medio = Vendas.Receita_Vendas / Vendas.Qtd_Vendas; } catch { Vendas.Ticket_Medio = 0; }
            try { Vendas.Produtos_Por_Venda = Vendas.Produtos_Vendidos / Vendas.Qtd_Vendas; } catch { Vendas.Produtos_Por_Venda = 0; }
            try { Vendas.Preco_Por_Produto = Vendas.Receita_Vendas / Vendas.Produtos_Vendidos; } catch { Vendas.Preco_Por_Produto = 0; }
            try { Vendas.Margem_Lucro = Vendas.Lucro_Bruto / Vendas.Receita_Vendas * 100; } catch { Vendas.Margem_Lucro = 0; }

            return Vendas;
        }
        public Informacoes_Vendas VendasDoMes(DateTime data)
        {
            Informacoes_Vendas Vendas = new Informacoes_Vendas();
            string comando = "SELECT ISNULL((SELECT SUM(Quantidade) FROM tbl_ProdutosVendidos WHERE MONTH(CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda))) = MONTH(@data) AND YEAR(CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda))) = YEAR(@data) AND CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda)) <= @data), 0) AS Produtos, COUNT(ID_Venda) AS Vendas, ISNULL((SELECT SUM(Preco_Custo) FROM tbl_ProdutosVendidos WHERE MONTH(CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda))) = MONTH(@data) AND YEAR(CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda))) = YEAR(@data) AND CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda)) <= @data), 0) AS CMV, ISNULL(SUM(Valor_Venda), 0) AS Receita, ISNULL(SUM(Desconto), 0) AS Desconto, ISNULL((SELECT SUM(Juros) FROM tbl_PagamentosRecebidos WHERE MONTH(CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE tbl_PagamentosRecebidos.ID_Venda = tbl_Vendas.ID_Venda))) = MONTH(@data) AND YEAR(CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE tbl_PagamentosRecebidos.ID_Venda = tbl_Vendas.ID_Venda))) = YEAR(@data) AND CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE tbl_PagamentosRecebidos.ID_Venda = tbl_Vendas.ID_Venda)) <= @data), 0) AS Juros FROM tbl_Vendas WHERE MONTH(CONVERT(DATE, Data_Venda)) = MONTH(@data) AND YEAR(CONVERT(DATE, Data_Venda)) = YEAR(@data) AND CONVERT(DATE, Data_Venda) <= @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Vendas.Produtos_Vendidos = Convert.ToInt32(leitor[0]);
                Vendas.Qtd_Vendas = Convert.ToInt32(leitor[1]);
                Vendas.CMV = Convert.ToDecimal(leitor[2]);
                Vendas.Receita_Vendas = Convert.ToDecimal(leitor[3]);
                Vendas.Descontos = Convert.ToDecimal(leitor[4]);
            }
            leitor.Close();
            conexao.Desconectar();

            Vendas.Lucro_Bruto = Vendas.Receita_Vendas - Vendas.CMV;
            try 
            {
                Vendas.Ticket_Medio = Vendas.Receita_Vendas / Vendas.Qtd_Vendas;
            }
            catch { Vendas.Ticket_Medio = 0; }

            try
            {
                Vendas.Produtos_Por_Venda = Vendas.Produtos_Vendidos / Vendas.Qtd_Vendas;
            }
            catch { Vendas.Produtos_Por_Venda = 0; }

            try
            {
                Vendas.Preco_Por_Produto = Vendas.Receita_Vendas / Vendas.Produtos_Vendidos;
            }
            catch { Vendas.Preco_Por_Produto = 0; }

            try
            {
                Vendas.Margem_Lucro = Vendas.Lucro_Bruto / Vendas.Receita_Vendas * 100;
            }
            catch { Vendas.Margem_Lucro = 0; }



            return Vendas;
        }
        public Produto ProdutoMaisVendidoDoDia(DateTime data)
        {
            Produto produto = new Produto();
            string comando = "SELECT TOP 1 Nome_Produto, SUM(Quantidade) AS Soma from tbl_Vendas INNER JOIN tbl_ProdutosVendidos ON tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutosVendidos.ID_Produto = tbl_ProdutoVariacao.ID_ProdutoVariacao INNER JOIN tbl_Produtos2 ON tbl_ProdutoVariacao.ID_Produto = tbl_Produtos2.ID_Produto WHERE CONVERT(DATE, Data_Venda) = @data GROUP BY Nome_Produto ORDER BY Soma DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                produto.Nome_Produto = leitor[0].ToString();
                produto.Caixa = Convert.ToInt32(leitor[1]);
            }

            if (produto.Nome_Produto == null) { produto.Nome_Produto = "- - -"; }

            conexao.Desconectar();
            return produto;
        }
        public Produto ProdutoMaisVendidoDoMes(DateTime data)
        {
            Produto produto = new Produto();
            string comando = "SELECT TOP 1 Nome_Produto, SUM(Quantidade) AS Soma FROM tbl_Vendas INNER JOIN tbl_ProdutosVendidos ON tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda INNER JOIN tbl_Produtos ON tbl_ProdutosVendidos.ID_Produto = tbl_Produtos.ID_Produto WHERE MONTH(Data_Venda) = MONTH(@data) AND YEAR(Data_Venda) = YEAR(@data) GROUP BY Nome_Produto ORDER BY Soma DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                produto.Nome_Produto = leitor[0].ToString();
                produto.Caixa = Convert.ToInt32(leitor[1]);
            }

            if (produto.Nome_Produto == null) { produto.Nome_Produto = "- - -"; }

            conexao.Desconectar();
            return produto;
        }
        public DateTime MaiorDiaDeVendasDoMes(DateTime data)
        {
            string comando = "SELECT TOP(1) CONVERT (DATE, Data_Venda) AS Data, SUM(Valor_Venda) AS Receita FROM tbl_Vendas WHERE MONTH(Data_Venda) = MONTH(@data) AND YEAR(Data_Venda) = YEAR(@data) GROUP BY CONVERT(DATE, Data_Venda) ORDER BY Receita DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            DateTime dia = Convert.ToDateTime(select.ExecuteScalar());
            conexao.Desconectar();
            return dia;
        }
        public decimal ReceitaDoMaiorDiaDeVendas(DateTime data)
        {
            string comando = "SELECT TOP(1) SUM(Valor_Venda) AS Receita, CONVERT (DATE, Data_Venda) AS Data FROM tbl_Vendas WHERE MONTH(Data_Venda) = MONTH(@data) AND YEAR(Data_Venda) = YEAR(@data) GROUP BY CONVERT(DATE, Data_Venda) ORDER BY Receita DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal saldo = Convert.ToDecimal(select.ExecuteScalar());

            conexao.Desconectar();
            return saldo;
        }
        public DateTime MenorDiaDeVendasDoMes(DateTime data)
        {
            string comando = "SELECT TOP(1) CONVERT (DATE, Data_Venda) AS Data, SUM(Valor_Venda) AS Receita FROM tbl_Vendas WHERE MONTH(Data_Venda) = MONTH(@data) AND YEAR(Data_Venda) = YEAR(@data) GROUP BY CONVERT(DATE, Data_Venda)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            DateTime dia = Convert.ToDateTime(select.ExecuteScalar());
            conexao.Desconectar();
            return dia;
        }
        public decimal ReceitaDoMenorDiaDeVendas(DateTime data)
        {
            string comando = "SELECT TOP(1) SUM(Valor_Venda) AS Receita, CONVERT (DATE, Data_Venda) AS Data FROM tbl_Vendas WHERE MONTH(Data_Venda) = MONTH(@data) AND YEAR(Data_Venda) = YEAR(@data) GROUP BY CONVERT(DATE, Data_Venda)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal saldo = Convert.ToDecimal(select.ExecuteScalar());

            conexao.Desconectar();
            return saldo;
        }
        public List<Informacoes_Vendas> ListaDeVendasDoMes(DateTime data)
        {
            List<Informacoes_Vendas> Vendas = new List<Informacoes_Vendas>();
            string comando = "SELECT COUNT(*) AS Vendas, SUM(Valor_Venda) AS Receita, (CONVERT(DATE, Data_Venda)) AS Data FROM tbl_Vendas WHERE MONTH(Data_Venda) = MONTH(@data) AND YEAR(Data_Venda) = YEAR(@data) GROUP BY (CONVERT(DATE, Data_Venda))";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Vendas.Add(new Informacoes_Vendas
                {
                    Qtd_Vendas = Convert.ToInt32(leitor[0]),
                    Receita_Vendas = Convert.ToDecimal(leitor[1]),
                    Data = Convert.ToDateTime(leitor[2])
                });
            }
            leitor.Close();
            conexao.Desconectar();

            return Vendas;
        }

        public int DiasTrabalhadosNoMes(DateTime data)
        {
            List<Informacoes_Vendas> Vendas = ListaDeVendasDoMes(data);
            int dias = Vendas.Count();

            return dias;
        }

        public int ClassificacaoDoDia(DateTime data)
        {
            List<Informacoes_Vendas> Vendas = ListaDeVendasDoMes(data);
            decimal receita = Vendas.Where(x => x.Data == data).Select(x => x.Receita_Vendas).FirstOrDefault();
            int classificacao = Vendas.Where(x => x.Receita_Vendas > receita).Count() + 1;

            return classificacao;
        }
        #endregion

        #region Softcom
        public bool VerificarVendasNoSoftcom(DateTime data)
        {
            string comando = "SELECT ISNULL(CONVERT(VARCHAR(20), SUM(Venda)), 'Não') FROM Vendas_Softcom WHERE CONVERT(DATE, Data) = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            bool verificar;
            if (select.ExecuteScalar().ToString() != "Não") { verificar = true; }
            else { verificar = false; }

            conexao.Desconectar();
            return verificar;
        }
        public Informacoes_Vendas VendasDoDiaSoftcom(DateTime data)
        {
            Informacoes_Vendas Vendas = new Informacoes_Vendas();
            string comando = "SELECT Produtos, Vendas, Compra, Venda, Descontos, Lucro FROM Vendas_Softcom WHERE CONVERT(DATE, Data) = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Vendas.Produtos_Vendidos = Convert.ToInt32(leitor[0]);
                Vendas.Qtd_Vendas = Convert.ToInt32(leitor[1]);
                Vendas.CMV = Convert.ToDecimal(leitor[2]);
                Vendas.Receita_Vendas = Convert.ToDecimal(leitor[3]);
                Vendas.Descontos = Convert.ToDecimal(leitor[4]);
                Vendas.Lucro_Bruto = Convert.ToDecimal(leitor[5]);
            }
            leitor.Close();
            conexao.Desconectar();

            Vendas.Ticket_Medio = Vendas.Receita_Vendas / Vendas.Qtd_Vendas;
            Vendas.Produtos_Por_Venda = Vendas.Produtos_Vendidos / Vendas.Qtd_Vendas;
            Vendas.Preco_Por_Produto = Vendas.Receita_Vendas / Vendas.Produtos_Vendidos;
            Vendas.Margem_Lucro = Vendas.Lucro_Bruto / Vendas.Receita_Vendas * 100;

            return Vendas;
        }
        public Informacoes_Vendas VendasDoMesSoftcom(DateTime data)
        {
            Informacoes_Vendas Vendas = new Informacoes_Vendas();
            string comando = "SELECT SUM(Produtos), SUM(Vendas), SUM(Compra), SUM(Venda), SUM(Descontos), SUM(Lucro) FROM Vendas_Softcom WHERE MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data) AND Data <= @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Vendas.Produtos_Vendidos = Convert.ToInt32(leitor[0]);
                Vendas.Qtd_Vendas = Convert.ToInt32(leitor[1]);
                Vendas.CMV = Convert.ToDecimal(leitor[2]);
                Vendas.Receita_Vendas = Convert.ToDecimal(leitor[3]);
                Vendas.Descontos = Convert.ToDecimal(leitor[4]);
                Vendas.Lucro_Bruto = Convert.ToDecimal(leitor[5]);
            }
            leitor.Close();
            conexao.Desconectar();

            Vendas.Ticket_Medio = Vendas.Receita_Vendas / Vendas.Qtd_Vendas;
            Vendas.Produtos_Por_Venda = Vendas.Produtos_Vendidos / Vendas.Qtd_Vendas;
            Vendas.Preco_Por_Produto = Vendas.Receita_Vendas / Vendas.Produtos_Vendidos;
            Vendas.Margem_Lucro = Vendas.Lucro_Bruto / Vendas.Receita_Vendas * 100;

            return Vendas;
        }
        public Produto ProdutoMaisVendidoDoDiaSoftcom(DateTime data)
        {
            Produto produto = new Produto();
            string comando = "SELECT TOP(1) Produto, Quantidade FROM Produtos_Softcom WHERE Data = @data ORDER BY Quantidade DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                produto.Nome_Produto = leitor[0].ToString();
                produto.Caixa = Convert.ToInt32(leitor[1]);
            }

            if (produto.Nome_Produto == null) { produto.Nome_Produto = "- - -"; }

            conexao.Desconectar();
            return produto;
        }
        public Produto ProdutoMaisVendidoDoMesSoftcom(DateTime data)
        {
            Produto produto = new Produto();
            string comando = "SELECT TOP(1) Produto, SUM(Quantidade) AS Quantidade FROM Produtos_Softcom WHERE MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data) GROUP BY Produto ORDER BY Quantidade DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                produto.Nome_Produto = leitor[0].ToString();
                produto.Caixa = Convert.ToInt32(leitor[1]);
            }

            if (produto.Nome_Produto == null) { produto.Nome_Produto = "- - -"; }

            conexao.Desconectar();
            return produto;
        }
        public DateTime MaiorDiaDeVendasDoMesSoftcom(DateTime data)
        {
            string comando = "SELECT CONVERT (DATE, Data) FROM Vendas_Softcom WHERE Venda = (SELECT MAX(Venda) FROM Vendas_Softcom WHERE MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data)) AND MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            DateTime dia = Convert.ToDateTime(select.ExecuteScalar());

            conexao.Desconectar();
            return dia;
        }
        public decimal ReceitaDoMaiorDiaDeVendasSoftcom(DateTime data)
        {
            string comando = "SELECT Venda FROM Vendas_Softcom WHERE Venda = (SELECT MAX(Venda) FROM Vendas_Softcom WHERE MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data)) AND MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal saldo = Convert.ToDecimal(select.ExecuteScalar());

            conexao.Desconectar();
            return saldo;
        }
        public DateTime MenorDiaDeVendasDoMesSoftcom(DateTime data)
        {
            string comando = "SELECT CONVERT (DATE, Data) FROM Vendas_Softcom WHERE Venda = (SELECT MIN(Venda) FROM Vendas_Softcom WHERE MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data)) AND MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            DateTime dia = Convert.ToDateTime(select.ExecuteScalar());

            conexao.Desconectar();
            return dia;
        }
        public decimal ReceitaDoMenorDiaDeVendasSoftcom(DateTime data)
        {
            string comando = "SELECT Venda FROM Vendas_Softcom WHERE Venda = (SELECT MIN(Venda) FROM Vendas_Softcom WHERE MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data)) AND MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal saldo = Convert.ToDecimal(select.ExecuteScalar());

            conexao.Desconectar();
            return saldo;
        }
        public decimal TotalPagamentosDosProximos7Dias(DateTime data)
        {
            string comando = "SELECT ISNULL(SUM(Valor), 0) AS Valor FROM PagamentosPorDia WHERE Data BETWEEN DATEADD(DAY, 1, @data) AND DATEADD(DAY, 7, @data)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal pagamentos = Convert.ToDecimal(select.ExecuteScalar());

            conexao.Desconectar();
            return pagamentos;
        }
        public decimal TotalPagamentosDeAmanha(DateTime data)
        {
            string comando = "SELECT Valor FROM PagamentosPorDia WHERE Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data.AddDays(1));
            decimal pagamentos = Convert.ToDecimal(select.ExecuteScalar());

            conexao.Desconectar();
            return pagamentos;
        }
        public int DiasTrabalhadosNoMesSoftcom(DateTime data)
        {
            string comando = "SELECT COUNT(*) FROM Vendas_Softcom WHERE MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data) AND Data <= @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            int dias = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();
            return dias;
        }
        public int ClassificacaoDoDiaSoftcom(DateTime data)
        {
            string comando = "SELECT COUNT(*) + 1 FROM Vendas_Softcom WHERE Venda > (SELECT Venda FROM Vendas_Softcom WHERE Data = @data) AND MONTH(Data) = MONTH(@data)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            int classificacao = Convert.ToInt32(select.ExecuteScalar());

            conexao.Desconectar();
            return classificacao;
        }
        #endregion

        public void RelatorioFinanceiroDiario(DateTime data, bool imprimir)
        {
            List<Conta> contas = new List<Conta>();
            List<Saldo> saldos = new List<Saldo>();

            contas = TrazerSaldoDasContas(data);
            saldos = TrazerSaldosDisponiveis(data);

            Informacoes_Vendas Vendas_Dia = new Informacoes_Vendas();
            Produto Produto_dia = new Produto();
            Informacoes_Vendas Vendas_Mes = new Informacoes_Vendas();
            Produto Produto_mes = new Produto();

            string dias_mes;
            string maior_dia, menor_dia, classificacao;
            decimal maior_dia_valor = 0, menor_dia_valor = 0;

            bool marbasoftware = VerificarVendasNoMarbaSoftware(data);
            bool softcom = VerificarVendasNoSoftcom(data);

            if (marbasoftware || softcom)
            {
                if (marbasoftware)
                {
                    Vendas_Dia = VendasDoDia(data);
                    Produto_dia = ProdutoMaisVendidoDoDia(data);
                    Vendas_Mes = VendasDoMes(data);
                    Produto_mes = ProdutoMaisVendidoDoMes(data);

                    dias_mes = DiasTrabalhadosNoMes(data).ToString() + "/" + data.Day.ToString();
                    maior_dia = MaiorDiaDeVendasDoMes(data).ToShortDateString() + " " + ConverterDataParaDiaDaSemana(MaiorDiaDeVendasDoMes(data));
                    maior_dia_valor = ReceitaDoMaiorDiaDeVendas(data);
                    menor_dia = MenorDiaDeVendasDoMes(data).ToShortDateString() + " " + ConverterDataParaDiaDaSemana(MenorDiaDeVendasDoMes(data));
                    menor_dia_valor = ReceitaDoMenorDiaDeVendas(data);
                    classificacao = ClassificacaoDoDia(data).ToString() + "º / " + DiasTrabalhadosNoMes(data).ToString();
                }
                else
                {
                    Vendas_Dia = VendasDoDiaSoftcom(data);
                    Produto_dia = ProdutoMaisVendidoDoDiaSoftcom(data);
                    Vendas_Mes = VendasDoMesSoftcom(data);
                    Produto_mes = ProdutoMaisVendidoDoMesSoftcom(data);

                    dias_mes = DiasTrabalhadosNoMesSoftcom(data).ToString() + "/" + data.Day.ToString();
                    maior_dia = MaiorDiaDeVendasDoMesSoftcom(data).ToShortDateString() + " " + ConverterDataParaDiaDaSemana(MaiorDiaDeVendasDoMesSoftcom(data));
                    maior_dia_valor = ReceitaDoMaiorDiaDeVendasSoftcom(data);
                    menor_dia = MenorDiaDeVendasDoMesSoftcom(data).ToShortDateString() + " " + ConverterDataParaDiaDaSemana(MenorDiaDeVendasDoMesSoftcom(data));
                    menor_dia_valor = ReceitaDoMenorDiaDeVendasSoftcom(data);
                    classificacao = ClassificacaoDoDiaSoftcom(data).ToString() + "º / " + DiasTrabalhadosNoMesSoftcom(data).ToString();
                }

                int produtos_vendidos_dia = Vendas_Dia.Produtos_Vendidos;
                int quantidade_vendas_dia = Vendas_Dia.Qtd_Vendas;
                decimal cmv_dia = Vendas_Dia.CMV;
                decimal receita_dia = Vendas_Dia.Receita_Vendas;
                decimal descontos_dia = Vendas_Dia.Descontos;
                decimal maior_venda = Vendas_Dia.Maior_Venda_Dia;
                decimal tm_dia = Vendas_Dia.Ticket_Medio;
                decimal produtos_venda_dia = Convert.ToDecimal(Vendas_Dia.Produtos_Vendidos) / Convert.ToDecimal(Vendas_Dia.Qtd_Vendas);
                decimal preco_medio_dia = Vendas_Dia.Preco_Por_Produto;
                decimal margem_dia = Vendas_Dia.Margem_Lucro;

                string mais_vendido_dia = Produto_dia.Nome_Produto;
                decimal qtd_vendido_dia = Produto_dia.Caixa;
                decimal lucro_dia = Vendas_Dia.Lucro_Bruto;
                decimal saldo_dia = SaldoDoDia(data);
                //decimal saldo_especie = contas.Where(x => x.Descricao == "DINHEIRO EM CAIXA").Select(x => x.Valor).FirstOrDefault();
                //decimal saldo_stone = contas.Where(x => x.Descricao == "CONTA STONE").Select(x => x.Valor).FirstOrDefault();
                //decimal saldo_bb = contas.Where(x => x.Descricao == "CONTA BB").Select(x => x.Valor).FirstOrDefault();
                //decimal saldo_bradesco = contas.Where(x => x.Descricao == "PESSOAL - JONATAS").Select(x => x.Valor).FirstOrDefault();
                //decimal saldo_trocados = contas.Where(x => x.Descricao == "DINHEIRO TROCADO").Select(x => x.Valor).FirstOrDefault();                
                decimal saldo_especie = 0;
                decimal saldo_stone = 0;
                decimal saldo_bb = 0;
                decimal saldo_bradesco = 0;
                decimal saldo_trocados = 0;
                decimal saldo_total = saldos.Where(x => x.Descricao == "SALDO DISPONÍVEL").Select(x => x.Valor).FirstOrDefault();
                decimal para_amanha = TotalPagamentosDeAmanha(data);
                decimal proximos_7dias = TotalPagamentosDosProximos7Dias(data);


                int produtos_vendidos_mes = Vendas_Mes.Produtos_Vendidos;
                int quantidade_vendas_mes = Vendas_Mes.Qtd_Vendas;
                decimal cmv_mes = Vendas_Mes.CMV;
                decimal receita_mes = Vendas_Mes.Receita_Vendas;
                decimal descontos_mes = Vendas_Mes.Descontos;
                decimal tm_mes = Vendas_Mes.Ticket_Medio;
                decimal produtos_venda_mes = Convert.ToDecimal(Vendas_Mes.Produtos_Vendidos) / Convert.ToDecimal(Vendas_Mes.Qtd_Vendas);
                decimal preco_medio_mes = Vendas_Mes.Preco_Por_Produto;
                decimal margem_mes = Vendas_Mes.Margem_Lucro;

                string mais_vendido_mes = Produto_mes.Nome_Produto;
                decimal qtd_vendido_mes = Produto_mes.Caixa;
                decimal lucro_mes = Vendas_Mes.Lucro_Bruto;
                decimal vendas_dia = receita_mes / data.Day;

                formRepRelatorioDiario relatorio = new formRepRelatorioDiario();
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data.ToShortDateString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("produtos_vendidos_dia", produtos_vendidos_dia.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("quantidade_vendas_dia", quantidade_vendas_dia.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("cmv_dia", cmv_dia.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("receita_dia", receita_dia.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("descontos_dia", descontos_dia.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("maior_venda_dia", maior_venda.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("tm_dia", tm_dia.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("produtos_venda_dia", produtos_venda_dia.ToString("F")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("preco_medio_dia", preco_medio_dia.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("margem_dia", margem_dia.ToString("F")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("mais_vendido_dia", mais_vendido_dia.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("qtd_vendido_dia", qtd_vendido_dia.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("lucro_dia", lucro_dia.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("saldo_dia", saldo_dia.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("saldo_especie", saldo_especie.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("saldo_stone", saldo_stone.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("saldo_bb", saldo_bb.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("saldo_bradesco", saldo_bradesco.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("saldo_trocados", saldo_trocados.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("saldo_total", saldo_total.ToString("C")));


                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("para_amanha", para_amanha.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("proximos_7dias", proximos_7dias.ToString("C")));

                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("produtos_vendidos_mes", produtos_vendidos_mes.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("quantidade_vendas_mes", quantidade_vendas_mes.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("cmv_mes", cmv_mes.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("receita_mes", receita_mes.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("descontos_mes", descontos_mes.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("tm_mes", tm_mes.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("produtos_venda_mes", produtos_venda_mes.ToString("F")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("preco_medio_mes", preco_medio_mes.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("margem_mes", margem_mes.ToString("F")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("mais_vendido_mes", mais_vendido_mes.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("qtd_vendido_mes", qtd_vendido_mes.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("lucro_mes", lucro_mes.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("vendas_dia", vendas_dia.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("dias_mes", dias_mes.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("maior_dia", maior_dia.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("maior_dia_valor", maior_dia_valor.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("menor_dia", menor_dia.ToString()));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("menor_dia_valor", menor_dia_valor.ToString("C")));
                relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("classificacao", classificacao));
                relatorio.MovimentacoesFinanceirasDoDiaTableAdapter.Fill(relatorio.dataSetMovimentacoesDoDia.MovimentacoesFinanceirasDoDia, data);
                // TODO: esta linha de código carrega dados na tabela 'dataSetPagamentosDosProximos7Dias.PagamentosDosProximos7Dias'. Você pode movê-la ou removê-la conforme necessário.
                relatorio.PagamentosDosProximos7DiasTableAdapter.Fill(relatorio.dataSetPagamentosDosProximos7Dias.PagamentosDosProximos7Dias, data);

                relatorio.reportViewer1.RefreshReport();

                if (imprimir)
                {
                    AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                    autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_A4;
                    autoprintme.Print();
                }
                else
                {
                    relatorio.ShowDialog();
                }
            }
            else
            {
                MessageBox.Show("Não há vendas registradas nesse dia!", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        #endregion

        #region DRE

        public int ConverterMesPorExtensoEmInt(string Mes)
        {
            int mes = DateTime.ParseExact(Mes, "MMMM", CultureInfo.CurrentCulture).Month;
            return mes;
        }

        public string ConverterMesIntParaExtenso(int mes)
        {
            DateTime data = new DateTime(DateTime.Now.Year, mes, 1);
            string mes_ = data.ToString(@"MMMM");
            return mes_;
        }

        public List<string> MesesDoDRE()
        {
            List<string> Meses = new List<string>();
            string comando = "SELECT DISTINCT MONTH(Data), YEAR(Data), CONVERT(VARCHAR, UPPER(FORMAT(Data, 'MMMM', 'pt-BR'))) + '/' + CONVERT(VARCHAR, YEAR(Data)) FROM tbl_MovimentacoesFin ORDER BY YEAR(Data) DESC, MONTH(Data) DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                Meses.Add(leitor[2].ToString());
            }
            leitor.Close();
            conexao.Desconectar();

            return Meses;
        }

        public List<Informacoes_Vendas> ListaDeVendasNoMesSoftcom(int mes, int ano)
        {
            List<Informacoes_Vendas> Vendas = new List<Informacoes_Vendas>();
            string comando = "SELECT Data, (SELECT SUM(Venda) FROM Vendas_Softcom WHERE CONVERT(DATE, Data) = CONVERT(DATE, tbl_MetasDiarias.Data)), (SELECT SUM(Compra) FROM Vendas_Softcom WHERE CONVERT(DATE, Data) = CONVERT(DATE, tbl_MetasDiarias.Data)) FROM tbl_MetasDiarias WHERE MONTH(Data) = @mes AND YEAR(Data) = @ano";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@mes", mes);
                select.Parameters.AddWithValue("@ano", ano);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Vendas.Add(new Informacoes_Vendas
                        {
                            Data = Convert.ToDateTime(leitor[0]),
                            Receita_Vendas = Convert.ToDecimal(leitor[1]),
                            CMV = Convert.ToDecimal(leitor[2])
                        });
                    }
                }
            }

            return Vendas;
        }

        public List<Informacoes_Vendas> ListaDeVendasNoMesMarbaSoftware(int mes, int ano)
        {
            List<Informacoes_Vendas> Vendas = new List<Informacoes_Vendas>();
            string comando = "SELECT Data, ISNULL((SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE ID_Venda = tbl_PagamentosRecebidos.ID_Venda)) = Data), 0), ISNULL((SELECT SUM(Preco_Custo) FROM tbl_ProdutosVendidos WHERE CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE ID_Venda = tbl_ProdutosVendidos.ID_Venda)) = Data), 0) FROM tbl_MetasDiarias WHERE MONTH(Data) = @mes AND YEAR(Data) = @ano";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@mes", mes);
                select.Parameters.AddWithValue("@ano", ano);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Vendas.Add(new Informacoes_Vendas
                        {
                            Data = Convert.ToDateTime(leitor[0]),
                            Receita_Vendas = Convert.ToDecimal(leitor[1]),
                            CMV = Convert.ToDecimal(leitor[2])
                        });
                    }
                }
            }

            return Vendas;
        }

        public decimal ReceitaDeVendas(int mes, int ano)
        {
            List<Informacoes_Vendas> vendas_softcom = new List<Informacoes_Vendas>(), vendas_marbasoftware = new List<Informacoes_Vendas>();

            try { vendas_softcom = ListaDeVendasNoMesSoftcom(mes, ano); } catch { }
            try { vendas_marbasoftware = ListaDeVendasNoMesMarbaSoftware(mes, ano); } catch { }
            int dias_mes = DateTime.DaysInMonth(ano, mes);

            decimal receita = 0;

            for (int i = 1; i <= dias_mes; i++)
            {
                DateTime data = new DateTime(ano, mes, i);
                bool marbasoftware = vendas_marbasoftware.Any(x => x.Data == data);
                bool softcom = vendas_softcom.Any(x => x.Data == data);

                if (marbasoftware)
                {
                    receita = receita + vendas_marbasoftware.Where(x => x.Data == data).Select(x => x.Receita_Vendas).FirstOrDefault();
                }
                else
                {
                    receita = receita + vendas_softcom.Where(x => x.Data == data).Select(x => x.Receita_Vendas).FirstOrDefault();
                }
            }

            return receita;
        }

        public decimal CMV(int mes, int ano)
        {
            List<Informacoes_Vendas> vendas_softcom = new List<Informacoes_Vendas>(), vendas_marbasoftware = new List<Informacoes_Vendas>();

            try { vendas_softcom = ListaDeVendasNoMesSoftcom(mes, ano); } catch { }
            try { vendas_marbasoftware = ListaDeVendasNoMesMarbaSoftware(mes, ano); } catch { }

            int dias_mes = DateTime.DaysInMonth(ano, mes);

            decimal despesa = 0;

            for (int i = 1; i <= dias_mes; i++)
            {
                DateTime data = new DateTime(ano, mes, i);
                bool marbasoftware = vendas_marbasoftware.Any(x => x.Data == data);
                bool softcom = vendas_softcom.Any(x => x.Data == data);

                if (marbasoftware)
                {
                    despesa = despesa + vendas_marbasoftware.Where(x => x.Data == data).Select(x => x.CMV).FirstOrDefault();
                }
                else
                {
                    despesa = despesa + vendas_softcom.Where(x => x.Data == data).Select(x => x.CMV).FirstOrDefault();
                }
            }

            return despesa;
        }


        public decimal DespesasOperacionais(int mes, int ano)
        {
            DateTime data = new DateTime(ano, mes, 1);
            string comando = "SELECT ISNULL(SUM(Valor), 0) FROM tbl_MovimentacoesFin WHERE MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data) AND (SELECT Categoria FROM tbl_CategoriaContabil WHERE ID_CatCon = (SELECT ID_CatCon FROM tbl_CategoriaFinanceira WHERE ID_CatFin = tbl_MovimentacoesFin.ID_CatFin)) =  'Despesas operacionais'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal despesas = -Convert.ToDecimal(select.ExecuteScalar());
            conexao.Desconectar();
            return despesas;
        }

        public decimal DespesasNaoOperacionais(int mes, int ano)
        {
            DateTime data = new DateTime(ano, mes, 1);
            string comando = "SELECT ISNULL(SUM(Valor), 0) FROM tbl_MovimentacoesFin WHERE MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data) AND (SELECT Categoria FROM tbl_CategoriaContabil WHERE ID_CatCon = (SELECT ID_CatCon FROM tbl_CategoriaFinanceira WHERE ID_CatFin = tbl_MovimentacoesFin.ID_CatFin)) =  'Despesas não operacionais'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal despesas = -Convert.ToDecimal(select.ExecuteScalar());
            conexao.Desconectar();
            return despesas;
        }

        public decimal Impostos(int mes, int ano)
        {
            //Impostos (ID_CatCon = 10)

            DateTime data = new DateTime(ano, mes, 1);
            string comando = "SELECT ISNULL(SUM(Valor), 0) FROM tbl_MovimentacoesFin WHERE MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data) AND (SELECT Categoria FROM tbl_CategoriaContabil WHERE ID_CatCon = (SELECT ID_CatCon FROM tbl_CategoriaFinanceira WHERE ID_CatFin = tbl_MovimentacoesFin.ID_CatFin)) =  'Impostos'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal despesas = -Convert.ToDecimal(select.ExecuteScalar());
            conexao.Desconectar();
            return despesas;
        }

        public decimal OutrasDespesas(int mes, int ano)
        {
            //Outras Despesas (ID_CatCon = 6)

            DateTime data = new DateTime(ano, mes, 1);
            string comando = "SELECT ISNULL(SUM(Valor), 0) FROM tbl_MovimentacoesFin WHERE MONTH(Data) = MONTH(@data) AND YEAR(Data) = YEAR(@data) AND (SELECT Categoria FROM tbl_CategoriaContabil WHERE ID_CatCon = (SELECT ID_CatCon FROM tbl_CategoriaFinanceira WHERE ID_CatFin = tbl_MovimentacoesFin.ID_CatFin)) =  'Outros'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal despesas = -Convert.ToDecimal(select.ExecuteScalar());
            conexao.Desconectar();
            return despesas;
        }

        public void ImprimirDRE(int mes, int ano, bool imprimir)
        {
            DateTime data = new DateTime(ano, mes, 1);
            string mes_ = data.ToString(@"MMMM");
            string Mes = mes_.ToUpper().Substring(0, 3);
            string mes_dre = Mes + " / " + Convert.ToString(ano);

            DateTime data_anterior = data.AddMonths(-1);
            string mes_anterior = data_anterior.ToString(@"MMMM");
            string Mes_anterior = mes_anterior.ToUpper().Substring(0, 3);
            string mes_dre_anterior = Mes_anterior + " / " + Convert.ToString(data_anterior.Year);

            decimal receita = ReceitaDeVendas(mes, ano);
            decimal custo = CMV(mes, ano);
            decimal operacionais = DespesasOperacionais(mes, ano);
            decimal nao_operacionais = DespesasNaoOperacionais(mes, ano);
            decimal impostos = Impostos(mes, ano);
            decimal outras_despesas = OutrasDespesas(mes, ano);

            decimal lucro_bruto = receita - custo;
            decimal lajir = lucro_bruto - operacionais;
            decimal lair = lajir - nao_operacionais;
            decimal lucro_liquido = lair - impostos;
            decimal saldo_final = lucro_liquido - outras_despesas;

            decimal av_receita; try { av_receita = (receita / receita) * 100; } catch { av_receita = 0; }
            decimal av_custo; try { av_custo = (custo / receita) * 100; } catch { av_custo = 0; }
            decimal av_bruto; try { av_bruto = (lucro_bruto / receita) * 100; } catch { av_bruto = 0; }
            decimal av_operacionais; try { av_operacionais = (operacionais / receita) * 100; } catch { av_operacionais = 0; }
            decimal av_lajir; try { av_lajir = (lajir / receita) * 100; } catch { av_lajir = 0; }
            decimal av_nao_operacionais; try { av_nao_operacionais = (nao_operacionais / receita) * 100; } catch { av_nao_operacionais = 0; }
            decimal av_lair; try { av_lair = (lair / receita) * 100; } catch { av_lair = 0; }
            decimal av_impostos; try { av_impostos = (impostos / receita) * 100; } catch { av_impostos = 0; }
            decimal av_liquido; try { av_liquido = (lucro_liquido / receita) * 100; } catch { av_liquido = 0; }
            decimal av_outras; try { av_outras = (outras_despesas / receita) * 100; } catch { av_outras = 0; }
            decimal av_final; try { av_final = (saldo_final / receita) * 100; } catch { av_final = 0; }

            decimal receita_anterior = ReceitaDeVendas(data_anterior.Month, data_anterior.Year);
            decimal custo_anterior = CMV(data_anterior.Month, data_anterior.Year);
            decimal operacionais_anterior = DespesasOperacionais(data_anterior.Month, data_anterior.Year);
            decimal nao_operacionais_anterior = DespesasNaoOperacionais(data_anterior.Month, data_anterior.Year);
            decimal impostos_anterior = Impostos(data_anterior.Month, data_anterior.Year);
            decimal outras_despesas_anterior = OutrasDespesas(data_anterior.Month, data_anterior.Year);

            decimal lucro_bruto_anterior = receita_anterior - custo_anterior;
            decimal lajir_anterior = lucro_bruto_anterior - operacionais_anterior;
            decimal lair_anterior = lajir_anterior - nao_operacionais_anterior;
            decimal lucro_liquido_anterior = lair_anterior - impostos_anterior;
            decimal saldo_final_anterior = lucro_liquido_anterior - outras_despesas_anterior;

            decimal av_receita_anterior; try { av_receita_anterior = (receita_anterior / receita_anterior) * 100; } catch { av_receita_anterior = 0; }
            decimal av_custo_anterior; try { av_custo_anterior = (custo_anterior / receita_anterior) * 100; } catch { av_custo_anterior = 0; }
            decimal av_bruto_anterior; try { av_bruto_anterior = (lucro_bruto_anterior / receita_anterior) * 100; } catch { av_bruto_anterior = 0; }
            decimal av_operacionais_anterior; try { av_operacionais_anterior = (operacionais_anterior / receita_anterior) * 100; } catch { av_operacionais_anterior = 0; }
            decimal av_lajir_anterior; try { av_lajir_anterior = (lajir_anterior / receita_anterior) * 100; } catch { av_lajir_anterior = 0; }
            decimal av_nao_operacionais_anterior; try { av_nao_operacionais_anterior = (nao_operacionais_anterior / receita_anterior) * 100; } catch { av_nao_operacionais_anterior = 0; }
            decimal av_lair_anterior; try { av_lair_anterior = (lair_anterior / receita_anterior) * 100; } catch { av_lair_anterior = 0; }
            decimal av_impostos_anterior; try { av_impostos_anterior = (impostos_anterior / receita_anterior) * 100; } catch { av_impostos_anterior = 0; }
            decimal av_liquido_anterior; try { av_liquido_anterior = (lucro_liquido_anterior / receita_anterior) * 100; } catch { av_liquido_anterior = 0; }
            decimal av_outras_anterior; try { av_outras_anterior = (outras_despesas_anterior / receita_anterior) * 100; } catch { av_outras_anterior = 0; }
            decimal av_final_anterior; try { av_final_anterior = (saldo_final_anterior / receita_anterior) * 100; } catch { av_final_anterior = 0; }

            decimal ah_receita; try { ah_receita = ((receita / receita_anterior) - 1) * 100; } catch { ah_receita = 0; }
            decimal ah_custo; try { ah_custo = ((custo / custo_anterior) - 1) * 100; } catch { ah_custo = 0; }
            decimal ah_bruto; try { ah_bruto = ((lucro_bruto / lucro_bruto_anterior) - 1) * 100; } catch { ah_bruto = 0; }
            decimal ah_operacionais; try { ah_operacionais = ((operacionais / operacionais_anterior) - 1) * 100; } catch { ah_operacionais = 0; }
            decimal ah_lajir; try { ah_lajir = ((lajir / lajir_anterior) - 1) * 100; } catch { ah_lajir = 0; }
            decimal ah_nao_operacionais; try { ah_nao_operacionais = ((nao_operacionais / nao_operacionais_anterior) - 1) * 100; } catch { ah_nao_operacionais = 0; }
            decimal ah_lair; try { ah_lair = ((lair / lair_anterior) - 1) * 100; } catch { ah_lair = 0; }
            decimal ah_impostos; try { ah_impostos = ((impostos / impostos_anterior) - 1) * 100; } catch { ah_impostos = 0; }
            decimal ah_liquido; try { ah_liquido = ((lucro_liquido / lucro_liquido_anterior) - 1) * 100; } catch { ah_liquido = 0; }
            decimal ah_outras; try { ah_outras = ((outras_despesas / outras_despesas_anterior) - 1) * 100; } catch { ah_outras = 0; }
            decimal ah_final; try { ah_final = ((saldo_final / saldo_final_anterior) - 1) * 100; } catch { ah_final = 0; }

            formRepDRE relatorio = new formRepDRE();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("mes_dre", mes_dre));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("mes_dre_anterior", mes_dre_anterior));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("receita", receita.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("custo", custo.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operacionais", operacionais.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("nao_operacionais", nao_operacionais.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("impostos", impostos.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("outras_despesas", outras_despesas.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("lucro_bruto", lucro_bruto.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("lajir", lajir.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("lair", lair.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("lucro_liquido", lucro_liquido.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("saldo_final", saldo_final.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_receita", av_receita.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_custo", av_custo.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_bruto", av_bruto.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_operacionais", av_operacionais.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_lajir", av_lajir.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_nao_operacionais", av_nao_operacionais.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_lair", av_lair.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_impostos", av_impostos.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_liquido", av_liquido.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_outras", av_outras.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_final", av_final.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("receita_anterior", receita_anterior.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("custo_anterior", custo_anterior.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("operacionais_anterior", operacionais_anterior.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("nao_operacionais_anterior", nao_operacionais_anterior.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("impostos_anterior", impostos_anterior.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("outras_despesas_anterior", outras_despesas_anterior.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("lucro_bruto_anterior", lucro_bruto_anterior.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("lajir_anterior", lajir_anterior.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("lair_anterior", lair_anterior.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("lucro_liquido_anterior", lucro_liquido_anterior.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("saldo_final_anterior", saldo_final_anterior.ToString("C")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_receita_anterior", av_receita_anterior.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_custo_anterior", av_custo_anterior.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_bruto_anterior", av_bruto_anterior.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_operacionais_anterior", av_operacionais_anterior.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_lajir_anterior", av_lajir_anterior.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_nao_operacionais_anterior", av_nao_operacionais_anterior.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_lair_anterior", av_lair_anterior.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_impostos_anterior", av_impostos_anterior.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_liquido_anterior", av_liquido_anterior.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_outras_anterior", av_outras_anterior.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("av_final_anterior", av_final_anterior.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("ah_receita", ah_receita.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("ah_custo", ah_custo.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("ah_bruto", ah_bruto.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("ah_operacionais", ah_operacionais.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("ah_lajir", ah_lajir.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("ah_nao_operacionais", ah_nao_operacionais.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("ah_lair", ah_lair.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("ah_impostos", ah_impostos.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("ah_liquido", ah_liquido.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("ah_outras", ah_outras.ToString("F") + "%"));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("ah_final", ah_final.ToString("F") + "%"));

            relatorio.reportViewer1.RefreshReport();

            if (imprimir)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_A4;
                autoprintme.Print();
            }
            else
            {
                relatorio.Show();
            }

        }

        public void CarregarDREnoDGV(int mes, int ano, DataGridView datagrid)
        {
            DateTime data = new DateTime(ano, mes, 1);
            string mes_ = data.ToString(@"MMMM");
            string Mes = mes_.ToUpper().Substring(0, 3);
            string mes_dre = Mes + " / " + Convert.ToString(ano);

            DateTime data_anterior = data.AddMonths(-1);
            string mes_anterior = data_anterior.ToString(@"MMMM");
            string Mes_anterior = mes_anterior.ToUpper().Substring(0, 3);
            string mes_dre_anterior = Mes_anterior + " / " + Convert.ToString(data_anterior.Year);

            decimal receita = ReceitaDeVendas(mes, ano);
            decimal custo = CMV(mes, ano);
            decimal operacionais = DespesasOperacionais(mes, ano);
            decimal nao_operacionais = DespesasNaoOperacionais(mes, ano);
            decimal impostos = Impostos(mes, ano);
            decimal outras_despesas = OutrasDespesas(mes, ano);

            decimal lucro_bruto = receita - custo;
            decimal lajir = lucro_bruto - operacionais;
            decimal lair = lajir - nao_operacionais;
            decimal lucro_liquido = lair - impostos;
            decimal saldo_final = lucro_liquido - outras_despesas;

            decimal av_receita; try { av_receita = (receita / receita) * 100; } catch { av_receita = 0; }
            decimal av_custo; try { av_custo = (custo / receita) * 100; } catch { av_custo = 0; }
            decimal av_bruto; try { av_bruto = (lucro_bruto / receita) * 100; } catch { av_bruto = 0; }
            decimal av_operacionais; try { av_operacionais = (operacionais / receita) * 100; } catch { av_operacionais = 0; }
            decimal av_lajir; try { av_lajir = (lajir / receita) * 100; } catch { av_lajir = 0; }
            decimal av_nao_operacionais; try { av_nao_operacionais = (nao_operacionais / receita) * 100; } catch { av_nao_operacionais = 0; }
            decimal av_lair; try { av_lair = (lair / receita) * 100; } catch { av_lair = 0; }
            decimal av_impostos; try { av_impostos = (impostos / receita) * 100; } catch { av_impostos = 0; }
            decimal av_liquido; try { av_liquido = (lucro_liquido / receita) * 100; } catch { av_liquido = 0; }
            decimal av_outras; try { av_outras = (outras_despesas / receita) * 100; } catch { av_outras = 0; }
            decimal av_final; try { av_final = (saldo_final / receita) * 100; } catch { av_final = 0; }

            decimal receita_anterior = ReceitaDeVendas(data_anterior.Month, data_anterior.Year);
            decimal custo_anterior = CMV(data_anterior.Month, data_anterior.Year);
            decimal operacionais_anterior = DespesasOperacionais(data_anterior.Month, data_anterior.Year);
            decimal nao_operacionais_anterior = DespesasNaoOperacionais(data_anterior.Month, data_anterior.Year);
            decimal impostos_anterior = Impostos(data_anterior.Month, data_anterior.Year);
            decimal outras_despesas_anterior = OutrasDespesas(data_anterior.Month, data_anterior.Year);

            decimal lucro_bruto_anterior = receita_anterior - custo_anterior;
            decimal lajir_anterior = lucro_bruto_anterior - operacionais_anterior;
            decimal lair_anterior = lajir_anterior - nao_operacionais_anterior;
            decimal lucro_liquido_anterior = lair_anterior - impostos_anterior;
            decimal saldo_final_anterior = lucro_liquido_anterior - outras_despesas_anterior;

            decimal av_receita_anterior; try { av_receita_anterior = (receita_anterior / receita_anterior) * 100; } catch { av_receita_anterior = 0; }
            decimal av_custo_anterior; try { av_custo_anterior = (custo_anterior / receita_anterior) * 100; } catch { av_custo_anterior = 0; }
            decimal av_bruto_anterior; try { av_bruto_anterior = (lucro_bruto_anterior / receita_anterior) * 100; } catch { av_bruto_anterior = 0; }
            decimal av_operacionais_anterior; try { av_operacionais_anterior = (operacionais_anterior / receita_anterior) * 100; } catch { av_operacionais_anterior = 0; }
            decimal av_lajir_anterior; try { av_lajir_anterior = (lajir_anterior / receita_anterior) * 100; } catch { av_lajir_anterior = 0; }
            decimal av_nao_operacionais_anterior; try { av_nao_operacionais_anterior = (nao_operacionais_anterior / receita_anterior) * 100; } catch { av_nao_operacionais_anterior = 0; }
            decimal av_lair_anterior; try { av_lair_anterior = (lair_anterior / receita_anterior) * 100; } catch { av_lair_anterior = 0; }
            decimal av_impostos_anterior; try { av_impostos_anterior = (impostos_anterior / receita_anterior) * 100; } catch { av_impostos_anterior = 0; }
            decimal av_liquido_anterior; try { av_liquido_anterior = (lucro_liquido_anterior / receita_anterior) * 100; } catch { av_liquido_anterior = 0; }
            decimal av_outras_anterior; try { av_outras_anterior = (outras_despesas_anterior / receita_anterior) * 100; } catch { av_outras_anterior = 0; }
            decimal av_final_anterior; try { av_final_anterior = (saldo_final_anterior / receita_anterior) * 100; } catch { av_final_anterior = 0; }

            decimal ah_receita; try { ah_receita = ((receita / receita_anterior) - 1) * 100; } catch { ah_receita = 0; }
            decimal ah_custo; try { ah_custo = ((custo / custo_anterior) - 1) * 100; } catch { ah_custo = 0; }
            decimal ah_bruto; try { ah_bruto = ((lucro_bruto / lucro_bruto_anterior) - 1) * 100; } catch { ah_bruto = 0; }
            decimal ah_operacionais; try { ah_operacionais = ((operacionais / operacionais_anterior) - 1) * 100; } catch { ah_operacionais = 0; }
            decimal ah_lajir; try { ah_lajir = ((lajir / lajir_anterior) - 1) * 100; } catch { ah_lajir = 0; }
            decimal ah_nao_operacionais; try { ah_nao_operacionais = ((nao_operacionais / nao_operacionais_anterior) - 1) * 100; } catch { ah_nao_operacionais = 0; }
            decimal ah_lair; try { ah_lair = ((lair / lair_anterior) - 1) * 100; } catch { ah_lair = 0; }
            decimal ah_impostos; try { ah_impostos = ((impostos / impostos_anterior) - 1) * 100; } catch { ah_impostos = 0; }
            decimal ah_liquido; try { ah_liquido = ((lucro_liquido / lucro_liquido_anterior) - 1) * 100; } catch { ah_liquido = 0; }
            decimal ah_outras; try { ah_outras = ((outras_despesas / outras_despesas_anterior) - 1) * 100; } catch { ah_outras = 0; }
            decimal ah_final; try { ah_final = ((saldo_final / saldo_final_anterior) - 1) * 100; } catch { ah_final = 0; }

            datagrid.Rows.Add("Receita de vendas", av_receita.ToString("F") + "%", receita.ToString("C"), ah_receita.ToString("F") + "%", receita_anterior.ToString("C"), av_receita_anterior.ToString("F") + "%");
            datagrid.Rows.Add("Custo de mercadoria", av_custo.ToString("F") + "%", custo.ToString("C"), ah_custo.ToString("F") + "%", custo_anterior.ToString("C"), av_custo_anterior.ToString("F") + "%");
            datagrid.Rows.Add("Lucro bruto", av_bruto.ToString("F") + "%", lucro_bruto.ToString("C"), ah_bruto.ToString("F") + "%", lucro_bruto_anterior.ToString("C"), av_bruto_anterior.ToString("F") + "%");
            datagrid.Rows.Add("Despesas operacionais", av_operacionais.ToString("F") + "%", operacionais.ToString("C"), ah_operacionais.ToString("F") + "%", operacionais_anterior.ToString("C"), av_operacionais_anterior.ToString("F") + "%");
            datagrid.Rows.Add("Lucro operacional", av_lajir.ToString("F") + "%", lajir.ToString("C"), av_lajir_anterior.ToString("F") + "%", lajir_anterior.ToString("C"), ah_lajir.ToString("F") + "%");
            datagrid.Rows.Add("Despesas não operacionais", av_nao_operacionais.ToString("F") + "%", nao_operacionais.ToString("C"), ah_nao_operacionais.ToString("F") + "%", nao_operacionais_anterior.ToString("C"), av_nao_operacionais_anterior.ToString("F") + "%");
            datagrid.Rows.Add("Lucro antes dos impostos", av_lair.ToString("F") + "%", lair.ToString("C"), ah_lair.ToString("F") + "%", lair_anterior.ToString("C"), av_lair_anterior.ToString("F") + "%");
            datagrid.Rows.Add("Impostos sobre a renda", av_impostos.ToString("F") + "%", impostos.ToString("C"), ah_impostos.ToString("F") + "%", impostos_anterior.ToString("C"), av_impostos_anterior.ToString("F") + "%");
            datagrid.Rows.Add("Lucro líquido", av_liquido.ToString("F") + "%", lucro_liquido.ToString("C"), ah_liquido.ToString("F") + "%", lucro_liquido_anterior.ToString("C"), av_liquido_anterior.ToString("F") + "%");
            //datagrid.Rows.Add("Outras despesas", av_outras.ToString("F") + "%", outras_despesas.ToString("C"), ah_outras.ToString("F") + "%", outras_despesas_anterior.ToString("C"), av_outras_anterior.ToString("F") + "%");
            //datagrid.Rows.Add("Saldo final", av_final.ToString("F") + "%", saldo_final.ToString("C"), ah_final.ToString("F") + "%", saldo_final_anterior.ToString("C"), av_final_anterior.ToString("F") + "%");
        }


        public void ImprimirDespesasPorCategoria(int mes, int ano, bool imprimir)
        {
            DateTime data = new DateTime(ano, mes, 1);
            DateTime data_anterior = data.AddMonths(-1);

            string mes_ = data.ToString(@"MMMM");
            string Mes = mes_.ToUpper().Substring(0, 3);
            string mes_dre = Mes + " / " + Convert.ToString(ano);

            string mes_anterior = data_anterior.ToString(@"MMMM");
            string Mes_anterior = mes_anterior.ToUpper().Substring(0, 3);
            string mes_dre_anterior = Mes_anterior + " / " + Convert.ToString(data_anterior.Year);

            formRepDespesasPorCategoria relatorio = new formRepDespesasPorCategoria();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("mes_dre", mes_dre));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("mes_dre_anterior", mes_dre_anterior));
            relatorio.DespesasPorCategoriaTableAdapter.Fill(relatorio.dataSetDespesasPorCategoria.DespesasPorCategoria, data, data_anterior);
            relatorio.reportViewer1.RefreshReport();

            if (imprimir)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_A4;
                autoprintme.Print();
            }
            else
            {
                relatorio.Show();
            }
        }

        #endregion

        #region Fluxo de caixa

        public List<string> MesesDoFluxoDeCaixa()
        {
            List<string> Meses = new List<string>();
            string comando = "SELECT DISTINCT MONTH(Data_Prevista), YEAR(Data_Prevista), CONVERT(VARCHAR, UPPER(FORMAT(Data_Prevista, 'MMMM', 'pt-BR'))) + '/' + CONVERT(VARCHAR, YEAR(Data_Prevista)) FROM tbl_MovimentacoesFin ORDER BY YEAR(Data_Prevista) DESC, MONTH(Data_Prevista) DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                Meses.Add(leitor[2].ToString());
            }
            leitor.Close();
            conexao.Desconectar();

            return Meses;
        }

        public List<FluxoDeCaixa> InformacoesDoFluxoDeCaixa(int mes, int ano)
        {
            List<FluxoDeCaixa> fluxo = new List<FluxoDeCaixa>();

            string comando = "[FluxoDeCaixaEsperado] @mes, @ano";

            using (SqlCommand procedure = new SqlCommand(comando, conexao.Conectar()))
            {
                procedure.Parameters.AddWithValue("@mes", mes);
                procedure.Parameters.AddWithValue("@ano", ano);

                using (SqlDataReader leitor = procedure.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        fluxo.Add(new FluxoDeCaixa
                        {
                            ID = Convert.ToInt32(leitor[0]),
                            ID_Parente = Convert.ToInt32(leitor[1]),
                            Categoria = leitor[2].ToString(),
                            Valor4 = Convert.ToDecimal(leitor[3]),
                            Esperado4 = Convert.ToDecimal(leitor[4]),
                            Valor3 = Convert.ToDecimal(leitor[5]),
                            Esperado3 = Convert.ToDecimal(leitor[6]),
                            Valor2 = Convert.ToDecimal(leitor[7]),
                            Esperado2 = Convert.ToDecimal(leitor[8]),
                            Valor1 = Convert.ToDecimal(leitor[9]),
                            Esperado1 = Convert.ToDecimal(leitor[10]),
                        });
                    }
                }
            }

            conexao.Desconectar();

            return fluxo;
        }

        public List<Categoria_Financeira> PlanoDeContas()
        {
            List<Categoria_Financeira> categorias = new List<Categoria_Financeira>();

            string comando = "SELECT ID_CatFin, Categoria, ISNULL(ID_Parente, 0), ISNULL(Tipo, '') FROM tbl_CategoriaFinanceira";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        categorias.Add(new Categoria_Financeira
                        {
                            ID = (int)leitor[0],
                            Categoria = (string)leitor[1],
                            ID_Parente = (int)leitor[2],
                            Tipo = (string)leitor[3]
                        });
                    }
                }
            }

            conexao.Desconectar();

            return categorias;
        }

        public List<Categoria_Financeira> PlanoDeContasPorTipo(bool entrada)
        {
            string tipo;
            if (entrada) { tipo = "Receita"; }
            else { tipo = "Despesa"; }

            List<Categoria_Financeira> categorias = new List<Categoria_Financeira>();

            string comando = "SELECT ID_CatFin, Categoria, ISNULL(ID_Parente, 0), ISNULL(Tipo, '') FROM tbl_CategoriaFinanceira WHERE Tipo = @tipo OR Tipo IS NULL";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@tipo", tipo);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        categorias.Add(new Categoria_Financeira
                        {
                            ID = (int)leitor[0],
                            Categoria = (string)leitor[1],
                            ID_Parente = (int)leitor[2],
                            Tipo = (string)leitor[3]
                        });
                    }
                }
            }

            conexao.Desconectar();

            return categorias;
        }

        public List<Categoria_Financeira> PreencherComboPlanoDeContas(bool entrada)
        {
            string tipo;
            if (entrada) { tipo = "Receita"; }
            else { tipo = "Despesa"; }

            List<Categoria_Financeira> categorias = new List<Categoria_Financeira>();

            string comando = "SELECT ID_CatFin, Categoria FROM tbl_CategoriaFinanceira AS P1 WHERE (SELECT COUNT(*) FROM tbl_CategoriaFinanceira WHERE ID_Parente = P1.ID_CatFin) = 0 AND (Tipo = @tipo OR Tipo IS NULL) ORDER BY Categoria";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@tipo", tipo);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        categorias.Add(new Categoria_Financeira
                        {
                            ID = (int)leitor[0],
                            Categoria = (string)leitor[1]
                        });
                    }
                }
            }

            conexao.Desconectar();

            return categorias;
        }

        public bool VerificarCategoria(string categoria)
        {
            bool verificar = false;
            string comando = "SELECT IIF(COUNT(*) = 0, 0, 1) FROM tbl_CategoriaFinanceira WHERE Categoria = @categoria";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@categoria", categoria);
                verificar = Convert.ToBoolean(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return verificar;
        }

        public void CadastrarPlanoDeContas(Categoria_Financeira categoria)
        {
            string comando = "INSERT INTO tbl_CategoriaFinanceira (Categoria, ID_Parente, Tipo) VALUES (@categoria, IIF(@id_parente = 0, NULL, @id_parente), @tipo)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@categoria", categoria.Categoria);
                insert.Parameters.AddWithValue("@id_parente", categoria.ID_Parente);
                insert.Parameters.AddWithValue("@tipo", categoria.Tipo);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void EditarPlanoDeContas(Categoria_Financeira categoria)
        {
            string comando = "UPDATE tbl_CategoriaFinanceira SET Categoria = @categoria WHERE ID_CatFin = @id";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", categoria.ID);
                update.Parameters.AddWithValue("@categoria", categoria.Categoria);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarCategoriaDoPlanoDeContas(int id)
        {
            string comando = "DELETE FROM tbl_CategoriaFinanceira WHERE ID_CatFin = @id";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", id);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        #endregion

        #region Lançamentos

        public List<Estabelecimento> TrazerEstabelecimentosComerciais()
        {
            List<Estabelecimento> estabelecimentos = new List<Estabelecimento>();
            string comando = "SELECT ID_Estabelecimento, Descricao FROM tbl_Estabelecimentos WHERE Categoria = 'LOJA'";

            using (SqlCommand select =  new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        estabelecimentos.Add(new Estabelecimento
                        {
                            ID_Estabelecimento = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return estabelecimentos;
        }

        public List<Estabelecimento> TrazerEstabelecimentos()
        {
            List<Estabelecimento> estabelecimentos = new List<Estabelecimento>();
            string comando = "SELECT ID_Estabelecimento, Descricao FROM tbl_Estabelecimentos";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        estabelecimentos.Add(new Estabelecimento
                        {
                            ID_Estabelecimento = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return estabelecimentos;
        }

        public int TrazerIdDoEstabelecimentoPelaReparticao(int id_reparticao)
        {
            int id_estabelecimento;

            string comando = "SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = @id_reparticao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_reparticao", id_reparticao);
                id_estabelecimento = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return id_estabelecimento;
        }

        public void PreencherDataGridFluxo(DataGridView dataGrid, BindingSource bindingSource, int registros, bool todos, bool orcamentos, bool lancamentos)
        {
            string comando;

            if (todos)
            {
                comando = "SELECT ID_Movimentacao, Descricao, ISNULL(FORMAT(Valor, 'c', 'pt-br'), '') AS Valor, ISNULL((SELECT Categoria FROM tbl_CategoriaFinanceira WHERE tbl_CategoriaFinanceira.ID_CatFin = tbl_MovimentacoesFin.ID_CatFin), ' - ') AS Categoria, (SELECT Descricao FROM tbl_Contas WHERE ID_Conta = tbl_MovimentacoesFin.ID_Conta) AS Conta, (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_MovimentacoesFin.ID_Colaborador) AS Responsavel, ISNULL(FORMAT(Data, 'dd/MM/yyyy'), '') AS Data, Registro, ISNULL(FORMAT(Data_Prevista, 'dd/MM/yyyy'), '') AS Data_Prevista, ISNULL(FORMAT(Valor_Previsto, 'c', 'pt-br'), '') AS Valor_Previsto, ID_Parente, Orcamento, Data_Prevista AS Data_Original FROM tbl_MovimentacoesFin WHERE ID_CatFin <> 121 AND ((Orcamento = @orcamentos AND IIF(Valor IS NULL, 0, 1) = IIF(@orcamentos = 0, 1, 0)) OR (IIF(Valor IS NULL, 0, 1) = IIF(@lancamentos = 1, 1, 0))) UNION SELECT ID_Movimentacao, Descricao, ISNULL(FORMAT(Valor, 'c', 'pt-br'), '') AS Valor, (SELECT Categoria FROM tbl_CategoriaFinanceira WHERE tbl_CategoriaFinanceira.ID_CatFin = tbl_MovimentacoesFin.ID_CatFin) AS Categoria, 'Transferência', (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_MovimentacoesFin.ID_Colaborador), ISNULL(FORMAT(Data, 'dd/MM/yyyy'), '') AS Data, Registro, ISNULL(FORMAT(Data_Prevista, 'dd/MM/yyyy'), '') AS Data_Prevista, ISNULL(FORMAT(Valor_Previsto, 'c', 'pt-br'), '') AS Valor_Previsto, ID_Parente, Orcamento, Data_Prevista AS Data_Original FROM tbl_MovimentacoesFin WHERE ID_CatFin = 121 AND Valor > 0 AND ((Orcamento = @orcamentos AND IIF(Valor IS NULL, 0, 1) = IIF(@orcamentos = 0, 1, 0)) OR (IIF(Valor IS NULL, 0, 1) = IIF(@lancamentos = 1, 1, 0))) ORDER BY Data_Original DESC, Registro DESC";
            }
            else
            {
                comando = "SELECT TOP(@registros) * FROM (SELECT top(@registros) ID_Movimentacao, Descricao, ISNULL(FORMAT(Valor, 'c', 'pt-br'), '') AS Valor, ISNULL((SELECT Categoria FROM tbl_CategoriaFinanceira WHERE tbl_CategoriaFinanceira.ID_CatFin = tbl_MovimentacoesFin.ID_CatFin), ' - ') AS Categoria, (SELECT Descricao FROM tbl_Contas WHERE ID_Conta = tbl_MovimentacoesFin.ID_Conta) AS Conta, (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_MovimentacoesFin.ID_Colaborador) AS Responsavel, ISNULL(FORMAT(Data, 'dd/MM/yyyy'), '') AS Data, Registro, ISNULL(FORMAT(Data_Prevista, 'dd/MM/yyyy'), '') AS Data_Prevista, ISNULL(FORMAT(Valor_Previsto, 'c', 'pt-br'), '') AS Valor_Previsto, ID_Parente, Orcamento, Data_Prevista AS Data_Original FROM tbl_MovimentacoesFin WHERE ID_CatFin <> 121 AND ((Orcamento = @orcamentos AND IIF(Valor IS NULL, 0, 1) = IIF(@orcamentos = 0, 1, 0)) OR (IIF(Valor IS NULL, 0, 1) = IIF(@lancamentos = 1, 1, 0))) ORDER BY Data_Original DESC, Registro DESC UNION ALL SELECT top(@registros) ID_Movimentacao, Descricao, ISNULL(FORMAT(Valor, 'c', 'pt-br'), '') AS Valor, (SELECT Categoria FROM tbl_CategoriaFinanceira WHERE tbl_CategoriaFinanceira.ID_CatFin = tbl_MovimentacoesFin.ID_CatFin) AS Categoria, 'Transferência', (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_MovimentacoesFin.ID_Colaborador), ISNULL(FORMAT(Data, 'dd/MM/yyyy'), '') AS Data, Registro, ISNULL(FORMAT(Data_Prevista, 'dd/MM/yyyy'), '') AS Data_Prevista, ISNULL(FORMAT(Valor_Previsto, 'c', 'pt-br'), '') AS Valor_Previsto, ID_Parente, Orcamento, Data_Prevista AS Data_Original FROM tbl_MovimentacoesFin WHERE ID_CatFin = 121 AND Valor > 0 AND ((Orcamento = @orcamentos AND IIF(Valor IS NULL, 0, 1) = IIF(@orcamentos = 0, 1, 0)) OR (IIF(Valor IS NULL, 0, 1) = IIF(@lancamentos = 1, 1, 0))) ORDER BY Data_Original DESC, Registro DESC) T3 ORDER BY Data_Original DESC, Registro DESC";
            }


            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@registros", registros);
                select.Parameters.AddWithValue("@orcamentos", orcamentos);
                select.Parameters.AddWithValue("@lancamentos", lancamentos);

                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGrid.DataSource = bindingSource;
            }

            conexao.Desconectar();
        }

        public void PreencherDataGridFluxoIndividual(DataGridView dataGrid, BindingSource bindingSource)
        {
            string comando = "SELECT ID_Movimentacao, Descricao, Valor, ISNULL((SELECT Categoria FROM tbl_CategoriaFinanceira WHERE tbl_CategoriaFinanceira.ID_CatFin = tbl_MovimentacoesFin.ID_CatFin), ' - ') AS Categoria, Data, Registro FROM tbl_MovimentacoesFin WHERE ID_CatFin <> 7 AND ID_CatFin <> 1 AND ID_CatFin <> 37 AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) UNION SELECT ID_Movimentacao, Descricao, Valor, (SELECT Categoria FROM tbl_CategoriaFinanceira WHERE tbl_CategoriaFinanceira.ID_CatFin = tbl_MovimentacoesFin.ID_CatFin) AS Categoria, Data, Registro FROM tbl_MovimentacoesFin WHERE ID_CatFin = 7 OR ID_CatFin = 1 AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) UNION SELECT ID_Movimentacao, Descricao, Valor, (SELECT Categoria FROM tbl_CategoriaFinanceira WHERE tbl_CategoriaFinanceira.ID_CatFin = tbl_MovimentacoesFin.ID_CatFin) AS Categoria, Data, Registro FROM tbl_MovimentacoesFin WHERE ID_CatFin = 37 AND Valor > 0 AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY Data DESC, Registro DESC";
                
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", Program.matricula);
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGrid.DataSource = bindingSource;
            }

            conexao.Desconectar();
        }

        public Movimentacao SelecionarInformacoesDaReferencia(string referencia)
        {
            string[] partir = referencia.Split(' ');
            string data = partir[0];
            string previsao = referencia.Remove(0, 13);
            string comando = "SELECT Descricao, Valor, (SELECT Categoria FROM tbl_CategoriaFinanceira Where tbl_CategoriaFinanceira.ID_CatFin = tbl_Previsoes_de_Gastos.ID_CatFin) AS CatFin FROM tbl_Previsoes_de_Gastos WHERE Descricao = @previsao AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            select.Parameters.AddWithValue("@previsao", previsao);
            SqlDataReader leitor = select.ExecuteReader();
            Movimentacao movimentacao = new Movimentacao();

            while (leitor.Read())
            {
                movimentacao.Descricao = leitor[0].ToString();
                movimentacao.Valor = Convert.ToDecimal(leitor[2]);
                movimentacao.Categoria_Financeira = leitor[4].ToString();
            }
            leitor.Close();
            conexao.Desconectar();
            return movimentacao;
        }

        public void RegistrarMovimentacao(Movimentacao movimentacao, bool entrada, bool previsao, bool pagamento)
        {
            if (!entrada) { movimentacao.Valor = -movimentacao.Valor; }
            if (!entrada) { movimentacao.Valor_Previsto = -movimentacao.Valor_Previsto; }

            movimentacao.Matricula = Program.matricula;

            string comando = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, ID_Colaborador, Saldo, ID_Conta, Registro, Valor_Previsto, Data_Prevista, Orcamento) VALUES (@descricao, IIF(@pagamento = 1, @valor, NULL), IIF(@pagamento = 1, @data, NULL), @id_catfin, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO DISPONÍVEL', @id_conta, GETDATE(), IIF(@previsao = 1, @valor_previsto, NULL), IIF(@previsao = 1, @data_prevista, NULL), @orcamento)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@descricao", movimentacao.Descricao);
            insert.Parameters.AddWithValue("@valor", movimentacao.Valor);
            insert.Parameters.AddWithValue("@data", movimentacao.Data);
            insert.Parameters.AddWithValue("@matricula", movimentacao.Matricula);
            insert.Parameters.AddWithValue("@id_catfin", movimentacao.ID_CatFin);
            insert.Parameters.AddWithValue("@id_conta", movimentacao.ID_Conta);
            insert.Parameters.AddWithValue("@orcamento", movimentacao.Orcamento);
            insert.Parameters.AddWithValue("@valor_previsto", movimentacao.Valor_Previsto);
            insert.Parameters.AddWithValue("@data_prevista", movimentacao.Data_Prevista);
            insert.Parameters.AddWithValue("@previsao", previsao);
            insert.Parameters.AddWithValue("@pagamento", pagamento);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Movimentação registrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void EditarMovimentacao(Movimentacao movimentacao, bool entrada, bool previsao, bool pagamento)
        {
            if (!entrada) { movimentacao.Valor = -movimentacao.Valor; }
            if (!entrada) { movimentacao.Valor_Previsto = -movimentacao.Valor_Previsto; }

            movimentacao.Matricula = Program.matricula;

            string comando = "UPDATE tbl_MovimentacoesFin SET Descricao = @descricao, Valor = IIF(@pagamento = 1, @valor, NULL), Data = IIF(@pagamento = 1, @data, NULL), Valor_Previsto = IIF(@previsao = 1, @valor_previsto, NULL), Data_Prevista = IIF(@previsao = 1, @data_prevista, NULL), Orcamento = @orcamento, ID_CatFin = @id_catfin, Saldo = 'SALDO DISPONÍVEL', ID_Conta = @id_conta, ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), Registro = GETDATE() WHERE ID_Movimentacao = @id";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@descricao", movimentacao.Descricao);
            update.Parameters.AddWithValue("@valor", movimentacao.Valor);
            update.Parameters.AddWithValue("@data", movimentacao.Data);
            update.Parameters.AddWithValue("@matricula", movimentacao.Matricula);
            update.Parameters.AddWithValue("@id_catfin", movimentacao.ID_CatFin);
            update.Parameters.AddWithValue("@id_conta", movimentacao.ID_Conta);
            update.Parameters.AddWithValue("@id", movimentacao.ID_Movimentacao);
            update.Parameters.AddWithValue("@orcamento", movimentacao.Orcamento);
            update.Parameters.AddWithValue("@valor_previsto", movimentacao.Valor_Previsto);
            update.Parameters.AddWithValue("@data_prevista", movimentacao.Data_Prevista);
            update.Parameters.AddWithValue("@previsao", previsao);
            update.Parameters.AddWithValue("@pagamento", pagamento);
            update.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Movimentação editada!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void RegistrarLicitacao(Licitacao licitacao)
        {
            string comando = "INSERT INTO tbl_Licitacoes (Descricao, Valor, Data, Motivo, Status, Responsavel) VALUES (@descricao, @valor, @data, @motivo, @status, @operador)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@descricao", licitacao.Descricao);
            insert.Parameters.AddWithValue("@valor", licitacao.Valor);
            insert.Parameters.AddWithValue("@data", licitacao.Data);
            insert.Parameters.AddWithValue("@operador", licitacao.Responsavel);
            insert.Parameters.AddWithValue("@status", licitacao.Status);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Movimentação registrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarMovimentacao(int id)
        {
            string comando = "DELETE FROM tbl_MovimentacoesFin WHERE ID_Movimentacao = @id";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id", id);
            delete.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void RegistrarSuprimentoDeCaixa(int id_caixa, string conta, decimal valor)
        {
            string comando = "INSERT INTO tbl_MovimentacoesCaixa (ID_Caixa, Tipo_Movimentacao, Valor, ID_Recebedor, Data) VALUES (@id_caixa, 'Suprimento', @valor, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE())";
            //string cmd = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, ID_Colaborador, Saldo, ID_Conta, Registro) VALUES ('SUPRIMENTO DE CAIXA', @valor, (CONVERT(DATE, GETDATE())), (SELECT ID_CatFin FROM tbl_CategoriaFinanceira WHERE Categoria = 'SUPRIMENTO DE CAIXA'), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO DISPONÍVEL', (SELECT ID_Conta FROM tbl_Contas WHERE Categoria = 'Trocado' AND ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_Terminais WHERE ID_Terminal = (SELECT ID_Terminal FROM tbl_CaixasAnteriores WHERE ID_Caixa = @id_caixa))), GETDATE())";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_caixa", id_caixa);
                insert.Parameters.AddWithValue("@valor", valor);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            //using (SqlCommand insert = new SqlCommand(cmd, conexao.Conectar()))
            //{
            //    insert.Parameters.AddWithValue("@valor", -valor);
            //    insert.Parameters.AddWithValue("@id_caixa", id_caixa);
            //    insert.Parameters.AddWithValue("@matricula", Program.matricula);
            //    insert.Parameters.AddWithValue("@conta", conta);
            //    insert.ExecuteNonQuery();
            //}

            conexao.Desconectar();

            MessageBox.Show("Suprimento registrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<MovimentacaoCaixa> TrazerSangriasESuprimentos(DateTime data, int id_estabelecimento)
        {
            List<MovimentacaoCaixa> lista = new List<MovimentacaoCaixa>();
            string comando = "SELECT ID_MovimentacaoCaixa, Tipo_Movimentacao, Valor, Data, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_MovimentacoesCaixa.ID_Operador) AS Operador, (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_MovimentacoesCaixa.ID_Intermediario), (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_MovimentacoesCaixa.ID_Recebedor) FROM tbl_MovimentacoesCaixa WHERE CONVERT(DATE, Data) = CONVERT(DATE, @data) AND (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_Terminais WHERE ID_Terminal = (SELECT ID_Terminal FROM tbl_CaixasAnteriores WHERE ID_Caixa = tbl_MovimentacoesCaixa.ID_Caixa))) = @id_estabelecimento ORDER BY Data DESC";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@data", data);
                select.Parameters.AddWithValue("@id_estabelecimento", id_estabelecimento);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(new MovimentacaoCaixa
                        {
                            ID = Convert.ToInt32(leitor[0]),
                            Tipo = leitor[1].ToString(),
                            Valor = Convert.ToDecimal(leitor[2]),
                            Hora = Convert.ToDateTime(leitor[3]).ToShortDateString() + " " + Convert.ToDateTime(leitor[3]).ToShortTimeString(),
                            Operador = leitor[4].ToString(),
                            Intermedio = leitor[5].ToString(),
                            Recebedor = leitor[6].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return lista;
        }

        public void ApagarMovimentacaoDeCaixaPendente(int id)
        {
            string comando = "DELETE FROM tbl_MovimentacoesCaixa WHERE ID_MovimentacaoCaixa = @id";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id", id);
            delete.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void ConfirmarRecebimentoDaSangria(MovimentacaoCaixa sangria)
        {
            int id = sangria.ID;
            string comando = "UPDATE tbl_MovimentacoesCaixa SET ID_Recebedor = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) WHERE ID_MovimentacaoCaixa = @id";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id", id);
            update.Parameters.AddWithValue("@matricula", Program.matricula);
            update.ExecuteNonQuery();
            conexao.Desconectar();

            //string cmd = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_Colaborador, Saldo, ID_Conta, ID_CatFin, Registro) VALUES (@descricao, @valor, @data, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO DISPONÍVEL', (SELECT ID_Conta FROM tbl_Contas WHERE Categoria = 'Espécie' AND ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_Terminais WHERE ID_Terminal = (SELECT ID_Terminal FROM tbl_CaixasAnteriores WHERE ID_Caixa = (SELECT ID_Caixa FROM tbl_MovimentacoesCaixa WHERE ID_MovimentacaoCaixa = @id_movimentacao)))), (SELECT ID_CatFin FROM tbl_CategoriaFinanceira WHERE Categoria = 'SANGRIA'), GETDATE())";
            //SqlCommand insert = new SqlCommand(cmd, conexao.Conectar());
            //insert.Parameters.AddWithValue("@valor", sangria.Valor);
            //insert.Parameters.AddWithValue("@descricao", sangria.Tipo.ToUpper());
            //insert.Parameters.AddWithValue("@matricula", Program.matricula);
            //insert.Parameters.AddWithValue("@id_movimentacao", id);
            //insert.Parameters.AddWithValue("@data", DateTime.Now.ToShortDateString());
            //insert.ExecuteNonQuery();
            //conexao.Desconectar();
            MessageBox.Show("Recebimento registrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<string> ListaDeCaixasAbertos()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT (CONVERT(VARCHAR(15), ID_Caixa) + ' - ' + (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_CaixasAnteriores.ID_Colaborador)) AS Caixa FROM tbl_CaixasAnteriores WHERE Status = 'Aberto'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(leitor[0].ToString());
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public decimal MovimentacoesDoDia(string movimentacao, DateTime data)
        {
            string comando = "SELECT SUM(Valor) FROM tbl_MovimentacoesCaixa WHERE CONVERT(DATE, Data) = CONVERT(DATE, @data) AND Tipo_Movimentacao = @movimentacao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            select.Parameters.AddWithValue("@movimentacao", movimentacao);
            decimal valor;
            try { valor = Convert.ToDecimal(select.ExecuteScalar()); }
            catch { valor = 0; }

            conexao.Desconectar();
            return valor;
        }

        public decimal SaldoEmDinheiroDoDia(DateTime data)
        {
            string comando = "SELECT SUM(Valor) FROM tbl_MovimentacoesFin WHERE Data = CONVERT(DATE, @data) AND ID_Conta = 3";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal valor;
            try { valor = Convert.ToDecimal(select.ExecuteScalar()); }
            catch { valor = 0; }

            conexao.Desconectar();
            return valor;
        }

        public decimal ReceitasDoDia(DateTime data)
        {
            string comando = "SELECT SUM(Valor) FROM tbl_MovimentacoesFin WHERE Data = CONVERT(DATE, @data) AND Saldo = 'SALDO DISPONÍVEL' AND Valor > 0";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal valor;
            try { valor = Convert.ToDecimal(select.ExecuteScalar()); }
            catch { valor = 0; }

            conexao.Desconectar();
            return valor;
        }

        public decimal DespesasDoDia(DateTime data)
        {
            string comando = "SELECT SUM(Valor) FROM tbl_MovimentacoesFin WHERE Data = CONVERT(DATE, @data) AND Saldo = 'SALDO DISPONÍVEL' AND Valor < 0";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal valor;
            try { valor = Convert.ToDecimal(select.ExecuteScalar()); }
            catch { valor = 0; }

            conexao.Desconectar();
            return valor;
        }

        public decimal ProLaboreDoMes()
        {
            string comando = "SELECT ISNULL(IIF((SELECT SUM(Valor) FROM tbl_MovimentacoesFin WHERE ID_CatFin = 34 AND MONTH(Data) = MONTH(GETDATE())) < 0, -(SELECT SUM(Valor) FROM tbl_MovimentacoesFin WHERE ID_CatFin = 34 AND MONTH(Data) = MONTH(GETDATE())), (SELECT SUM(Valor) FROM tbl_MovimentacoesFin WHERE ID_CatFin = 34 AND MONTH(Data) = MONTH(GETDATE()))), 0)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            decimal valor;
            try { valor = Convert.ToDecimal(select.ExecuteScalar()); } catch { valor = 0; }
            conexao.Desconectar();

            return valor;
        }

        public bool VerificarPrevisaoDePagamento(int id_movimentacao)
        {
            string comando = "SELECT COUNT(*) FROM tbl_Previsoes_de_Gastos WHERE ID_MovimentacaoFin = @id_movimentacao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_movimentacao", id_movimentacao);
            bool verificar = false;
            int quantidade = Convert.ToInt32(select.ExecuteScalar());

            if (quantidade > 0) { verificar = true; } else { verificar = false; }

            conexao.Desconectar();
            return verificar;
        }

        public bool VerificarBoleto(int id_movimentacao)
        {
            string comando = "SELECT COUNT(*) FROM tbl_Boletos WHERE ID_MovimentacaoFin = @id_movimentacao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_movimentacao", id_movimentacao);
            bool verificar = false;
            int quantidade = Convert.ToInt32(select.ExecuteScalar());

            if (quantidade > 0) { verificar = true; } else { verificar = false; }

            conexao.Desconectar();
            return verificar;
        }

        public void AlterarStatusDaPrevisao(int id_movimentacao)
        {
            string comando = "UPDATE tbl_Previsoes_de_Gastos SET Status = 'Pendente', Data_Pagamento = NULL WHERE ID_MovimentacaoFin = @id_movimentacao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_movimentacao", id_movimentacao);
            select.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void AlterarStatusDoBoleto(int id_movimentacao)
        {
            string comando = "UPDATE tbl_Boletos SET Status = 'Pendente', Data_Pagamento = NULL WHERE ID_MovimentacaoFin = @id_movimentacao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_movimentacao", id_movimentacao);
            select.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void RegistrarMovimentacaoDeCaixaAvulsa(string movimentacao, decimal valor, string conta, DateTime data)
        {
            if (movimentacao == "Sangria")
            {
                string cmd = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, ID_Colaborador, Saldo, Conta, Registro, Previsto) VALUES ('SANGRIA DE CAIXA', @valor, @data, 7, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO DISPONÍVEL', @conta, GETDATE(), 0)";
                SqlCommand insert2 = new SqlCommand(cmd, conexao.Conectar());
                insert2.Parameters.AddWithValue("@valor", valor);
                insert2.Parameters.AddWithValue("@matricula", Program.matricula);
                insert2.Parameters.AddWithValue("@conta", conta);
                insert2.Parameters.AddWithValue("@data", data);
                insert2.ExecuteNonQuery();
            }
            else
            {
                string cmd = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, ID_Colaborador, Saldo, Conta, Registro, Previsto) VALUES ('SUPRIMENTO DE CAIXA', @valor, @data, 1, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO DISPONÍVEL', @conta, GETDATE(), 0)";
                SqlCommand insert2 = new SqlCommand(cmd, conexao.Conectar());
                insert2.Parameters.AddWithValue("@valor", -valor);
                insert2.Parameters.AddWithValue("@matricula", Program.matricula);
                insert2.Parameters.AddWithValue("@conta", conta);
                insert2.Parameters.AddWithValue("@data", data);
                insert2.ExecuteNonQuery();
            }

            conexao.Desconectar();
            MessageBox.Show("Movimentação registrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void RegistrarTransferenciaEntreContas(Transferencia transferencia)
        {
            string comando = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_Conta, Registro, ID_Colaborador, Previsto, ID_CatFin, Valor_Previsto, Data_Prevista, Orcamento) VALUES ((SELECT Descricao FROM tbl_Contas WHERE ID_Conta = @id_origem) + ' > ' + (SELECT Descricao FROM tbl_Contas WHERE ID_Conta = @id_destino), @valor, @data, @id_origem, GETDATE(), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 0, 121, @valor, @data, 0)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@valor", -transferencia.Valor);
                insert.Parameters.AddWithValue("@id_origem", transferencia.ID_Origem);
                insert.Parameters.AddWithValue("@id_destino", transferencia.ID_Destino);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.Parameters.AddWithValue("@data", transferencia.Data);
                insert.ExecuteNonQuery();
            }

            string comando1 = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_Conta, Registro, ID_Colaborador, Previsto, ID_CatFin, Valor_Previsto, Data_Prevista, Orcamento) VALUES ((SELECT Descricao FROM tbl_Contas WHERE ID_Conta = @id_origem) + ' > ' + (SELECT Descricao FROM tbl_Contas WHERE ID_Conta = @id_destino), @valor, @data, @id_destino, GETDATE(), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 0, 121, @valor, @data, 0)";

            using (SqlCommand insert = new SqlCommand(comando1, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@valor", transferencia.Valor);
                insert.Parameters.AddWithValue("@id_origem", transferencia.ID_Origem);
                insert.Parameters.AddWithValue("@id_destino", transferencia.ID_Destino);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.Parameters.AddWithValue("@data", transferencia.Data);
                insert.ExecuteNonQuery();
            }
 
            conexao.Desconectar();

            MessageBox.Show("Transferência realizada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public Movimentacao TrazerInformacoesDaMovimentacao(int id_movimentacao)
        {
            Movimentacao movimentacao = new Movimentacao();

            string comando = "SELECT Descricao, ISNULL(Valor, 0) AS Valor, ID_CatFin, Saldo, ID_Conta, ISNULL(Data, '01/01/1901') AS Data, ISNULL(Valor_Previsto, 0) AS Valor_Previsto, ISNULL(Data_Prevista, '01/01/1901') AS Data_Prevista, Orcamento FROM tbl_MovimentacoesFin WHERE ID_Movimentacao = @id_movimentacao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_movimentacao", id_movimentacao);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        movimentacao.ID_Movimentacao = id_movimentacao;
                        movimentacao.Descricao = leitor[0].ToString();
                        movimentacao.Valor = Convert.ToDecimal(leitor[1]);
                        movimentacao.ID_CatFin = Convert.ToInt32(leitor[2]);
                        movimentacao.Saldo = leitor[3].ToString();
                        movimentacao.ID_Conta = Convert.ToInt32(leitor[4]);
                        movimentacao.Data = Convert.ToDateTime(leitor[5]);
                        movimentacao.Valor_Previsto = Convert.ToDecimal(leitor[6]);
                        movimentacao.Data_Prevista = Convert.ToDateTime(leitor[7]);
                        movimentacao.Orcamento = Convert.ToBoolean(leitor[8]);
                    }
                }
            }

            conexao.Desconectar();

            return movimentacao;
        }

        #endregion

        #region Contabilidade

        public decimal VerificarSaldoDaConta(int id_conta)
        {
            decimal saldo;
            string comando = "SELECT ISNULL(SUM(Valor), 0) FROM tbl_MovimentacoesFin WHERE ID_Conta = @id_conta";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_conta", id_conta);
                saldo = Convert.ToDecimal(select.ExecuteScalar());

            }

            conexao.Desconectar();
            return saldo;
        }

        public decimal VerificarSaldoContabil(string Saldo)
        {
            string comando = "SELECT SUM (Valor) FROM tbl_MovimentacoesFin WHERE Saldo = @saldo";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@saldo", Saldo);
            decimal saldo;
            try
            {
                saldo = Convert.ToDecimal(select.ExecuteScalar());
            }
            catch
            {
                saldo = 0;
            }
            conexao.Desconectar();
            return saldo;
        }

        public Periodo PeriodoAutomatico()
        {
            DateTime termino = DateTime.Now.Date;
            DateTime inicio = new DateTime(termino.Year, termino.AddMonths(-3).Month, termino.Day);
            Periodo Periodo = new Periodo() { Inicio = inicio, Termino = termino };

            return Periodo;
        }

        public Informacoes_Contabeis InformacoesContabeis()
        {
            Periodo Periodo = PeriodoAutomatico();
            Informacoes_Contabeis informacoes = new Informacoes_Contabeis();
            informacoes.Periodo = Convert.ToInt32(Periodo.Termino.Subtract(Periodo.Inicio).TotalDays);
            string comando = "InformacoesContabeis @inicio, @termino";
            SqlCommand procedure = new SqlCommand(comando, conexao.Conectar());
            procedure.Parameters.AddWithValue("@inicio", Periodo.Inicio);
            procedure.Parameters.AddWithValue("@termino", Periodo.Termino);
            SqlDataReader leitor = procedure.ExecuteReader();

            while (leitor.Read())
            {
                if (leitor[0].ToString() == "Custo das Mercadorias") { informacoes.CMV = Convert.ToDecimal(leitor[1]); }
                if (leitor[0].ToString() == "Despesa Fixa (Média)") { informacoes.Despesa_Fixa = Convert.ToDecimal(leitor[1]); }
                if (leitor[0].ToString() == "Despesa Variável") { informacoes.Despesa_Variavel = Convert.ToDecimal(leitor[1]); }
                if (leitor[0].ToString() == "Produtos Vendidos") { informacoes.Produtos_Vendidos = Convert.ToInt32(leitor[1]); }
                if (leitor[0].ToString() == "Receita de Vendas") { informacoes.Receita_Vendas = Convert.ToDecimal(leitor[1]); }
            }
            leitor.Close();
            conexao.Desconectar();

            return informacoes;
        }

        #region Balanço Patrimonial
        public decimal SaldoEmEspecie()
        {
            string comando = "SELECT SUM (Valor) AS Total FROM tbl_MovimentacoesFin WHERE Conta = 'DINHEIRO EM CAIXA' AND Saldo = 'SALDO DISPONÍVEL'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            decimal saldo;
            if (select.ExecuteScalar() == null) { saldo = 0; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { saldo = 0; }
            else { saldo = Convert.ToDecimal(select.ExecuteScalar()); }
            conexao.Desconectar();
            return saldo;
        }
        public decimal SaldoDeEstoqueFisico()
        {
            string comando = "SELECT SUM (Preco_Custo * Estoque_Atual) FROM tbl_Produtos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            decimal saldo;
            if (select.ExecuteScalar() == null) { saldo = 0; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { saldo = 0; }
            else { saldo = Convert.ToDecimal(select.ExecuteScalar()); }
            conexao.Desconectar();
            return saldo;
        }
        public decimal SaldoFinanceiroDeEstoque()
        {
            string comando = "SELECT SUM (Saldo_Mercadoria) FROM tbl_Encapsulamento";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            decimal saldo;
            if (select.ExecuteScalar() == null) { saldo = 0; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { saldo = 0; }
            else { saldo = Convert.ToDecimal(select.ExecuteScalar()); }
            conexao.Desconectar();
            return saldo;
        }
        public decimal ValorDosAtivosImobilizados()
        {
            string comando = "select SUM (Quantidade * Custo_Un) AS Total from tbl_AtivosImobilizados";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            decimal saldo;
            if (select.ExecuteScalar() == null) { saldo = 0; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { saldo = 0; }
            else { saldo = Convert.ToDecimal(select.ExecuteScalar()); }

            //CRIAR MÉTODO QUE CALCULARÁ A DEPRECIAÇÃO
            //Percentual de Depreciação: Taxa de depreciação * anos
            conexao.Desconectar();
            return saldo;
        }
        public decimal ExigivelACurtoPrazoFornecedores()
        {
            string comando = "SELECT SUM (Valor) AS Total FROM tbl_Boletos WHERE Status = 'Pendente'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            decimal saldo;
            if (select.ExecuteScalar() == null) { saldo = 0; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { saldo = 0; }
            else { saldo = Convert.ToDecimal(select.ExecuteScalar()); }
            conexao.Desconectar();
            return saldo;
        }
        public decimal ExigivelACurtoPrazoCartoes()
        {
            string comando = "SELECT SUM (Valor) AS Total FROM tbl_Fatura WHERE Status = 'Pendente'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            decimal saldo;
            if (select.ExecuteScalar() == null) { saldo = 0; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { saldo = 0; }
            else { saldo = Convert.ToDecimal(select.ExecuteScalar()); }
            conexao.Desconectar();
            return saldo;
        }
        public decimal EmprestimosParceladoRestante()
        {
            string comando = "SELECT SUM ((Qtd_Parcelas - Parcelas_Pagas) * ((Valor_Recebido * Juros_am / 100) + (Valor_Recebido / Qtd_Parcelas))) AS 'Parcelado Restante' FROM tbl_Endividamento";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            decimal saldo;
            if (select.ExecuteScalar() == null) { saldo = 0; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { saldo = 0; }
            else { saldo = Convert.ToDecimal(select.ExecuteScalar()); }
            conexao.Desconectar();
            return saldo;
        }
        #endregion

        #endregion

        #region Vendas do Dia
        public List<ProdutoVenda> UltimasVendas(DateTime data)
        {
            List<ProdutoVenda> lista = new List<ProdutoVenda>();
            string comando = "SELECT ID_Venda, (SELECT COUNT (Quantidade) FROM tbl_ProdutosVendidos WHERE ID_Venda = tbl_Vendas.ID_Venda), Valor_Venda, CONVERT(TIME, Data_Venda) AS Hora FROM tbl_Vendas WHERE CONVERT (DATE, Data_Venda) = @data ORDER BY Data_Venda DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());

            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(new ProdutoVenda
                {
                    ID_Produto = Convert.ToInt32(leitor[0]),
                    Quantidade = Convert.ToInt32(leitor[1]),
                    Total = Convert.ToDecimal(leitor[2]),
                    Hora = Convert.ToDateTime(leitor[3].ToString()).ToShortTimeString()
                });
            }

            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<Venda_Por_Hora> VendasPorHora(DateTime data)
        {
            List<Venda_Por_Hora> vendas = new List<Venda_Por_Hora>();

            string comando = "[VendasPorHora] @data";

            using (SqlCommand procedure = new SqlCommand(comando, conexao.Conectar()))
            {
                procedure.Parameters.AddWithValue("@data", data);
                using (SqlDataReader leitor = procedure.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        vendas.Add(new Venda_Por_Hora
                        {
                            Hora = leitor[0].ToString(),
                            Valor = (decimal)leitor[1]
                        });
                    }
                }
            }

            return vendas;
        }

        public List<Venda_Por_Forma> VendasPorFormaDePagamento(DateTime data)
        {
            List<Venda_Por_Forma> vendas = new List<Venda_Por_Forma>();

            string comando = "[VendasPorFormaDePagamento] @data";

            using (SqlCommand procedure = new SqlCommand(comando, conexao.Conectar()))
            {
                procedure.Parameters.AddWithValue("@data", data);
                using (SqlDataReader leitor = procedure.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        vendas.Add(new Venda_Por_Forma
                        {
                            Forma_Pagamento = leitor[0].ToString(),
                            Valor = (decimal)leitor[1]
                        });
                    }
                }
            }

            return vendas;
        }

        public List<Informacoes_Vendas> VendaPorDiaDoMes(int mes, int ano)
        {
            List<Informacoes_Vendas> vendas = new List<Informacoes_Vendas>();
            string comando = "SELECT CONVERT(DATE, Data_Venda) AS Data, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE (SELECT CONVERT(DATE, Data_Venda) FROM tbl_Vendas WHERE ID_Venda = tbl_PagamentosRecebidos.ID_Venda) = CONVERT(DATE, T1.Data_Venda)) AS Valor FROM tbl_Vendas AS T1 WHERE MONTH(Data_Venda) = @mes AND YEAR(Data_Venda) = @ano GROUP BY CONVERT(DATE, Data_Venda) ORDER BY Data";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@mes", mes);
                select.Parameters.AddWithValue("@ano", ano);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        vendas.Add(new Informacoes_Vendas
                        {
                            Data = Convert.ToDateTime(leitor[0]),
                            Receita_Vendas = (decimal)leitor[1]
                        });
                    }
                }
            }

            return vendas;
        }

        #endregion

        #region Contas

        public List<string> PreencherComboCategoriasDasContas()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT DISTINCT Categoria FROM tbl_Contas ORDER BY Categoria";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(Convert.ToString(leitor[0]));
                    }
                }
            }

            conexao.Desconectar();

            return lista;
        }

        public List<Banco> ListaDeBancos()
        {
            List<Banco> bancos = new List<Banco>();

            string comando = "SELECT ID_Banco, Descricao, Cod_Banco FROM tbl_Bancos ORDER BY Descricao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        bancos.Add(new Banco
                        {
                            ID_Banco = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Cod_Banco = leitor[2].ToString(),
                        });
                    }
                }
            }

            conexao.Desconectar();

            return bancos;
        }

        public List<Conta> ListaDeContas()
        {
            List<Conta> contas = new List<Conta>();

            string comando = "SELECT ID_Conta, Descricao, Categoria, ISNULL((SELECT SUM(Valor) FROM tbl_MovimentacoesFin WHERE ID_Conta = tbl_Contas.ID_Conta), 0) AS Valor FROM tbl_Contas ORDER BY Descricao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        contas.Add(new Conta
                        {
                            ID_Conta = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Categoria = leitor[2].ToString(),
                            Saldo = Convert.ToDecimal(leitor[3])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return contas;
        }

        public void AdicionarConta(Conta conta)
        {
            string comando = "INSERT INTO tbl_Contas (Descricao, Categoria, ID_Estabelecimento, Externa, Agencia, N_Conta, ID_Banco) VALUES (@descricao, @categoria, IIF(@id_estabelecimento = 0, NULL, @id_estabelecimento), @externa, @agencia, @conta, IIF(@id_banco = 0, NULL, @id_banco))";
            
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", conta.Descricao);
                insert.Parameters.AddWithValue("@categoria", conta.Categoria);
                insert.Parameters.AddWithValue("@id_estabelecimento", conta.ID_Estabelecimento);
                insert.Parameters.AddWithValue("@externa", conta.Externa);
                insert.Parameters.AddWithValue("@agencia", conta.Agencia);
                insert.Parameters.AddWithValue("@conta", conta.N_Conta);
                insert.Parameters.AddWithValue("@id_banco", conta.ID_Banco);

                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();            
        }

        public Conta TrazerInformacoesDaConta(int id_conta)
        {
            Conta conta = new Conta();

            string comando = "SELECT ID_Conta, Descricao, Categoria, Agencia, N_Conta, ID_Banco, ID_Estabelecimento, Externa FROM tbl_Contas WHERE ID_Conta = @id_conta";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_conta", id_conta);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        conta.ID_Conta = Convert.ToInt32(leitor[0]);
                        conta.Descricao = leitor[1].ToString();
                        conta.Categoria = leitor[2].ToString();
                        conta.Agencia = leitor[3].ToString();
                        conta.N_Conta = leitor[4].ToString();

                        try { conta.ID_Banco = Convert.ToInt32(leitor[5]); } 
                        catch { conta.ID_Banco = 0; }
                        try { conta.ID_Estabelecimento = Convert.ToInt32(leitor[6]); } 
                        catch { conta.ID_Estabelecimento = 0; }

                        conta.Externa = Convert.ToBoolean(leitor[7]);
                    }
                }
            }

            conexao.Desconectar();

            return conta;
        }

        public void EditarConta(Conta conta)
        {
            string comando = "UPDATE tbl_Contas SET Descricao = @descricao, Categoria = @categoria, ID_Estabelecimento = IIF(@id_estabelecimento = 0, NULL, @id_estabelecimento), Externa = @externa, Agencia = @agencia, N_Conta = @conta, ID_Banco = IIF(@id_banco = 0, NULL, @id_banco) WHERE ID_Conta = @id_conta";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_conta", conta.ID_Conta);
                update.Parameters.AddWithValue("@descricao", conta.Descricao);
                update.Parameters.AddWithValue("@categoria", conta.Categoria);
                update.Parameters.AddWithValue("@id_estabelecimento", conta.ID_Estabelecimento);
                update.Parameters.AddWithValue("@externa", conta.Externa);
                update.Parameters.AddWithValue("@agencia", conta.Agencia);
                update.Parameters.AddWithValue("@conta", conta.N_Conta);
                update.Parameters.AddWithValue("@id_banco", conta.ID_Banco);

                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarConta(int id_conta)
        {
            string comando = "DELETE FROM tbl_Contas WHERE ID_Conta = @id_conta";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_conta", id_conta);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public List<Conta> PreencherComboContas()
        {
            List<Conta> contas = new List<Conta>();

            string comando = "SELECT ID_Conta, Descricao FROM tbl_Contas ORDER BY Descricao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        contas.Add(new Conta
                        {
                            ID_Conta = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return contas;
        }

        #endregion

        #region Saldo
        public List<Conta> TrazerSaldoDasContas(DateTime data)
        {
            List<Conta> contas = new List<Conta>();
            string comando = "SELECT Descricao, ISNULL((SELECT SUM(Valor) FROM tbl_MovimentacoesFin WHERE ID_Conta = tbl_Contas.ID_Conta AND CONVERT(DATE, Data) <= CONVERT(DATE, @data)), 0) AS Valor FROM tbl_Contas ORDER BY Descricao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                contas.Add(new Conta
                {
                    Descricao = leitor[0].ToString(),
                    Saldo = Convert.ToDecimal(leitor[1])
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return contas;
        }

        public List<Saldo> TrazerSaldosDisponiveis(DateTime data)
        {
            List<Saldo> saldos = new List<Saldo>();
            string comando = "SELECT Saldo, SUM (Valor) as Valor FROM tbl_MovimentacoesFin WHERE Saldo = 'SALDO DISPONÍVEL' AND Data <= @data GROUP BY Saldo UNION SELECT Saldo, SUM (Valor) as Valor FROM tbl_MovimentacoesFin WHERE Saldo = 'SALDO MERCADORIA' AND Data <= @data GROUP BY Saldo";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                saldos.Add(new Saldo
                {
                    Descricao = leitor[0].ToString(),
                    Valor = Convert.ToDecimal(leitor[1])
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return saldos;
        }

        public decimal TrazerSaldo(DateTime data)
        {
            string comando = "SELECT SUM (Valor) as Valor FROM tbl_MovimentacoesFin WHERE Saldo = 'SALDO DISPONÍVEL' AND Data <= @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            decimal saldo;
            try { saldo = Convert.ToDecimal(select.ExecuteScalar()); }
            catch { saldo = 0; }

            return saldo;
        }
        #endregion

        #region Metas

        public List<Informacoes_Vendas> TrazerVendasNoPeriodo(DateTime inicio, DateTime termino, int id_estabelecimento)
        {
            List<Informacoes_Vendas> Vendas = new List<Informacoes_Vendas>();

            List<Informacoes_Vendas> Vendas_softcom = TrazerVendasNoPeriodoSoftcom(inicio, termino);
            Vendas = Vendas_softcom;

            DateTime ultimo_dia = new DateTime();

            try
            { 
                ultimo_dia = Vendas.Max(x => x.Data);
            }
            catch
            {
                ultimo_dia = inicio;
            }


            bool marba_software;

            if (Vendas.Count == 0)
            {
                marba_software = true;
            }
            else if (ultimo_dia < termino)
            {
                marba_software = true;
            }
            else
            {
                marba_software = false;
            }

            if (marba_software)
            {
                List<Informacoes_Vendas> Vendas_marbasoftware = TrazerVendasNoPeriodoMarbaSoftware(ultimo_dia, termino, id_estabelecimento);

                foreach (Informacoes_Vendas Venda in Vendas_marbasoftware)
                {
                    Vendas.Add(Venda);
                }
            }

            conexao.Desconectar();

            return Vendas;
        }

        public List<Informacoes_Vendas> TrazerVendasNoPeriodoMarbaSoftware(DateTime inicio, DateTime termino, int id_estabelecimento)
        {
            List<Informacoes_Vendas> Vendas = new List<Informacoes_Vendas>();
            string comando = "SELECT CONVERT(DATE, Data_Venda) AS Data, SUBSTRING(dbo.fn_Dia_Da_Semana_Extenso(CONVERT(DATE, Data_Venda)), 1, 1) + LOWER(SUBSTRING(dbo.fn_Dia_Da_Semana_Extenso(CONVERT(DATE, Data_Venda)), 2, LEN(dbo.fn_Dia_Da_Semana_Extenso(CONVERT(DATE, Data_Venda))) - 1)) AS Dia, ISNULL((SELECT SUM(Preco_Custo) FROM tbl_ProdutosVendidos WHERE (SELECT CONVERT(DATE, Data_Venda) FROM tbl_Vendas WHERE ID_Venda = tbl_ProdutosVendidos.ID_Venda AND (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_Terminais WHERE ID_Terminal = (SELECT ID_Terminal FROM tbl_CaixasAnteriores WHERE ID_Caixa = tbl_Vendas.ID_Caixa))) = @id_estabelecimento) = CONVERT(DATE, Data_Venda)), 0) AS CMV, ISNULL(SUM(Valor_Venda), 0) AS Receita, ISNULL((SELECT SUM(Quantidade) FROM tbl_ProdutosVendidos WHERE CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_Terminais WHERE ID_Terminal = (SELECT ID_Terminal FROM tbl_CaixasAnteriores WHERE ID_Caixa = tbl_Vendas.ID_Caixa))) = @id_estabelecimento AND tbl_ProdutosVendidos.ID_Venda = tbl_Vendas.ID_Venda)) = CONVERT(DATE, Data_Venda)), 0) AS Produtos, ISNULL(COUNT(ID_Venda), 0) AS Vendas FROM tbl_Vendas WHERE (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_Terminais WHERE ID_Terminal = (SELECT ID_Terminal FROM tbl_CaixasAnteriores WHERE ID_Caixa = tbl_Vendas.ID_Caixa))) = @id_estabelecimento AND CONVERT(DATE, Data_Venda) BETWEEN @inicio AND @termino GROUP BY CONVERT(DATE, Data_Venda) ORDER BY Data";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@inicio", inicio);
                select.Parameters.AddWithValue("@termino", termino);
                select.Parameters.AddWithValue("@id_estabelecimento", id_estabelecimento);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Vendas.Add(new Informacoes_Vendas
                        {
                            Data = Convert.ToDateTime(leitor[0]),
                            Dia_da_semana = leitor[1].ToString(),
                            CMV = Convert.ToDecimal(leitor[2]),
                            Receita_Vendas = Convert.ToDecimal(leitor[3]),
                            Produtos_Vendidos = Convert.ToInt32(leitor[4]),
                            Qtd_Vendas = Convert.ToInt32(leitor[5]),
                            Simulacao = true
                        });
                    }
                }
            }

            return Vendas;
        }

        public List<Informacoes_Vendas> TrazerVendasNoPeriodoSoftcom(DateTime inicio, DateTime termino)
        {
            List<Informacoes_Vendas> Vendas = new List<Informacoes_Vendas>();
            string comando = "SELECT CONVERT(VARCHAR(10), Data, 103) AS Data, SUBSTRING(dbo.fn_Dia_Da_Semana_Extenso(Data), 1, 1) + LOWER(SUBSTRING(dbo.fn_Dia_Da_Semana_Extenso(Data), 2, LEN(dbo.fn_Dia_Da_Semana_Extenso(Data)) - 1)) AS Dia, Compra, Venda, Produtos, Vendas FROM Vendas_Softcom WHERE Data BETWEEN @inicio AND @termino";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@inicio", inicio);
                select.Parameters.AddWithValue("@termino", termino);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Vendas.Add(new Informacoes_Vendas
                        {
                            Data = Convert.ToDateTime(leitor[0].ToString()),
                            Dia_da_semana = leitor[1].ToString(),
                            CMV = Convert.ToDecimal(leitor[2]),
                            Receita_Vendas = Convert.ToDecimal(leitor[3]),
                            Produtos_Vendidos = Convert.ToInt32(leitor[4]),
                            Qtd_Vendas = Convert.ToInt32(leitor[5]),
                            Simulacao = true
                        });
                    }
                }
            }

            return Vendas;
        }

        public decimal CustosFixosDaRede()
        {
            string comando = "SELECT ISNULL(SUM(Valor), 0) AS Valor FROM tbl_Despesas WHERE ID_Estabelecimento IS NULL";

            decimal custo = 0;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                custo = Convert.ToDecimal(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return custo;
        }

        public decimal CustosFixosPorEstabelecimento(int id_estabelecimento)
        {
            string comando = "SELECT ISNULL(SUM(Valor), 0) AS Valor FROM tbl_Despesas WHERE ID_Estabelecimento = @id_estabelecimento";
            decimal custo = 0;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_estabelecimento", id_estabelecimento);
                custo = Convert.ToDecimal(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return custo;
        }

        public decimal CustoVariavelMensal(int mes, int ano)
        {
            decimal cmv;
            string comando = "SELECT DISTINCT (SELECT ISNULL(-SUM(Valor), 0) FROM tbl_MovimentacoesFin WHERE MONTH(Data) = @mes AND YEAR(Data) = @ano AND ID_CatFin = 33) + (SELECT ISNULL(-SUM(Valor), 0) FROM tbl_MovimentacoesFin WHERE MONTH(Data) = @mes AND YEAR(Data) = @ano AND ID_CatFin = 35) FROM tbl_MovimentacoesFin";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@mes", mes);
            select.Parameters.AddWithValue("@ano", ano);
            cmv = Convert.ToDecimal(select.ExecuteScalar());
            conexao.Desconectar();

            return cmv;
        }
        public int QuantidadeDeProdutosVendidosNoMes(int mes, int ano)
        {
            int quantidade;
            string comando = "SELECT SUM(Produtos) FROM Vendas_Softcom WHERE MONTH(Data) = @mes AND YEAR(Data) = @ano";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@mes", mes);
            select.Parameters.AddWithValue("@ano", ano);
            quantidade = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();

            return quantidade;
        }
        public void AtualizarCustoVariavelUnitario(decimal valor)
        {
            string comando = "UPDATE tbl_Parametros SET Valor_Parametro = @valor WHERE Nome_Parametro = 'Custo variável unitário'";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@valor", valor);
            update.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("O custo variável unitário foi atualizado!", "Atualizado", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public List<string> MesesDeVendaSoftcom()
        {
            List<string> Meses = new List<string>();
            string comando = "SELECT DISTINCT MONTH(Data), CONVERT(VARCHAR, UPPER(FORMAT(Data, 'MMMM', 'pt-BR'))) + '/' + CONVERT(VARCHAR, YEAR(Data)) FROM Vendas_Softcom ORDER BY MONTH(Data) DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                Meses.Add(leitor[1].ToString());
            }
            leitor.Close();
            conexao.Desconectar();

            return Meses;
        }
        public void DefinirMeta(Meta meta, List<MetaDiaria> metasDiarias)
        {
            string comando = "INSERT INTO tbl_Metas (Periodo, Mes, Domingo, Segunda, Terca, Quarta, Quinta, Sexta, Sabado, ID_Estabelecimento) VALUES (@periodo, @mes, @domingo, @segunda, @terca, @quarta, @quinta, @sexta, @sabado, @id_estabelecimento)";
            string comando1 = "INSERT INTO tbl_MetasDiarias (Data, Meta, Status, ID_Estabelecimento) VALUES (@data, @meta, @status, @id_estabelecimento)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@periodo", meta.Periodo);
                insert.Parameters.AddWithValue("@mes", meta.Mes);
                insert.Parameters.AddWithValue("@domingo", meta.Domingo);
                insert.Parameters.AddWithValue("@segunda", meta.Segunda);
                insert.Parameters.AddWithValue("@terca", meta.Terca);
                insert.Parameters.AddWithValue("@quarta", meta.Quarta);
                insert.Parameters.AddWithValue("@quinta", meta.Quinta);
                insert.Parameters.AddWithValue("@sexta", meta.Sexta);
                insert.Parameters.AddWithValue("@sabado", meta.Sabado);
                insert.Parameters.AddWithValue("@id_estabelecimento", meta.ID_Estabelecimento);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            foreach (MetaDiaria metaDiaria in metasDiarias)
            {
                using (SqlCommand insert = new SqlCommand(comando1, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@data", metaDiaria.Dia);
                    insert.Parameters.AddWithValue("@meta", metaDiaria.Meta);
                    insert.Parameters.AddWithValue("@status", metaDiaria.Status);
                    insert.Parameters.AddWithValue("@id_estabelecimento", meta.ID_Estabelecimento);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Metas definidas com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public void EditarMeta(Meta meta)
        {
            string comando = "UPDATE tbl_Metas SET Mes = @mes, Domingo = @domingo, Segunda = @segunda, Terca = @terca, Quarta = @quarta, Quinta = @quinta, Sexta = @sexta, Sabado = @sabado WHERE Periodo = @periodo AND ID_Estabelecimento = @id_estabelecimento";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@periodo", meta.Periodo);
                update.Parameters.AddWithValue("@mes", meta.Mes);
                update.Parameters.AddWithValue("@domingo", meta.Domingo);
                update.Parameters.AddWithValue("@segunda", meta.Segunda);
                update.Parameters.AddWithValue("@terca", meta.Terca);
                update.Parameters.AddWithValue("@quarta", meta.Quarta);
                update.Parameters.AddWithValue("@quinta", meta.Quinta);
                update.Parameters.AddWithValue("@sexta", meta.Sexta);
                update.Parameters.AddWithValue("@sabado", meta.Sabado);
                update.Parameters.AddWithValue("@id_estabelecimento", meta.ID_Estabelecimento);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string texto;

            if (meta.Periodo == "Simulador") 
            { texto = "Médias do simulador editadas com sucesso!"; }
            else if (meta.Periodo == "Ponto de equilíbrio")
            { texto = "Ponto de equilíbrio redefinido."; }
            else { texto = "Metas editadas com sucesso!"; }

            MessageBox.Show(texto, "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public Meta TrazerMetasDoPeriodo(string periodo, int id_estabelecimento)
        {
            Meta meta = new Meta();
            string comando = "SELECT Domingo, Segunda, Terca, Quarta, Quinta, Sexta, Sabado FROM tbl_Metas WHERE Periodo = @periodo AND ID_Estabelecimento = @id_estabelecimento";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@periodo", periodo);
            select.Parameters.AddWithValue("@id_estabelecimento", id_estabelecimento);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                meta.Domingo = Convert.ToDecimal(leitor[0]);
                meta.Segunda = Convert.ToDecimal(leitor[1]);
                meta.Terca = Convert.ToDecimal(leitor[2]);
                meta.Quarta = Convert.ToDecimal(leitor[3]);
                meta.Quinta = Convert.ToDecimal(leitor[4]);
                meta.Sexta = Convert.ToDecimal(leitor[5]);
                meta.Sabado = Convert.ToDecimal(leitor[6]);
            }
            leitor.Close();

            conexao.Desconectar();

            return meta;
        }

        public List<MetaDiaria> ListaDeMetasDiariasDoMes(int mes, int ano, int id_estabelecimento)
        {
            Meta Simulador = TrazerMetasDoPeriodo("Simulador", id_estabelecimento);
            Meta Equilibrio = TrazerMetasDoPeriodo("Ponto de equilíbrio", id_estabelecimento);

            List<MetaDiaria> metas = new List<MetaDiaria>();
            string comando = "SELECT Data, SUBSTRING(dbo.fn_Dia_Da_Semana_Extenso(Data), 1, 1) + LOWER(SUBSTRING(dbo.fn_Dia_Da_Semana_Extenso(Data), 2, LEN(dbo.fn_Dia_Da_Semana_Extenso(Data)) - 1)) AS Dia, Meta, ISNULL(Vendido, (SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE ID_Venda = tbl_PagamentosRecebidos.ID_Venda)) = Data AND (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_Terminais WHERE ID_Terminal = (SELECT ID_Terminal FROM tbl_CaixasAnteriores WHERE ID_Caixa = (SELECT ID_Caixa FROM tbl_Vendas WHERE ID_Venda = tbl_PagamentosRecebidos.ID_Venda)))) = @id_estabelecimento)) FROM tbl_MetasDiarias WHERE MONTH(Data) = @mes AND YEAR(Data) = @ano AND ID_Estabelecimento = @id_estabelecimento";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@mes", mes);
            select.Parameters.AddWithValue("@ano", ano);
            select.Parameters.AddWithValue("@id_estabelecimento", id_estabelecimento);

            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                DateTime data = Convert.ToDateTime(leitor[0].ToString());
                string dia_da_semana = leitor[1].ToString();

                decimal meta;
                if (leitor[2] == DBNull.Value) { meta = 0; }
                else { meta = Convert.ToDecimal(leitor[2]); }

                decimal apurado;
                if (leitor[3] == DBNull.Value) { apurado = 0; }
                else { apurado = Convert.ToDecimal(leitor[3]); }

                decimal simulador = 0;
                decimal equilibrio = 0;

                if (dia_da_semana == "Domingo") { simulador = Simulador.Domingo; equilibrio = Equilibrio.Domingo; }
                else if (dia_da_semana == "Segunda-feira") { simulador = Simulador.Segunda; equilibrio = Equilibrio.Segunda; }
                else if (dia_da_semana == "Terça-feira") { simulador = Simulador.Terca; equilibrio = Equilibrio.Terca; }
                else if (dia_da_semana == "Quarta-feira") { simulador = Simulador.Quarta; equilibrio = Equilibrio.Quarta; }
                else if (dia_da_semana == "Quinta-feira") { simulador = Simulador.Quinta; equilibrio = Equilibrio.Quinta; }
                else if (dia_da_semana == "Sexta-feira") { simulador = Simulador.Sexta; equilibrio = Equilibrio.Sexta; }
                else if (dia_da_semana == "Sábado") { simulador = Simulador.Sabado; equilibrio = Equilibrio.Sabado; }

                metas.Add(new MetaDiaria
                {
                    Dia = data,
                    Dia_da_semana = dia_da_semana,
                    Meta = meta,
                    Vendido = apurado,
                    Simulador = simulador,
                    Equilibrio = equilibrio
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return metas;
        }

        public decimal PercentualDaMetaDiaria(DateTime data)
        {
            decimal percentual;
            string comando = "SELECT ISNULL((SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE CONVERT(DATE, (SELECT Data_Venda FROM tbl_Vendas WHERE ID_Venda = tbl_PagamentosRecebidos.ID_Venda)) = Data), 0) / ISNULL((Meta / 100), 0) AS Percentual FROM tbl_MetasDiarias WHERE ID_Estabelecimento = 1 AND Data = CONVERT(DATE, @data)";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@data", data);
                percentual = Convert.ToDecimal(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return percentual;
        }

        public decimal PercentualDaMetaMensal(DateTime data)
        {
            decimal percentual;
            string comando = "SELECT ISNULL((SELECT SUM(Valor_Pagamento) FROM tbl_PagamentosRecebidos WHERE (SELECT Data_Venda FROM tbl_Vendas WHERE ID_Venda = tbl_PagamentosRecebidos.ID_Venda) <= @data AND MONTH((SELECT Data_Venda FROM tbl_Vendas WHERE ID_Venda = tbl_PagamentosRecebidos.ID_Venda)) = MONTH(@data)), 0) / (SUM(Meta) / 100) FROM tbl_MetasDiarias WHERE ID_Estabelecimento = 1 AND MONTH(Data) = MONTH(@data)";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@data", data);
                percentual = Convert.ToDecimal(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return percentual;
        }

        public decimal MetaDoMes(string periodo, int id_estabelecimento)
        {
            decimal meta;
            string comando = "SELECT Mes FROM tbl_Metas WHERE Periodo = @periodo AND ID_Estabelecimento = @id_estabelecimento";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@periodo", periodo);
                select.Parameters.AddWithValue("@id_estabelecimento", id_estabelecimento);
                meta = Convert.ToDecimal(select.ExecuteScalar());
                conexao.Desconectar();
            }

            return meta;
        }

        public int QuantidadeDeVendasDeHoje()
        {
            int quantidade = 0;

            string comando = "SELECT COUNT(*) FROM tbl_Vendas WHERE CONVERT(DATE, Data_Venda) = CONVERT(DATE, GETDATE())";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                quantidade = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return quantidade;
        }

        public List<string> MesesDeVendaMarbaSoftware()
        {
            List<string> Meses = new List<string>();
            string comando = "SELECT DISTINCT MONTH(Data_Venda), CONVERT(VARCHAR, UPPER(FORMAT(Data_Venda, 'MMMM', 'pt-BR'))) + '/' + CONVERT(VARCHAR, YEAR(Data_Venda)) FROM tbl_Vendas ORDER BY MONTH(Data_Venda) DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                Meses.Add(leitor[1].ToString());
            }
            leitor.Close();
            conexao.Desconectar();

            return Meses;
        }
        #endregion

        #region Simulador
        public decimal ReceitasDoDia(string dia_da_semana)
        {
            decimal previsao = 0;
            string comando = "SELECT Domingo, Segunda, Terca, Quarta, Quinta, Sexta, Sabado FROM tbl_Metas WHERE Periodo = 'Simulador'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                if (dia_da_semana == "Domingo")
                {
                    previsao = Convert.ToDecimal(leitor[0]);
                }
                if (dia_da_semana == "Segunda-feira")
                {
                    previsao = Convert.ToDecimal(leitor[1]);
                }
                if (dia_da_semana == "Terça-feira")
                {
                    previsao = Convert.ToDecimal(leitor[2]);
                }
                if (dia_da_semana == "Quarta-feira")
                {
                    previsao = Convert.ToDecimal(leitor[3]);
                }
                if (dia_da_semana == "Quinta-feira")
                {
                    previsao = Convert.ToDecimal(leitor[4]);
                }
                if (dia_da_semana == "Sexta-feira")
                {
                    previsao = Convert.ToDecimal(leitor[5]);
                }
                if (dia_da_semana == "Sábado")
                {
                    previsao = Convert.ToDecimal(leitor[6]);
                }
            }
            leitor.Close();

            conexao.Desconectar();

            return previsao;
        }

        public decimal DividasCirculantes()
        {
            decimal circulante = 0;

            string comando = "SELECT ISNULL((SELECT SUM(Valor) FROM tbl_Previsoes_de_Gastos WHERE Status = 'Pendente' AND Data < CONVERT(DATE, GETDATE())), 0) + ISNULL((SELECT SUM(Valor) FROM tbl_Boletos WHERE Status = 'Pendente' AND Vencimento < CONVERT(DATE, GETDATE())), 0) AS Circulante";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                circulante = - Convert.ToDecimal(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return circulante;
        }
        #endregion

        #endregion

        #region Métodos do Formulário Catálogo

        public AutoCompleteStringCollection AutoCompleteEspecificacao(string utensilio)
        {
            string comando = "SELECT Especificacao FROM tbl_Especificacoes WHERE ID_Utensilio = (SELECT ID_Utensilio FROM tbl_utensilios WHERE Nome_Utensilio = @utensilio) ORDER BY Especificacao ASC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@utensilio", utensilio);
            SqlDataReader leitor = select.ExecuteReader();
            AutoCompleteStringCollection colecao = new AutoCompleteStringCollection();
            while (leitor.Read())
            {
                colecao.Add(leitor["Especificacao"].ToString());
            }
            leitor.Close();
            conexao.Desconectar();
            return colecao;
        }

        public int ConverterMetrosParaCentimetros(decimal metros)
        {
            int centimetros = Convert.ToInt32(metros * 100);
            return centimetros;
        }

        public int ConverterQuilosParaGramas(decimal quilos)
        {
            int gramas = Convert.ToInt32(quilos * 1000);
            return gramas;
        }

        public int ConverterLitrosParaMililitros(decimal litros)
        {
            int centimetros = Convert.ToInt32(litros * 1000);
            return centimetros;
        }

        public int TrazerValorSemUnidadeDeMedida(string separar)
        {
            string[] partir = separar.Split(' ');
            int valor = Convert.ToInt32(partir[0]);
            return valor;
        }

        public string TrazerUnidadeDeMedidaSemValor(string separar)
        {
            string[] partir = separar.Split(' ');
            string un_medida = partir[1];
            return un_medida;
        }

        public void PreencherDataGridCatalogoAtivo(BindingSource bindingSource, DataGridView dataGridView)
        {
            string comando = "SELECT ID_Catalogo AS ID, IIF ((SELECT COUNT(*) FROM tbl_ProdutosImagens WHERE ID_Catalogo = tbl_Catalogo.ID_Catalogo) > 0, (SELECT Imagem FROM tbl_Imagens WHERE ID_Imagem = (SELECT TOP(1) ID_Imagem FROM tbl_ProdutosImagens WHERE ID_Catalogo = tbl_Catalogo.ID_Catalogo)), (SELECT Imagem FROM tbl_Imagens WHERE Descricao = 'SEM FOTO')) AS Imagem, Nome AS Produto, Preco_Venda AS Venda, Estoque_Ideal AS Ideal, ' - ' AS Atual, CONVERT(VARCHAR(10), ID_Linha) + '. ' + (SELECT Descricao FROM tbl_ProdutosLinhas WHERE ID_Linha = tbl_Catalogo.ID_Linha) AS Linha, Instagram, Whatsapp FROM tbl_Catalogo WHERE (SELECT Catalogo FROM tbl_Capsulas WHERE ID_Capsula = tbl_Catalogo.ID_Capsula) = 1 AND (SELECT Ativacao FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) = 1 AND (SELECT Disponibilidade FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) = 1";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            bindingSource.DataSource = dataSet;
            bindingSource.DataMember = dataSet.Tables[0].TableName;
            dataGridView.DataSource = bindingSource;
            conexao.Desconectar();
        }

        public List<string> PreencherComboEspecificacao(string utensilio)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Especificacao FROM tbl_Especificacoes WHERE ID_Utensilio = (SELECT ID_Utensilio FROM tbl_utensilios WHERE Nome_Utensilio = @utensilio) ORDER BY Especificacao ASC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@utensilio", utensilio);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<string> preencherComboUtens()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Nome_utensilio FROM tbl_Utensilios ORDER BY Nome_utensilio ASC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<string> preencherComboFornecedores()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Nome_Fornecedor FROM tbl_Fornecedores ORDER BY Nome_Fornecedor ASC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<string> preencherComboCores()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Cor FROM tbl_Cores ORDER BY Cor ASC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<string> preencherComboMaterial()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Material FROM tbl_MateriaPrima ORDER BY Material ASC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public void InserirUtensilio(Produto produto)
        {
            string comando;
            if (produto.Especificacao == string.Empty)
            {
                comando = "UPDATE tbl_Produtos SET ID_Utensilio = (SELECT ID_Utensilio FROM tbl_utensilios WHERE Nome_Utensilio = @utensilio), Conjunto = @conjunto WHERE Nome_Produto = @produto";
            }
            else
            {
                comando = "UPDATE tbl_Produtos SET ID_Utensilio = (SELECT ID_Utensilio FROM tbl_utensilios WHERE Nome_Utensilio = @utensilio), Especificação = @especificacao, Conjunto = @conjunto WHERE Nome_Produto = @produto";
            }

            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@utensilio", produto.Utensilio);
            update.Parameters.AddWithValue("@produto", produto.Nome_Produto);
            //update.Parameters.AddWithValue("@conjunto", produto.Conjunto);
            update.Parameters.AddWithValue("@especificacao", produto.Especificacao);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public AutoCompleteStringCollection AutoCompleteUtens()
        {
            SqlCommand comando = new SqlCommand("SELECT Nome_utensilio FROM tbl_Utensilios ORDER BY Nome_utensilio ASC", conexao.Conectar());
            SqlDataReader leitor = comando.ExecuteReader();
            AutoCompleteStringCollection colecao = new AutoCompleteStringCollection();
            while (leitor.Read())
            {
                colecao.Add(leitor["Nome_utensilio"].ToString());
            }
            leitor.Close();
            conexao.Desconectar();
            return colecao;
        }

        public void InserirEspecificacao(string utensilio, string especificacao)
        {
            string comando = "INSERT INTO tbl_Especificacoes (ID_Utensilio, Especificacao) VALUES ((SELECT ID_Utensilio FROM tbl_utensilios WHERE Nome_Utensilio = @utensilio), @especificacao)";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@utensilio", utensilio);
            update.Parameters.AddWithValue("@especificacao", especificacao);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public bool VerificarSeEspecificacaoJaExiste(string utensilio, string especificacao)
        {
            string comando = "SELECT Especificacao FROM tbl_Especificacoes WHERE ID_Utensilio = (SELECT ID_Utensilio FROM tbl_utensilios WHERE Nome_Utensilio = @utensilio) AND Especificacao = @especificacao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@utensilio", utensilio);
            select.Parameters.AddWithValue("@especificacao", especificacao);
            string resultado;
            try
            {
                resultado = select.ExecuteScalar().ToString();
            }
            catch { resultado = string.Empty; }

            bool verificar;

            if (resultado == string.Empty)
            {
                verificar = false;
            }
            else
            {
                verificar = true;
            }

            conexao.Desconectar();
            return verificar;
        }

        public Produto TrazerUltimoProdutoDesejadoCadastrado()
        {
            Produto produto = new Produto();
            string comando = "SELECT TOP (1) Nome, (SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE ID_Fornecedor = tbl_ProdutosDesejados.ID_Fornecedor) AS Fornecedor FROM tbl_ProdutosDesejados ORDER BY Nome DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                produto.Nome_Produto = leitor[0].ToString();
                //produto.Fornecedor = leitor[1].ToString();
            }
            leitor.Close();
            conexao.Desconectar();
            return produto;
        }

        public bool VerificarSeUtensilioJaExiste(string utensilio)
        {
            string comando = "SELECT Nome_Utensilio FROM tbl_Utensilios WHERE Nome_Utensilio = @utensilio";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@utensilio", utensilio);
            string resultado;
            try
            {
                resultado = select.ExecuteScalar().ToString();
            }
            catch { resultado = string.Empty; }

            bool verificar;

            if (resultado == string.Empty)
            {
                verificar = false;
            }
            else
            {
                verificar = true;
            }

            conexao.Desconectar();
            return verificar;
        }

        public bool VerificarSeFornecedorJaExiste(string fornecedor)
        {
            string comando = "SELECT Nome_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@fornecedor", fornecedor);
            string resultado;
            try
            {
                resultado = select.ExecuteScalar().ToString();
            }
            catch { resultado = string.Empty; }

            bool verificar;

            if (resultado == string.Empty)
            {
                verificar = false;
            }
            else
            {
                verificar = true;
            }

            conexao.Desconectar();
            return verificar;
        }

        public bool VerificarSeCorJaExiste(string cor)
        {
            string comando = "SELECT Cor FROM tbl_Cores WHERE Cor = @cor";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@cor", cor);
            string resultado;
            try
            {
                resultado = select.ExecuteScalar().ToString();
            }
            catch { resultado = string.Empty; }

            bool verificar;

            if (resultado == string.Empty)
            {
                verificar = false;
            }
            else
            {
                verificar = true;
            }

            conexao.Desconectar();
            return verificar;
        }

        public bool VerificarSeMaterialJaExiste(string material)
        {
            string comando = "SELECT Material FROM tbl_MateriaPrima WHERE Material = @material";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@material", material);
            string resultado;
            try
            {
                resultado = select.ExecuteScalar().ToString();
            }
            catch { resultado = string.Empty; }

            bool verificar;

            if (resultado == string.Empty)
            {
                verificar = false;
            }
            else
            {
                verificar = true;
            }

            conexao.Desconectar();
            return verificar;
        }

        public bool VerificarSeEstampaJaExiste(string estampa)
        {
            string comando = "SELECT Estampa FROM tbl_Estampas WHERE Estampa = @estampa";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@estampa", estampa);
            string resultado;
            try
            {
                resultado = select.ExecuteScalar().ToString();
            }
            catch { resultado = string.Empty; }

            bool verificar;

            if (resultado == string.Empty)
            {
                verificar = false;
            }
            else
            {
                verificar = true;
            }

            conexao.Desconectar();
            return verificar;
        }

        public void CadastrarUtensilioParcialmente(string utensilio)
        {
            string comando = "INSERT INTO tbl_Utensilios (Nome_Utensilio) VALUES (@utensilio)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@utensilio", utensilio);
            insert.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Utensílio parcialmente cadastrado.\r\nÉ necessário preencher o restante das informações\r\n posteriormente para que o programa funcione perfeitamente.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void CadastrarCor(string cor)
        {
            string comando = "INSERT INTO tbl_Cores (Cor) VALUES (@cor)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@cor", cor);
            insert.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Cor cadastrada.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void CadastrarEstampa(string estampa)
        {
            string comando = "INSERT INTO tbL_Estampas (Estampa) VALUES (@estampa)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@estampa", estampa);
            insert.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Estampa cadastrada.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void CadastrarMateriaPrima(string material)
        {
            string comando = "INSERT INTO tbl_MateriaPrima (Material) VALUES (@material)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@material", material);
            insert.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Material cadastrado.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void CadastrarProdutosDesejados(List<Produto> lista)
        {
            foreach (Produto Produto in lista)
            {
                //string produto = Produto.Nome_Produto;
                //string cod_extra = Produto.Cod_Extra;
                //decimal preco = Produto.Preco_Base;
                //int qtd_caixa = Produto.qtd_Caixa;
                //string fornecedor = Produto.Fornecedor;
                //string conjunto = Produto.Conjunto;
                //string especificacao = Produto.Especificacao;
                //string utensilio = Produto.Utensilio;
                //string altura = Produto.Altura;
                //string largura = Produto.Largura;
                //string comprimento = Produto.Comprimento;
                //string capacidade = Produto.Medida;
                //string cor = Produto.Cor;
                //string material = Produto.MateriaPrima;
                //DateTime data = DateTime.Now;

                //string comando = "INSERT INTO tbl_ProdutosDesejados (Nome, Cod_Extra, Preco_Base, Qtd_Caixa, ID_Fornecedor, ID_Utensilio, Especificacao, Conjunto, Altura, Largura, Comprimento, Cor, Capacidade, Material, Data_Cadastro) VALUES (@produto, @cod_extra, @preco, @qtd_caixa, (SELECT ID_Fornecedor FROM tbl_Fornecedores WHERE Nome_Fornecedor = @fornecedor), (SELECT ID_Utensilio FROM tbl_Utensilios WHERE Nome_Utensilio = @utensilio), @especificacao, @conjunto, @altura, @largura, @comprimento, @cor, @capacidade, @material, @data)";
                //SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                //insert.Parameters.AddWithValue("@produto", produto);
                //insert.Parameters.AddWithValue("@cod_extra", cod_extra);
                //insert.Parameters.AddWithValue("@preco", preco);
                //insert.Parameters.AddWithValue("@qtd_caixa", qtd_caixa);
                //insert.Parameters.AddWithValue("@fornecedor", fornecedor);
                //insert.Parameters.AddWithValue("@especificacao", especificacao);
                //insert.Parameters.AddWithValue("@conjunto", conjunto);
                //insert.Parameters.AddWithValue("@utensilio", utensilio);
                //insert.Parameters.AddWithValue("@altura", altura);
                //insert.Parameters.AddWithValue("@largura", largura);
                //insert.Parameters.AddWithValue("@comprimento", comprimento);
                //insert.Parameters.AddWithValue("@capacidade", capacidade);
                //insert.Parameters.AddWithValue("@cor", cor);
                //insert.Parameters.AddWithValue("@material", material);
                //insert.Parameters.AddWithValue("@data", data);
                //insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
            MessageBox.Show("Produtos cadastrados com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public decimal SaldoDisponivel()
        {
            string comando = "SELECT SUM (Valor) FROM tbl_MovimentacoesFin WHERE Saldo = 'SALDO DISPONÍVEL'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            decimal saldo = Convert.ToDecimal(select.ExecuteScalar());
            conexao.Desconectar();
            return saldo;
        }

        public void RegistrarEncapsulamento(Capsula capsula, string conta)
        {
            //int id_produto;
            //string utensilio;
            //string status;
            //string especificacao = string.Empty;

            //int altura_min = 0;
            //int altura_max = 0;
            //string altura_un = string.Empty;
            //int largura_min = 0;
            //int largura_max = 0;
            //string largura_un = string.Empty;
            //int comprimento_min = 0;
            //int comprimento_max = 0;
            //string comprimento_un = string.Empty;
            //int diametro_min = 0;
            //int diametro_max = 0;
            //string diametro_un = string.Empty;
            //int capacidade_min = 0;
            //int capacidade_max = 0;
            //string capacidade_un = string.Empty;

            //string cor = string.Empty;
            //string estampa = string.Empty;

            //string material = string.Empty;
            //int grupo;
            //decimal min = 0;
            //decimal max = 0;
            //string nome_sistema;
            //string nome_preco;
            //string conjunto = string.Empty;
            //int qtd_ideal;
            //decimal capital;

            //string campos = "INSERT INTO tbl_Encapsulamento (ID_Utensilio, ID_Produto, Ativacao, Estoque_Ideal, Data, Nome_Sistema, Nome_Preco, Capital, Status, Grupo, Estoque_Minimo, Ideal_Loja, Ideal_Estoque, Ideal_Deposito, CMR_Loja, CMR_Estoque";
            //string values = " VALUES ((SELECT ID_Utensilio FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio), @id_produto, 'Sim', @estoque_ideal, GETDATE(), @nome_sistema, @nome_preco, @capital, @status, @grupo, @estoque_minimo, @ideal_loja, @ideal_estoque, @ideal_deposito, @cmr_loja, @cmr_estoque";

            //status = capsula.Status;
            ////id_produto = capsula.ID_Produto;
            //utensilio = capsula.Nome_Utensilio;
            //qtd_ideal = capsula.Qtd_Ideal;
            //nome_sistema = capsula.Nome_Sistema;
            //nome_preco = capsula.Nome_Preco;
            //capital = capsula.Ativo;
            //grupo = capsula.Grupo;

            //int estoque_minimo = qtd_ideal / 2;
            //int ideal_loja = Convert.ToInt32(ObterValorDoParametro("Quantidade padrão: Ideal_Loja"));
            //int ideal_estoque = Convert.ToInt32(ObterValorDoParametro("Quantidade padrão: Ideal_Estoque"));
            //int ideal_deposito = Convert.ToInt32(ObterValorDoParametro("Quantidade padrão: Ideal_Deposito"));
            //int cmr_estoque = Convert.ToInt32(ObterValorDoParametro("Quantidade padrão: CMR_Estoque"));
            //int cmr_loja = Convert.ToInt32(ObterValorDoParametro("Quantidade padrão: CMR_Loja"));

            //if (capsula.Especificacao != null)
            //{
            //    especificacao = capsula.Especificacao;
            //    campos = campos + ", Especificacao";
            //    values = values + ", @especificacao";
            //}

            //if (capsula.Altura_Min != 0 || capsula.Altura_Max!= 0)
            //{
            //    if (capsula.Altura_Min != 0)
            //    {
            //        altura_min = capsula.Altura_Min;
            //        campos = campos + ", Altura_Min";
            //        values = values + ", @altura_min";
            //    }

            //    if (capsula.Altura_Max != 0)
            //    {
            //        altura_max = capsula.Altura_Max;
            //        campos = campos + ", Altura_Max";
            //        values = values + ", @altura_max";
            //    }

            //    altura_un = capsula.Altura_Un;
            //    campos = campos + ", Altura_Un";
            //    values = values + ", @altura_un";
            //}

            //if (capsula.Largura_Min != 0 || capsula.Largura_Max != 0)
            //{
            //    if (capsula.Largura_Min != 0)
            //    {
            //        largura_min = capsula.Largura_Min;
            //        campos = campos + ", Largura_Min";
            //        values = values + ", @largura_min";
            //    }

            //    if (capsula.Largura_Max != 0)
            //    {
            //        largura_max = capsula.Largura_Max;
            //        campos = campos + ", Largura_Max";
            //        values = values + ", @largura_max";
            //    }

            //    largura_un = capsula.Largura_Un;
            //    campos = campos + ", Largura_Un";
            //    values = values + ", @largura_un";
            //}

            //if (capsula.Comprimento_Min != 0 || capsula.Comprimento_Max != 0)
            //{
            //    if (capsula.Comprimento_Min != 0)
            //    {
            //        comprimento_min = capsula.Comprimento_Min;
            //        campos = campos + ", Comprimento_Min";
            //        values = values + ", @comprimento_min";
            //    }

            //    if (capsula.Comprimento_Max != 0)
            //    {
            //        comprimento_max = capsula.Comprimento_Max;
            //        campos = campos + ", Comprimento_Max";
            //        values = values + ", @comprimento_max";
            //    }

            //    comprimento_un = capsula.Comprimento_Un;
            //    campos = campos + ", Comprimento_Un";
            //    values = values + ", @comprimento_un";
            //}

            //if (capsula.Diametro_Min != 0 || capsula.Diametro_Max != 0)
            //{
            //    if (capsula.Diametro_Min != 0)
            //    {
            //        diametro_min = capsula.Diametro_Min;
            //        campos = campos + ", Diametro_Min";
            //        values = values + ", @diametro_min";
            //    }

            //    if (capsula.Diametro_Max != 0)
            //    {
            //        diametro_max = capsula.Diametro_Max;
            //        campos = campos + ", Diametro_Max";
            //        values = values + ", @diametro_max";
            //    }

            //    diametro_un = capsula.Diametro_Un;
            //    campos = campos + ", Diametro_Un";
            //    values = values + ", @diametro_un";
            //}

            //if (capsula.Capacidade_Min != 0 || capsula.Capacidade_Max != 0)
            //{
            //    if (capsula.Capacidade_Min != 0)
            //    {
            //        capacidade_min = capsula.Capacidade_Min;
            //        campos = campos + ", Capacidade_Min";
            //        values = values + ", @capacidade_min";
            //    }

            //    if (capsula.Capacidade_Max != 0)
            //    {
            //        capacidade_max = capsula.Capacidade_Max;
            //        campos = campos + ", Capacidade_Max";
            //        values = values + ", @capacidade_max";
            //    }

            //    capacidade_un = capsula.Capacidade_Un;
            //    campos = campos + ", Capacidade_Un";
            //    values = values + ", @capacidade_un";
            //}

            //if (capsula.Cor != null)
            //{
            //    cor = capsula.Cor;
            //    campos = campos + ", Cor";
            //    values = values + ", @cor";
            //}

            //if (capsula.Estampa != null)
            //{
            //    estampa = capsula.Estampa;
            //    campos = campos + ", Estampa";
            //    values = values + ", @estampa";
            //}

            //if (capsula.Material != null)
            //{
            //    material = capsula.Material;
            //    campos = campos + ", Material";
            //    values = values + ", (SELECT ID_MateriaPrima FROM tbl_MateriaPrima WHERE Material = @material)";
            //}

            //if (capsula.Menor_Preco != 0)
            //{
            //    min = capsula.Menor_Preco;
            //    campos = campos + ", Preco_Minimo";
            //    values = values + ", @min";
            //}

            //if (capsula.Maior_Preco != 0)
            //{
            //    max = capsula.Maior_Preco;
            //    campos = campos + ", Preco_Maximo";
            //    values = values + ", @max";
            //}

            //if (capsula.Conjunto != null)
            //{
            //    conjunto = capsula.Conjunto;
            //    campos = campos + ", Conjunto";
            //    values = values + ", @conjunto";
            //}

            //campos = campos + ")";
            //values = values + ")";

            //string comando = campos + values;

            //SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            //insert.Parameters.AddWithValue("@status", status);
            //insert.Parameters.AddWithValue("@id_produto", id_produto);
            //insert.Parameters.AddWithValue("@utensilio", utensilio);
            //insert.Parameters.AddWithValue("@especificacao", especificacao);
            //insert.Parameters.AddWithValue("@altura_min", altura_min);
            //insert.Parameters.AddWithValue("@altura_max", altura_max);
            //insert.Parameters.AddWithValue("@altura_un", altura_un);
            //insert.Parameters.AddWithValue("@largura_min", largura_min);
            //insert.Parameters.AddWithValue("@largura_max", largura_max);
            //insert.Parameters.AddWithValue("@largura_un", largura_un);
            //insert.Parameters.AddWithValue("@comprimento_min", comprimento_min);
            //insert.Parameters.AddWithValue("@comprimento_max", comprimento_max);
            //insert.Parameters.AddWithValue("@comprimento_un", comprimento_un);
            //insert.Parameters.AddWithValue("@diametro_min", diametro_min);
            //insert.Parameters.AddWithValue("@diametro_max", diametro_max);
            //insert.Parameters.AddWithValue("@diametro_un", diametro_un);
            //insert.Parameters.AddWithValue("@capacidade_min", capacidade_min);
            //insert.Parameters.AddWithValue("@capacidade_max", capacidade_max);
            //insert.Parameters.AddWithValue("@capacidade_un", capacidade_un);
            //insert.Parameters.AddWithValue("@cor", cor);
            //insert.Parameters.AddWithValue("@estampa", estampa);
            //insert.Parameters.AddWithValue("@material", material);
            //insert.Parameters.AddWithValue("@min", min);
            //insert.Parameters.AddWithValue("@max", max);
            //insert.Parameters.AddWithValue("@nome_sistema", nome_sistema);
            //insert.Parameters.AddWithValue("@nome_preco", nome_preco);
            //insert.Parameters.AddWithValue("@conjunto", conjunto);
            //insert.Parameters.AddWithValue("@estoque_ideal", qtd_ideal);
            //insert.Parameters.AddWithValue("@capital", capital);
            //insert.Parameters.AddWithValue("@grupo", grupo);
            //insert.Parameters.AddWithValue("@estoque_minimo", estoque_minimo);
            //insert.Parameters.AddWithValue("@ideal_loja", ideal_loja);
            //insert.Parameters.AddWithValue("@ideal_estoque", ideal_estoque);
            //insert.Parameters.AddWithValue("@ideal_loja", ideal_loja);
            //insert.Parameters.AddWithValue("@ideal_deposito", ideal_deposito);
            //insert.Parameters.AddWithValue("@cmr_loja", cmr_loja);
            //insert.Parameters.AddWithValue("@cmr_estoque", cmr_estoque);
            //insert.ExecuteNonQuery();
            //conexao.Desconectar();

            //string cmd = "INSERT INTO tbl_MovimentacoesFin (Descricao, Valor, Data, ID_CatFin, ID_Colaborador, Saldo, Conta, Hora) VALUES ('INJEÇÃO DE ESTOQUE', @valor, @data, (SELECT ID_CatFin FROM tbl_CategoriaFinanceira WHERE Categoria = 'INJEÇÃO DE ESTOQUE'), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 'SALDO DISPONÍVEL', @conta, @hora)";
            //SqlCommand insert2 = new SqlCommand(cmd, conexao.Conectar());
            //insert2.Parameters.AddWithValue("@valor", -capital);
            //insert2.Parameters.AddWithValue("@data", DateTime.Now.ToShortDateString());
            //insert2.Parameters.AddWithValue("@matricula", Program.matricula);
            //insert2.Parameters.AddWithValue("@conta", conta);
            //insert2.Parameters.AddWithValue("@hora", DateTime.Now.ToShortTimeString());
            //insert2.ExecuteNonQuery();
            //conexao.Desconectar();

            //MessageBox.Show("Encapsulamento concluído.\r\nA partir do próximo pedido do seu fornecedor,\r\no produto será incluído no catálogo.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public decimal TrazerSaldoDaConta(string conta)
        {
            string comando = "SELECT SUM (Valor) FROM tbl_MovimentacoesFin WHERE Conta = @conta";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@conta", conta);

            decimal saldo = Convert.ToDecimal(select.ExecuteScalar());
            conexao.Desconectar();
            return saldo;
        }

        public bool VerificarSeProdutoJaEstaEncapsulado(int id)
        {
            string comando = "SELECT ID_Produto FROM tbl_Encapsulamento WHERE ID_Produto = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);

            bool contem;
            if (select.ExecuteScalar() == null) { contem = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { contem = false; }
            else { contem = true; }
            conexao.Desconectar();
            return contem;
        }

        public List<Utensilio> TrazerListaDeUtensilios()
        {
            string comando = "SELECT ID_Utensilio, Nome_utensilio, (SELECT COUNT (*) FROM tbl_Produtos WHERE ID_Utensilio = tbl_Utensilios.ID_Utensilio) AS Produtos, (SELECT COUNT (*) FROM tbl_Encapsulamento WHERE ID_Utensilio = tbl_Utensilios.ID_Utensilio) AS Ativos, (SELECT Nome_Categoria FROM tbl_Categorias WHERE ID_Categoria = tbl_Utensilios.ID_Categoria) AS Categoria FROM tbl_Utensilios ORDER BY Nome_utensilio";
            List<Utensilio> Utensilios = new List<Utensilio>();
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                string Categoria;
                if (leitor[4] != null) { Categoria = leitor[4].ToString(); }
                else { Categoria = string.Empty; }

                Utensilios.Add(new Utensilio
                {
                    ID_Utensilio = Convert.ToInt32(leitor[0]),
                    Nome_Utensilio = leitor[1].ToString(),
                    qtd_Produtos = Convert.ToInt32(leitor[2]),
                    qtd_Ativos = Convert.ToInt32(leitor[3]),
                    Categoria = Categoria
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return Utensilios;
        }

        public List<string> preencherComboGrupos()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Grupo, Capacidade, Altura, Diametro, Especificacao, Cor FROM tbl_Nomenclatura";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                int grupo = Convert.ToInt32(leitor[0]);
                string nome = grupo.ToString() + " - Utensílio";
                bool Medida = Convert.ToBoolean(leitor[1]);
                bool Altura = Convert.ToBoolean(leitor[2]);
                bool Diametro = Convert.ToBoolean(leitor[3]);
                bool Especificacao = Convert.ToBoolean(leitor[4]);
                bool Cor = Convert.ToBoolean(leitor[5]);

                if (Medida) { nome = nome + ", Medida"; }
                if (Altura) { nome = nome + ", Altura"; }
                if (Diametro) { nome = nome + ", Diâmetro"; }
                if (Especificacao) { nome = nome + ", Especificação"; }
                if (Cor) { nome = nome + ", Cor"; }

                lista.Add(nome);
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public void CadastrarUtensilio(Utensilio Utensilio)
        {
            string utensilio = Utensilio.Nome_Utensilio;
            string material = Utensilio.Material_Padrao;
            string categoria = Utensilio.Categoria;
            int grupo = Utensilio.Grupo;
            string ncm = Utensilio.NCM;
            string cest = Utensilio.CEST;

            string comando = "INSERT INTO tbl_Utensilios (Nome_utensilio, Material_Padrao, ID_Categoria, Grupo, NCM, CEST, Ativacao) VALUES (@utensilio, (SELECT ID_MateriaPrima FROM tbl_MateriaPrima WHERE Material = @material), (SELECT ID_Categoria FROM tbl_Categorias WHERE Nome_Categoria = @categoria), @grupo, @ncm, @cest, 'Ativo')";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@utensilio", utensilio);
            insert.Parameters.AddWithValue("@material", material);
            insert.Parameters.AddWithValue("@categoria", categoria);
            insert.Parameters.AddWithValue("@grupo", grupo);
            insert.Parameters.AddWithValue("@ncm", ncm);
            insert.Parameters.AddWithValue("@cest", cest);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Utensílio cadastrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public Utensilio TrazerInformacoesDoUtensilio(int id_utensilio)
        {
            string comando = "SELECT Nome_utensilio, (SELECT COUNT (*) FROM tbl_Produtos WHERE ID_Utensilio = tbl_Utensilios.ID_Utensilio) AS Produtos, (SELECT COUNT (*) FROM tbl_Encapsulamento WHERE ID_Utensilio = tbl_Utensilios.ID_Utensilio) AS Ativos, (SELECT Nome_Categoria FROM tbl_Categorias WHERE ID_Categoria = tbl_Utensilios.ID_Categoria) AS Categoria, Ativacao, Grupo, NCM, CEST, (SELECT Material FROM tbl_MateriaPrima WHERE ID_MateriaPrima = tbl_Utensilios.Material_Padrao), ID_Utensilio FROM tbl_Utensilios WHERE ID_Utensilio = @id_utensilio";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_utensilio", id_utensilio);
            Utensilio Utensilio = new Utensilio();
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                string utensilio = leitor[0].ToString();
                int produtos = Convert.ToInt32(leitor[1]);
                int ativos = Convert.ToInt32(leitor[2]);
                string categoria = leitor[3].ToString();
                string ativacao = leitor[4].ToString();
                int grupo;
                try { grupo = Convert.ToInt32(leitor[5]); }
                catch { grupo = 0; }

                string ncm = leitor[6].ToString();
                string cest = leitor[7].ToString();
                string material = leitor[8].ToString();
                int id = Convert.ToInt32(leitor[9]);

                Utensilio.Nome_Utensilio = utensilio;
                Utensilio.qtd_Produtos = produtos;
                Utensilio.qtd_Ativos = ativos;
                Utensilio.Categoria = categoria;
                Utensilio.Ativacao = ativacao;
                Utensilio.Grupo = grupo;
                Utensilio.NCM = ncm;
                Utensilio.CEST = cest;
                Utensilio.Material_Padrao = material;
                Utensilio.ID_Utensilio = id;
            }
            leitor.Close();
            conexao.Desconectar();
            return Utensilio;
        }

        public void EditarUtensilio(Utensilio Utensilio)
        {
            string utensilio = Utensilio.Nome_Utensilio;
            string material = Utensilio.Material_Padrao;
            string categoria = Utensilio.Categoria;
            int grupo = Utensilio.Grupo;
            string ncm = Utensilio.NCM;
            string cest = Utensilio.CEST;
            string ativacao = Utensilio.Ativacao;
            int id_utensilio = Utensilio.ID_Utensilio;

            string comando = "UPDATE tbl_Utensilios SET Nome_utensilio = @utensilio, Material_Padrao = (SELECT ID_MateriaPrima FROM tbl_MateriaPrima WHERE Material = @material), ID_Categoria = (SELECT ID_Categoria FROM tbl_Categorias WHERE Nome_Categoria = @categoria), NCM = @ncm, CEST = @cest, Ativacao = @ativacao, Grupo = @grupo WHERE ID_Utensilio = @id_utensilio";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@utensilio", utensilio);
            update.Parameters.AddWithValue("@material", material);
            update.Parameters.AddWithValue("@categoria", categoria);
            update.Parameters.AddWithValue("@grupo", grupo);
            update.Parameters.AddWithValue("@ncm", ncm);
            update.Parameters.AddWithValue("@cest", cest);
            update.Parameters.AddWithValue("@ativacao", ativacao);
            update.Parameters.AddWithValue("@id_utensilio", id_utensilio);
            update.ExecuteNonQuery();

            MessageBox.Show("Alteração registrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public int TrazerGrupoDoUtensilio(string utensilio)
        {
            string comando = "SELECT Grupo FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@utensilio", utensilio);
            int grupo = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();
            return grupo;
        }

        public GrupoBooleano TrazerInformacoesDoGrupo(int grupo)
        {
            GrupoBooleano Grupo = new GrupoBooleano();
            string comando = "SELECT Utensilio, Capacidade, Altura, Especificacao, Cor, Diametro, Largura, Comprimento, Estampa, Material FROM tbl_Nomenclatura WHERE Grupo = @grupo";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@grupo", grupo);

            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                bool utensilio = Convert.ToBoolean(leitor[0]);
                bool capacidade = Convert.ToBoolean(leitor[1]);
                bool altura = Convert.ToBoolean(leitor[2]);
                bool especificacao = Convert.ToBoolean(leitor[3]);
                bool cor = Convert.ToBoolean(leitor[4]);
                bool diametro = Convert.ToBoolean(leitor[5]);
                bool largura = Convert.ToBoolean(leitor[6]);
                bool comprimento = Convert.ToBoolean(leitor[7]);
                bool estampa = Convert.ToBoolean(leitor[8]);
                bool material = Convert.ToBoolean(leitor[9]);

                Grupo = new GrupoBooleano()
                {
                    Utensilio = utensilio,
                    Capacidade = capacidade,
                    Altura = altura,
                    Especificacao = especificacao,
                    Cor = cor,
                    Diametro = diametro,
                    Largura = largura,
                    Comprimento = comprimento,
                    Estampa = estampa,
                    Material = material
                };
            }
            leitor.Close();
            return Grupo;
        }

        public List<GrupoBooleano> ListaDeGrupos()
        {
            List<GrupoBooleano> Grupos = new List<GrupoBooleano>();
            string comando = "SELECT Grupo, Utensilio, Capacidade, Altura, Especificacao, Cor, Diametro, Largura, Comprimento, Estampa, Material FROM tbl_Nomenclatura ORDER BY Grupo";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        int grupo = Convert.ToInt32(leitor[0]);
                        bool utensilio = Convert.ToBoolean(leitor[1]);
                        bool capacidade = Convert.ToBoolean(leitor[2]);
                        bool altura = Convert.ToBoolean(leitor[3]);
                        bool especificacao = Convert.ToBoolean(leitor[4]);
                        bool cor = Convert.ToBoolean(leitor[5]);
                        bool diametro = Convert.ToBoolean(leitor[6]);
                        bool largura = Convert.ToBoolean(leitor[7]);
                        bool comprimento = Convert.ToBoolean(leitor[8]);
                        bool estampa = Convert.ToBoolean(leitor[9]);
                        bool material = Convert.ToBoolean(leitor[10]);

                        Grupos.Add(new GrupoBooleano
                        {
                            Grupo = grupo,
                            Utensilio = utensilio,
                            Capacidade = capacidade,
                            Altura = altura,
                            Especificacao = especificacao,
                            Cor = cor,
                            Diametro = diametro,
                            Largura = largura,
                            Comprimento = comprimento,
                            Estampa = estampa,
                            Material = material
                        });
                    }
                }
            }

            return Grupos;
        }

        public int TrazerProximoGrupo()
        {
            string comando = "SELECT TOP (1) Grupo FROM tbl_Nomenclatura ORDER BY Grupo DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            int grupo = Convert.ToInt32(select.ExecuteScalar());
            grupo++;
            return grupo;
        }

        public bool VerificarSeGrupoJaExiste(GrupoBooleano Grupo)
        {
            bool utensilio = Grupo.Utensilio;
            bool altura = Grupo.Altura;
            bool largura = Grupo.Largura;
            bool comprimento = Grupo.Comprimento;
            bool diametro = Grupo.Diametro;
            bool capacidade = Grupo.Capacidade;
            bool especificacao = Grupo.Especificacao;
            bool cor = Grupo.Cor;
            bool estampa = Grupo.Estampa;
            bool material = Grupo.Material;

            bool existe;
            string comando = "SELECT Grupo FROM tbl_Nomenclatura WHERE Utensilio = @utensilio AND Altura = @altura AND Largura = @largura AND Comprimento = @comprimento AND Diametro = @diametro AND Capacidade = @capacidade AND Especificacao = @especificacao AND Cor = @cor AND Estampa = @estampa AND Material = @material";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@utensilio", utensilio);
            select.Parameters.AddWithValue("@especificacao", especificacao);
            select.Parameters.AddWithValue("@material", material);
            select.Parameters.AddWithValue("@altura", altura);
            select.Parameters.AddWithValue("@largura", largura);
            select.Parameters.AddWithValue("@comprimento", comprimento);
            select.Parameters.AddWithValue("@diametro", diametro);
            select.Parameters.AddWithValue("@medida", capacidade);
            select.Parameters.AddWithValue("@cor", cor);
            select.Parameters.AddWithValue("@estampa", estampa);

            if (select.ExecuteScalar() == null) { existe = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { existe = false; }
            else { existe = true; }
            return existe;
        }

        public void CriarGrupo(GrupoBooleano Grupo)
        {
            bool utensilio = Grupo.Utensilio;
            bool altura = Grupo.Altura;
            bool largura = Grupo.Largura;
            bool comprimento = Grupo.Comprimento;
            bool diametro = Grupo.Diametro;
            bool capacidade = Grupo.Capacidade;
            bool especificacao = Grupo.Especificacao;
            bool cor = Grupo.Cor;
            bool estampa = Grupo.Estampa;
            bool material = Grupo.Material;
            int grupo = Grupo.Grupo;

            string comando = "INSERT INTO tbl_Nomenclatura (Grupo, Utensilio, Capacidade, Altura, Especificacao, Cor, Diametro, Largura, Comprimento, Estampa, Material) VALUES (@grupo, @utensilio, @capacidade, @altura, @especificacao, @cor, @diametro, @largura, @comprimento, @estampa, @material)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@utensilio", utensilio);
            insert.Parameters.AddWithValue("@altura", altura);
            insert.Parameters.AddWithValue("@largura", largura);
            insert.Parameters.AddWithValue("@comprimento", comprimento);
            insert.Parameters.AddWithValue("@diametro", diametro);
            insert.Parameters.AddWithValue("@capacidade", capacidade);
            insert.Parameters.AddWithValue("@especificacao", especificacao);
            insert.Parameters.AddWithValue("@cor", cor);
            insert.Parameters.AddWithValue("@estampa", estampa);
            insert.Parameters.AddWithValue("@grupo", grupo);
            insert.Parameters.AddWithValue("@material", material);

            insert.ExecuteNonQuery();
        }

        public void ApagarGrupo(int grupo)
        {
            string comando = "DELETE FROM tbl_Nomenclatura WHERE Grupo = @grupo";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@grupo", grupo);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Grupo excluído!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public bool VerificarSeNomeDoSistemaJaExiste(string nome_sistema)
        {
            string comando = "SELECT Nome_Sistema FROM tbl_Capsulas WHERE Nome_Sistema = @nome_sistema";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@nome_sistema", nome_sistema);

            bool contem;
            if (select.ExecuteScalar() == null) { contem = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { contem = false; }
            else { contem = true; }
            conexao.Desconectar();

            return contem;
        }

        public Produto_Variacao InformacoesDoProdutoParaDefinirNome(int id)
        {
            string comando = "SELECT (SELECT Nome_Utensilio FROM tbl_Utensilios WHERE ID_Utensilio = tbl_Produtos2.ID_Utensilio) AS Utensilio, Capacidade, Altura, Especificacao, (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) AS Cor, Diametro, Largura, Comprimento, (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) AS Estampa, (SELECT Material FROM tbl_MateriaPrima WHERE ID_MateriaPrima = tbl_Produtos2.ID_Material) AS Material FROM tbl_ProdutoVariacao INNER JOIN tbl_Produtos2 ON tbl_Produtos2.ID_Produto = tbl_ProdutoVariacao.ID_Produto WHERE ID_ProdutoVariacao = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            SqlDataReader leitor = select.ExecuteReader();
            Produto_Variacao Produto = new Produto_Variacao();

            while (leitor.Read())
            {
                string Utensilio = leitor["Utensilio"].ToString();
                string Material = leitor["Material"].ToString();
                string Altura = leitor["Altura"].ToString();
                string Largura = leitor["Largura"].ToString();
                string Comprimento = leitor["Comprimento"].ToString();
                string Diametro = leitor["Diametro"].ToString();
                string Capacidade = leitor["Capacidade"].ToString();
                string Especificacao = leitor["Especificacao"].ToString();
                string Cor = leitor["Cor"].ToString();
                string Estampa = leitor["Estampa"].ToString();

                Produto = new Produto_Variacao()
                {
                    Utensilio = Utensilio,
                    MateriaPrima = Material,
                    Altura = Altura,
                    Largura = Largura,
                    Comprimento = Comprimento,
                    Diametro = Diametro,
                    Capacidade = Capacidade,
                    Especificacao = Especificacao,
                    Cor = Cor,
                    Estampa = Estampa
                };
            }
            leitor.Close();

            conexao.Desconectar();

            return Produto;
        }

        public string DefinirNomeDoSistema(int id)
        {
            Produto_Variacao Produto = InformacoesDoProdutoParaDefinirNome(id);
            string utensilio = Produto.Utensilio;
            string altura = Produto.Altura;
            string largura = Produto.Largura;
            string comprimento = Produto.Comprimento;
            string diametro = Produto.Diametro;
            string capacidade = Produto.Capacidade;
            string material = Produto.MateriaPrima;
            string especificacao = Produto.Especificacao;
            string cor = Produto.Cor;
            string estampa = Produto.Estampa;

            int grupo = TrazerGrupoDoUtensilio(utensilio);
            GrupoBooleano Grupo = TrazerInformacoesDoGrupo(grupo);

            string nome_sistema = utensilio;

            if (Grupo.Especificacao && especificacao != string.Empty)
            {
                nome_sistema = nome_sistema + " " + especificacao;
            }
            if (Grupo.Material && material != string.Empty)
            {
                nome_sistema = nome_sistema + " " + material;
            }
            if (Grupo.Capacidade && capacidade != string.Empty)
            {
                nome_sistema = nome_sistema + " " + capacidade;
            }
            if (Grupo.Altura && altura != string.Empty)
            {
                nome_sistema = nome_sistema + " " + altura;
            }
            if (Grupo.Largura && largura != string.Empty)
            {
                nome_sistema = nome_sistema + " " + largura;
            }
            if (Grupo.Comprimento && comprimento != string.Empty)
            {
                nome_sistema = nome_sistema + " " + comprimento;
            }
            if (Grupo.Diametro && diametro != string.Empty)
            {
                nome_sistema = nome_sistema + " " + diametro;
            }
            if (Grupo.Cor && cor != string.Empty && cor != "SORTIDO")
            {
                nome_sistema = nome_sistema + " " + cor;
            }
            if (Grupo.Estampa && estampa != string.Empty && estampa != "SEM ESTAMPA")
            {
                nome_sistema = nome_sistema + " " + estampa;
            }

            return nome_sistema;
        }

        public Capsula TrazerInformacoesDaCapsula(int id)
        {
            Capsula Capsula = new Capsula();
            string comando = "SELECT (SELECT Nome_Utensilio FROM tbl_Utensilios WHERE ID_Utensilio = tbl_Capsulas.ID_Utensilio) AS Utensilio, (SELECT Especificacao FROM tbl_Especificacoes WHERE ID_Especificacao = tbl_Capsulas.ID_Especificacao), Nome_Sistema, (SELECT Material FROM tbl_MateriaPrima WHERE ID_MateriaPrima = tbl_Capsulas.ID_Material) AS Material, Conjunto, Preco_Minimo, Preco_Maximo, Altura_Min, Altura_Max, Altura_Un, Largura_Min, Largura_Max, Largura_Un, Comprimento_Min, Comprimento_Max, Comprimento_Un, Diametro_Min, Diametro_Max, Diametro_Un, Capacidade_Min, Capacidade_Max, Capacidade_Un, Observacao, Ideal_Produtos FROM tbl_Capsulas WHERE ID_Capsula = @id";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Capsula.ID_Capsula = id;
                        Capsula.Nome_Utensilio = leitor[0].ToString();
                        Capsula.Especificacao = leitor[1].ToString();
                        Capsula.Nome_Sistema = leitor[2].ToString();
                        Capsula.Material = leitor[3].ToString();
                        Capsula.Conjunto = leitor[4].ToString();
                        Capsula.Menor_Preco = Convert.ToInt32(leitor[5]);
                        Capsula.Maior_Preco = Convert.ToInt32(leitor[6]);
                        Capsula.Altura_Min = Convert.ToInt32(leitor[7]);
                        Capsula.Altura_Max = Convert.ToInt32(leitor[8]);
                        Capsula.Altura_Un = leitor[9].ToString();
                        Capsula.Largura_Min = Convert.ToInt32(leitor[10]);
                        Capsula.Largura_Max = Convert.ToInt32(leitor[11]);
                        Capsula.Largura_Un = leitor[12].ToString();
                        Capsula.Comprimento_Min = Convert.ToInt32(leitor[13]);
                        Capsula.Comprimento_Max = Convert.ToInt32(leitor[14]);
                        Capsula.Comprimento_Un = leitor[15].ToString();
                        Capsula.Diametro_Min = Convert.ToInt32(leitor[16]);
                        Capsula.Diametro_Max = Convert.ToInt32(leitor[17]);
                        Capsula.Diametro_Un = leitor[18].ToString();
                        Capsula.Capacidade_Min = Convert.ToInt32(leitor[19]);
                        Capsula.Capacidade_Max = Convert.ToInt32(leitor[20]);
                        Capsula.Capacidade_Un = leitor[21].ToString();
                        Capsula.Observacao = leitor[22].ToString();
                        Capsula.Ideal_Produtos = Convert.ToInt32(leitor[23]);
                    }
                }
            }

            conexao.Desconectar();
            return Capsula;
        }

        public void AlterarStatusDaCapsula(int id_capsula)
        {
            string comando = "UPDATE tbl_Capsulas SET Catalogo = IIF(Catalogo = 1, 0, 1) WHERE ID_Capsula = @id_capsula";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_capsula", id_capsula);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public List<Produto_Variacao> ListaDeProdutosParaEncapsulamento()
        {
            List<Produto_Variacao> Produtos = new List<Produto_Variacao>();
            string comando = "SELECT ID_ProdutoVariacao, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) AS Produto, Preco_Base, Aliquota_IPI, Aliquota_ICMS, tbl_ProdutoVariacao.Ativacao, tbl_ProdutoVariacao.Disponibilidade, (SELECT Nome_Utensilio FROM tbl_Utensilios WHERE ID_Utensilio = tbl_Produtos2.ID_Utensilio) AS Utensilio, (SELECT Fabricante FROM tbl_Fabricantes WHERE ID_Fabricante = tbl_Produtos2.ID_Fabricante) AS Fabricante, (SELECT Material FROM tbl_MateriaPrima WHERE ID_MateriaPrima = tbl_Produtos2.ID_Material) AS Material, Especificacao, IIF(ID_Conjunto IS NULL, 0, ID_Conjunto) AS ID_Conjunto, Altura, Largura, Comprimento, Diametro, Capacidade, (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) AS Cor, (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) AS Estampa, Tipo, IIF((SELECT COUNT(*) FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) > 0, 1, 0) AS Catalogado FROM tbl_ProdutoVariacao INNER JOIN tbl_Produtos2 ON tbl_ProdutoVariacao.ID_Produto = tbl_Produtos2.ID_Produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Produtos.Add(new Produto_Variacao
                {
                    ID_ProdutoVariacao = Convert.ToInt32(leitor[0]),
                    Nome_Produto = leitor[1].ToString(),
                    Preco_Base = Convert.ToDecimal(leitor[2]),
                    Aliquota_IPI = Convert.ToDecimal(leitor[3]),
                    Aliquota_ICMS = Convert.ToDecimal(leitor[4]),
                    Ativacao = Convert.ToBoolean(leitor[5]),
                    Disponibilidade = Convert.ToBoolean(leitor[6]),
                    Utensilio = leitor[7].ToString(),
                    Fabricante = leitor[8].ToString(),
                    MateriaPrima = leitor[9].ToString(),
                    Especificacao = leitor[10].ToString(),
                    ID_Conjunto = Convert.ToInt32(leitor[11]),
                    Altura = leitor[12].ToString(),
                    Largura = leitor[13].ToString(),
                    Comprimento = leitor[14].ToString(),
                    Diametro = leitor[15].ToString(),
                    Capacidade = leitor[16].ToString(),
                    Cor = leitor[17].ToString(),
                    Estampa = leitor[18].ToString(),
                    Tipo = leitor[19].ToString(),
                    Catalogado = Convert.ToBoolean(leitor[20])
                });
            }
            leitor.Close();
            conexao.Desconectar();

            foreach (Produto_Variacao Produto in Produtos)
            {
                string[] partir_altura = Produto.Altura.Split(' ');
                string[] partir_largura = Produto.Largura.Split(' ');
                string[] partir_comprimento = Produto.Comprimento.Split(' ');
                string[] partir_diametro = Produto.Diametro.Split(' ');
                string[] partir_medida = Produto.Capacidade.Split(' ');


                if (Produto.Altura != " " && Produto.Altura != string.Empty)
                {
                    if (partir_altura[1] == "M")
                    {
                        decimal metros = Convert.ToInt32(partir_altura[0]);
                        Produto.Altura = ConverterMetrosParaCentimetros(metros).ToString() + " CM";
                    }
                }

                if (Produto.Largura != " " && Produto.Largura != string.Empty)
                {
                    if (partir_largura[1] == "M")
                    {
                        decimal metros = Convert.ToDecimal(partir_largura[0]);
                        Produto.Largura = ConverterMetrosParaCentimetros(metros).ToString() + " CM";
                    }
                }

                if (Produto.Comprimento != " " && Produto.Comprimento != string.Empty)
                {
                    if (partir_comprimento[1] == "M")
                    {
                        decimal metros = Convert.ToDecimal(partir_comprimento[0]);
                        Produto.Comprimento = ConverterMetrosParaCentimetros(metros).ToString() + " CM";
                    }
                }

                if (Produto.Diametro != " " && Produto.Diametro != string.Empty)
                {
                    if (partir_diametro[1] == "M")
                    {
                        decimal metros = Convert.ToDecimal(partir_diametro[0]);
                        Produto.Diametro = ConverterMetrosParaCentimetros(metros).ToString() + " CM";
                    }
                }

                if (Produto.Capacidade != " " && Produto.Capacidade != string.Empty)
                {
                    if (partir_medida[1] == "KG")
                    {
                        decimal quilos = Convert.ToDecimal(partir_medida[0]);
                        Produto.Capacidade = ConverterQuilosParaGramas(quilos).ToString() + " G";
                    }
                    else if (partir_medida[1] == "L")
                    {
                        decimal litros = Convert.ToDecimal(partir_medida[0]);
                        Produto.Capacidade = ConverterLitrosParaMililitros(litros).ToString() + " ML";
                    }
                }
            }

            return Produtos;
        }

        public void AtualizarObservacaoDaCapsula(string obs, int id_capsula)
        {
            string comando = "UPDATE tbl_Capsulas SET Observacao = @obs WHERE ID_Capsula = @id_capsula";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@obs", obs);
                update.Parameters.AddWithValue("@id_capsula", id_capsula);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void CadastrarCapsula(Capsula Capsula)
        {
            string comando = "INSERT INTO tbl_Capsulas (ID_Utensilio, ID_Especificacao, Nome_Sistema, Data, ID_Material, Conjunto, Preco_Minimo, Preco_Maximo, Altura_Min, Altura_Max, Altura_Un, Largura_Min, Largura_Max, Largura_Un, Comprimento_Min, Comprimento_Max, Comprimento_Un, Diametro_Min, Diametro_Max, Diametro_Un, Capacidade_Min, Capacidade_Max, Capacidade_Un, Catalogo, Observacao, Ideal_Produtos) VALUES ((SELECT ID_Utensilio FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio), (SELECT ID_Especificacao FROM tbl_Especificacoes WHERE Especificacao = @especificacao AND ID_Utensilio = (SELECT ID_Utensilio FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio)), @nome_sistema, GETDATE(), (SELECT ID_MateriaPrima FROM tbl_MateriaPrima WHERE Material = @material), @conjunto, @preco_min, @preco_max, @altura_min, @altura_max, @altura_un, @largura_min, @largura_max, @largura_un, @comprimento_min, @comprimento_max, @comprimento_un, @diametro_min, @diametro_max, @diametro_un, @capacidade_min, @capacidade_max, @capacidade_un, 1, @obs, @ideal)";
            
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@utensilio", Capsula.Nome_Utensilio);
                insert.Parameters.AddWithValue("@especificacao", Capsula.Especificacao);
                insert.Parameters.AddWithValue("@nome_sistema", Capsula.Nome_Sistema);
                insert.Parameters.AddWithValue("@material", Capsula.Material);
                insert.Parameters.AddWithValue("@conjunto", Capsula.Conjunto);
                insert.Parameters.AddWithValue("@preco_min", Capsula.Menor_Preco);
                insert.Parameters.AddWithValue("@preco_max", Capsula.Maior_Preco);
                insert.Parameters.AddWithValue("@altura_min", Capsula.Altura_Min);
                insert.Parameters.AddWithValue("@altura_max", Capsula.Altura_Max);
                insert.Parameters.AddWithValue("@altura_un", Capsula.Altura_Un);
                insert.Parameters.AddWithValue("@largura_min", Capsula.Largura_Min);
                insert.Parameters.AddWithValue("@largura_max", Capsula.Largura_Max);
                insert.Parameters.AddWithValue("@largura_un", Capsula.Largura_Un);
                insert.Parameters.AddWithValue("@comprimento_min", Capsula.Comprimento_Min);
                insert.Parameters.AddWithValue("@comprimento_max", Capsula.Comprimento_Max);
                insert.Parameters.AddWithValue("@comprimento_un", Capsula.Comprimento_Un);
                insert.Parameters.AddWithValue("@diametro_min", Capsula.Diametro_Min);
                insert.Parameters.AddWithValue("@diametro_max", Capsula.Diametro_Max);
                insert.Parameters.AddWithValue("@diametro_un", Capsula.Diametro_Un);
                insert.Parameters.AddWithValue("@capacidade_min", Capsula.Capacidade_Min);
                insert.Parameters.AddWithValue("@capacidade_max", Capsula.Capacidade_Max);
                insert.Parameters.AddWithValue("@capacidade_un", Capsula.Capacidade_Un);
                insert.Parameters.AddWithValue("@catalogo", Capsula.Catalogo);
                insert.Parameters.AddWithValue("@obs", Capsula.Observacao);
                insert.Parameters.AddWithValue("@ideal", Capsula.Ideal_Produtos);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void EditarCapsula(Capsula Capsula)
        {
            string comando = "UPDATE tbl_Capsulas SET ID_Utensilio = (SELECT ID_Utensilio FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio), ID_Especificacao = (SELECT ID_Especificacao FROM tbl_Especificacoes WHERE Especificacao = @especificacao AND ID_Utensilio = (SELECT ID_Utensilio FROM tbl_Utensilios WHERE Nome_utensilio = @utensilio)), Nome_Sistema = @nome_sistema, Data = GETDATE(), ID_Material = (SELECT ID_MateriaPrima FROM tbl_MateriaPrima WHERE Material = @material), Conjunto = @conjunto, Preco_Minimo = @preco_min, Preco_Maximo = @preco_max, Altura_Min = @altura_min, Altura_Max = @altura_max, Altura_Un = @altura_un, Largura_Min = @largura_min, Largura_Max = @largura_max, Largura_Un = @largura_un, Comprimento_Min = @comprimento_min, Comprimento_Max = @comprimento_max, Comprimento_Un = @comprimento_un, Diametro_Min = @diametro_min, Diametro_Max = @diametro_max, Diametro_Un = @diametro_un, Capacidade_Min = @capacidade_min, Capacidade_Max = @capacidade_max, Capacidade_Un = @capacidade_un, Catalogo = 1, Observacao = @obs, Ideal_Produtos = @ideal WHERE ID_Capsula = @id_capsula";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@utensilio", Capsula.Nome_Utensilio);
                update.Parameters.AddWithValue("@especificacao", Capsula.Especificacao);
                update.Parameters.AddWithValue("@nome_sistema", Capsula.Nome_Sistema);
                update.Parameters.AddWithValue("@material", Capsula.Material);
                update.Parameters.AddWithValue("@conjunto", Capsula.Conjunto);
                update.Parameters.AddWithValue("@preco_min", Capsula.Menor_Preco);
                update.Parameters.AddWithValue("@preco_max", Capsula.Maior_Preco);
                update.Parameters.AddWithValue("@altura_min", Capsula.Altura_Min);
                update.Parameters.AddWithValue("@altura_max", Capsula.Altura_Max);
                update.Parameters.AddWithValue("@altura_un", Capsula.Altura_Un);
                update.Parameters.AddWithValue("@largura_min", Capsula.Largura_Min);
                update.Parameters.AddWithValue("@largura_max", Capsula.Largura_Max);
                update.Parameters.AddWithValue("@largura_un", Capsula.Largura_Un);
                update.Parameters.AddWithValue("@comprimento_min", Capsula.Comprimento_Min);
                update.Parameters.AddWithValue("@comprimento_max", Capsula.Comprimento_Max);
                update.Parameters.AddWithValue("@comprimento_un", Capsula.Comprimento_Un);
                update.Parameters.AddWithValue("@diametro_min", Capsula.Diametro_Min);
                update.Parameters.AddWithValue("@diametro_max", Capsula.Diametro_Max);
                update.Parameters.AddWithValue("@diametro_un", Capsula.Diametro_Un);
                update.Parameters.AddWithValue("@capacidade_min", Capsula.Capacidade_Min);
                update.Parameters.AddWithValue("@capacidade_max", Capsula.Capacidade_Max);
                update.Parameters.AddWithValue("@capacidade_un", Capsula.Capacidade_Un);
                update.Parameters.AddWithValue("@catalogo", Capsula.Catalogo);
                update.Parameters.AddWithValue("@obs", Capsula.Observacao);
                update.Parameters.AddWithValue("@ideal", Capsula.Ideal_Produtos);
                update.Parameters.AddWithValue("@id_capsula", Capsula.ID_Capsula);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AlterarInformacoesDaCapsula(Capsula Capsula)
        {
            string comando = "UPDATE tbl_Capsulas SET Nome_Sistema = @sistema, Ideal_Produtos = @ideal WHERE ID_Capsula = @id_capsula";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@sistema", Capsula.Nome_Sistema);
                update.Parameters.AddWithValue("@id_capsula", Capsula.ID_Capsula);
                update.Parameters.AddWithValue("@ideal", Capsula.Ideal_Produtos);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarCapsula(int id)
        {
            string comando = "DELETE FROM tbl_Capsulas WHERE ID_Capsula = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            ApagarImagensDosProdutosVinculadosAsCapsulas(id);
            ApagarLocalizacoesDosProdutosVinculadosAsCapsulas(id);
            ApagarProdutosDoCatalogoDaCapsula(id);

            MessageBox.Show("Cápsula excluída!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void ApagarProdutosDoCatalogoDaCapsula(int id)
        {
            string comando = "DELETE FROM tbl_Catalogo WHERE ID_Capsula = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        private void ApagarLocalizacoesDosProdutosVinculadosAsCapsulas(int id_capsula)
        {
            string comando = "DELETE FROM tbl_ProdutosLocalizacoes WHERE (SELECT ID_Capsula FROM tbl_Catalogo WHERE ID_Catalogo = tbl_ProdutosLocalizacoes.ID_Catalogo) = @id_capsula";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_capsula", id_capsula);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        private void ApagarImagensDosProdutosVinculadosAsCapsulas(int id_capsula)
        {
            string comando = "DELETE FROM tbl_ProdutosImagens WHERE (SELECT ID_Capsula FROM tbl_Catalogo WHERE ID_Catalogo = tbl_ProdutosImagens.ID_Catalogo) = @id_capsula";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_capsula", id_capsula);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        public int IdDaUltimaCapsulaCadastrada()
        {
            int id;
            string comando = "SELECT TOP(1) ID_Capsula FROM tbl_Capsulas ORDER BY ID_Capsula DESC";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                id = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return id;
        }

        public void PreencherDataGridCapsulas(BindingSource bindingSource, DataGridView dataGridView)
        {
            string comando = "SELECT ID_Capsula AS ID, Nome_Sistema AS Nome, (SELECT Nome_Utensilio FROM tbl_Utensilios WHERE ID_Utensilio = tbl_Capsulas.ID_Utensilio) AS Utensilio, (SELECT Material FROM tbl_MateriaPrima WHERE ID_MateriaPrima = ID_Material) AS Material,  Ideal_Produtos AS Ideal, (SELECT COUNT(*) FROM tbl_Catalogo WHERE ID_Capsula = tbl_Capsulas.ID_Capsula) AS Produtos, Catalogo FROM tbl_Capsulas ORDER BY ID_Capsula DESC";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGridView.DataSource = bindingSource;
            }
            conexao.Desconectar();
        }

        public Catalogo InformacoesDoProdutoDoCatalogo(int id)
        {
            Catalogo catalogo = new Catalogo();
            string comando = "SELECT ID_Catalogo, Nome, Instagram, Whatsapp, Estoque_Ideal, Nome_Preco, ISNULL(Preco_Venda, 0), (SELECT Preco_Base + (Preco_Base / 100 * Aliquota_ICMS) + (Preco_Base / 100 * Aliquota_IPI) FROM tbl_Produtos2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao)), (SELECT Descricao FROM tbl_ProdutosLinhas WHERE ID_Linha = tbl_Catalogo.ID_Linha) AS Linha FROM tbl_Catalogo WHERE ID_Catalogo = @id";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        catalogo.ID_Catalogo = Convert.ToInt32(leitor[0]);
                        catalogo.Nome = leitor[1].ToString();
                        catalogo.Instagram = Convert.ToBoolean(leitor[2]);
                        catalogo.Whatsapp = Convert.ToBoolean(leitor[3]);
                        catalogo.Estoque_Ideal = Convert.ToInt32(leitor[4]);
                        catalogo.Nome_Preco = leitor[5].ToString();
                        catalogo.Preco_Venda = Convert.ToDecimal(leitor[6]);
                        catalogo.Preco_Base = Convert.ToDecimal(leitor[7]);
                        catalogo.Linha = leitor[8].ToString();
                    }
                }
            }

            conexao.Desconectar();
            return catalogo;
        }

        public List<string> preencherComboLinhas()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Descricao FROM tbl_ProdutosLinhas ORDER BY Lucro, ID_Linha";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(leitor[0].ToString());
                    }
                }
            }

            conexao.Desconectar();
            return lista;
        }

        public List<ProdutoLocalizacao> LocalizacoesDoProdutoDoCatalogo(int id_catalogo)
        {
            List<ProdutoLocalizacao> Localizacoes = new List<ProdutoLocalizacao>();
            string comando = "SELECT (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) AS Localizacao, (SELECT Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira)) + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira))) AS Setor, (SELECT Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = ID_ReparticaoOrigem) + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = ID_ReparticaoOrigem)) AS Origem, Qtd_Ideal, CMR FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = @id_catalogo";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_catalogo", id_catalogo);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Localizacoes.Add(new ProdutoLocalizacao
                        {
                            ID_Catalogo = id_catalogo,
                            Localizacao = leitor[0].ToString(),
                            Reparticao = leitor[1].ToString(),
                            Reparticao_Origem = leitor[2].ToString(),
                            Qtd_Ideal = Convert.ToInt32(leitor[3]),
                            CMR = Convert.ToInt32(leitor[4])
                        });
                    }
                }
            }
            conexao.Desconectar();
            return Localizacoes;
        }

        public List<Reparticao> PreencherComboReparticoesPeloEstabelecimento(string estabelecimento)
        {
            List<Reparticao> lista = new List<Reparticao>();
            
            string comando = "SELECT ID_Reparticao, Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_Estabelecimentos WHERE Descricao = @estabelecimento)";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@estabelecimento", estabelecimento);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(new Reparticao
                        {
                            ID_Reparticao = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();
            
            return lista;
        }

        public ProdutoLocalizacao TrazerLocalizacaoDoProdutoNaReparticaoPeloCodigoDeBarras(string cod_barras, int id_reparticao)
        {
            ProdutoLocalizacao localizacao = new ProdutoLocalizacao();

            string comando = "SELECT ID_ProdutoLocalizacao, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) AS Localizacao, Qtd_Ideal, CMR, Identificacao, ID_ReparticaoOrigem, ID_Identificacao FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = (SELECT ID_ProdutoVariacao FROM tbl_ProdutoVariacao WHERE Cod_Barras = @cod_barras) AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) = @id_reparticao)";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@cod_barras", cod_barras);
                select.Parameters.AddWithValue("@id_reparticao", id_reparticao);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        localizacao.ID_ProdutoLocalizacao = Convert.ToInt32(leitor[0]);
                        localizacao.Localizacao = leitor[1].ToString();
                        localizacao.Qtd_Ideal = Convert.ToInt32(leitor[2]);
                        localizacao.CMR = Convert.ToInt32(leitor[3]);
                        localizacao.Identificado = Convert.ToBoolean(leitor[4]);
                        try { localizacao.ID_Reparticao_Origem = Convert.ToInt32(leitor[5]); }
                        catch { localizacao.ID_Reparticao_Origem = 0; }
                    }
                }
            }

            conexao.Desconectar();

            return localizacao;
        }

        public ProdutoLocalizacao TrazerLocalizacaoDoProdutoNaReparticaoPeloIdDoCatalogo (int id_catalogo, int id_reparticao)
        {
            ProdutoLocalizacao localizacao = new ProdutoLocalizacao();

            string comando = "SELECT ID_ProdutoLocalizacao, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) AS Localizacao, Qtd_Ideal, CMR, Identificacao, ID_ReparticaoOrigem, ID_Identificacao FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = @id_catalogo AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) = @id_reparticao)";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_catalogo", id_catalogo);
                select.Parameters.AddWithValue("@id_reparticao", id_reparticao);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        localizacao.ID_ProdutoLocalizacao = Convert.ToInt32(leitor[0]);
                        localizacao.Localizacao = leitor[1].ToString();
                        localizacao.Qtd_Ideal = Convert.ToInt32(leitor[2]);
                        localizacao.CMR = Convert.ToInt32(leitor[3]);
                        localizacao.Identificado = Convert.ToBoolean(leitor[4]);
                        localizacao.ID_Reparticao_Origem = Convert.ToInt32(leitor[5]);
                    }
                }
            }

            conexao.Desconectar();

            return localizacao;
        }

        public void AlterarLocalizacoesDosProdutos(List<ProdutoLocalizacao> Produtos)
        {
            string comando = "UPDATE tbl_ProdutosLocalizacoes SET ID_Prateleira = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao), Qtd_Ideal = @qtd_ideal, CMR = @cmr, ID_ReparticaoOrigem = @id_reparticao_origem, Identificacao = @identificacao WHERE ID_ProdutoLocalizacao = @id";

            foreach (ProdutoLocalizacao Produto in Produtos)
            {
                int id = Produto.ID_ProdutoLocalizacao;
                int qtd_ideal = Produto.Qtd_Ideal;
                int cmr = Produto.CMR;
                bool identificacao = Produto.Identificado;
                string localizacao = Produto.Localizacao;
                int id_reparticao_origem = Produto.ID_Reparticao_Origem;

                try
                {
                    using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
                    {
                        update.Parameters.AddWithValue("@localizacao", localizacao);
                        update.Parameters.AddWithValue("@id_reparticao_origem", id_reparticao_origem);
                        update.Parameters.AddWithValue("@qtd_ideal", qtd_ideal);
                        update.Parameters.AddWithValue("@cmr", cmr);
                        update.Parameters.AddWithValue("@identificacao", identificacao);
                        update.Parameters.AddWithValue("@id", id);

                        update.ExecuteNonQuery();
                    }
                }
                catch
                {
                    MessageBox.Show("Erro encontrado.", "Erro!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Localizações atualizadas com sucesso!.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        public List<Reparticao> PreencherComboReparticoes()
        {
            List<Reparticao> lista = new List<Reparticao>();
            string comando = "SELECT ID_Reparticao, Descricao + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = tbl_ReparticoesEstabelecimentos.ID_Estabelecimento) FROM tbl_ReparticoesEstabelecimentos";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(new Reparticao
                        {
                            ID_Reparticao = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();
            return lista;
        }

        public List<string> PreencherComboPrateleiras(int id)
        {
            List<string> lista = new List<string>();
            
            string comando = "SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = @id) ORDER BY Localizacao";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(Convert.ToString(leitor[0]));
                    }
                }
            }

            conexao.Desconectar();

            return lista;
        }

        public ProdutoReposicao LocalizacoesDeOrigemEDestino(int origem, int destino, string codigo)
        {
            ProdutoReposicao produto = new ProdutoReposicao();

            string comando = "SELECT (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = (SELECT TOP(1) ID_Prateleira FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) = @origem)) AS Origem, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = (SELECT TOP(1) ID_Prateleira FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = (SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) = @destino)) AS Destino FROM tbl_ProdutoVariacao WHERE Cod_Barras = @codigo";
           
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@origem", origem);
                select.Parameters.AddWithValue("@destino", destino);
                select.Parameters.AddWithValue("@codigo", codigo);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        produto.Local_Origem = leitor[0].ToString();
                        produto.Local_Destino = leitor[1].ToString();
                    }
                }
            }

            conexao.Desconectar();

            return produto;
        }

        public List<string> PreencherComboIdentificacoes(int id)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Identificacao FROM tbl_IdentificacoesPrateleiras WHERE ID_Setor = (SELECT ID_Setor FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = @id) ORDER BY Identificacao";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(Convert.ToString(leitor[0]));
                    }
                }
            }

            conexao.Desconectar();
            return lista;
        }

        #region Linhas
        public List<Linha> ListaDeLinhasDeProdutos()
        {
            List<Linha> Linhas = new List<Linha>();
            string comando = "SELECT ID_Linha, Descricao, Marketing, Lucro, Markup, Ativacao FROM tbl_ProdutosLinhas";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Linhas.Add(new Linha
                        {
                            ID_Linha = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Marketing = leitor[2].ToString(),
                            Lucro = Convert.ToDecimal(leitor[3]),
                            Markup = Convert.ToDecimal(leitor[4]),
                            Ativacao = Convert.ToBoolean(leitor[5])
                        });
                    }
                }
            }
            conexao.Desconectar();
            return Linhas;
        }
        public void ApagarLinha(int id)
        {
            string comando = "DELETE FROM tbl_ProdutosLinhas WHERE ID_Linha = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }
        public void CadastrarLinha(Linha linha)
        {
            string comando = "INSERT INTO tbl_ProdutosLinhas (Descricao, Markup, Marketing, Ativacao, Lucro, Data_Calculo) VALUES (@descricao, @markup, @marketing, @ativacao, @lucro, GETDATE())";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", linha.Descricao);
                insert.Parameters.AddWithValue("@markup", linha.Markup);
                insert.Parameters.AddWithValue("@marketing", linha.Marketing);
                insert.Parameters.AddWithValue("@lucro", linha.Lucro);
                insert.Parameters.AddWithValue("@ativacao", linha.Ativacao);
                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Linha cadastrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public void EditarLinha(Linha linha)
        {
            string comando = "UPDATE tbl_ProdutosLinhas SET Descricao = @descricao, Marketing = @marketing, Ativacao = @ativacao WHERE ID_Linha = @id_linha";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@descricao", linha.Descricao);
                update.Parameters.AddWithValue("@marketing", linha.Marketing);
                update.Parameters.AddWithValue("@ativacao", linha.Ativacao);
                update.Parameters.AddWithValue("@id_linha", linha.ID_Linha);
                update.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Linha editada.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public void EditarMarkup(Linha linha)
        {
            string comando = "UPDATE tbl_ProdutosLinhas SET Markup = @markup, Lucro = @lucro, Data_Calculo = GETDATE() WHERE ID_Linha = @id_linha";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@markup", linha.Markup);
                update.Parameters.AddWithValue("@lucro", linha.Lucro);
                update.Parameters.AddWithValue("@id_linha", linha.ID_Linha);
                update.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }
        public decimal FaturamentoNoPeriodo(DateTime inicio, DateTime termino)
        {
            decimal faturamento;
            string comando = "SELECT SUM(Valor_Venda) AS Receita FROM tbl_Vendas WHERE CONVERT(DATE, Data_Venda) BETWEEN @inicio AND @termino";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@inicio", inicio);
                select.Parameters.AddWithValue("@termino", termino);
                faturamento = Convert.ToDecimal(select.ExecuteScalar());
            }
            conexao.Desconectar();

            return faturamento;
        }
        public decimal TotalDespesasPorTipo(string despesa)
        {
            decimal valor;
            string comando = "SELECT SUM(Valor) FROM tbl_Despesas WHERE Tipo_Despesa = @despesa";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@despesa", despesa);
                valor = Convert.ToDecimal(select.ExecuteScalar());
            }
            conexao.Desconectar();

            return valor;
        }
        public decimal MultplicadorDePrecoDeVenda(string linha)
        {
            decimal multiplicador;
            string comando = "SELECT Markup FROM tbl_ProdutosLinhas WHERE Descricao = @linha";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@linha", linha);
                multiplicador = Convert.ToDecimal(select.ExecuteScalar());
            }
            conexao.Desconectar();

            return multiplicador;
        }
        #endregion

        #region Catalogo
        public void CadastrarProdutoDoCatalogo(Catalogo catalogo)
        {
            string comando = "INSERT INTO tbl_Catalogo (ID_Capsula, ID_ProdutoVariacao, Nome, Instagram, Whatsapp, Estoque_Ideal, Nome_Preco, Preco_Venda, ID_Linha) VALUES (@id_capsula, @id_produtovariacao, @nome, @instagram, @whatsapp, @estoque, @nome_preco, @venda, (SELECT ID_Linha FROM tbl_ProdutosLinhas WHERE Descricao = @linha))";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_capsula", catalogo.ID_Capsula);
                insert.Parameters.AddWithValue("@id_produtovariacao", catalogo.ID_ProdutoVariacao);
                insert.Parameters.AddWithValue("@nome", catalogo.Nome);
                insert.Parameters.AddWithValue("@instagram", catalogo.Instagram);
                insert.Parameters.AddWithValue("@whatsapp", catalogo.Whatsapp);
                insert.Parameters.AddWithValue("@estoque", catalogo.Estoque_Ideal);
                insert.Parameters.AddWithValue("@nome_preco", catalogo.Nome_Preco);
                insert.Parameters.AddWithValue("@venda", catalogo.Preco_Venda);
                insert.Parameters.AddWithValue("@linha", catalogo.Linha);

                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Produto catalogado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public bool VerificarSeNomeDoProdutoJaExiste(string produto)
        {
            string comando = "SELECT Nome FROM tbl_Catalogo WHERE Nome = @produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@produto", produto);

            bool contem;
            if (select.ExecuteScalar() == null) { contem = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { contem = false; }
            else { contem = true; }
            conexao.Desconectar();

            return contem;
        }
        public void EditarProdutoDoCatalogo(Catalogo catalogo)
        {
            string comando = "UPDATE tbl_Catalogo SET Nome = @nome, Instagram = @instagram, Whatsapp = @whatsapp, Estoque_Ideal = @estoque, Nome_Preco = @nome_preco, Preco_Venda = @venda, ID_Linha = (SELECT ID_Linha FROM tbl_ProdutosLinhas WHERE Descricao = @linha) WHERE ID_Catalogo = @id_catalogo";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@nome", catalogo.Nome);
                update.Parameters.AddWithValue("@instagram", catalogo.Instagram);
                update.Parameters.AddWithValue("@whatsapp", catalogo.Whatsapp);
                update.Parameters.AddWithValue("@estoque", catalogo.Estoque_Ideal);
                update.Parameters.AddWithValue("@nome_preco", catalogo.Nome_Preco);
                update.Parameters.AddWithValue("@venda", catalogo.Preco_Venda);
                update.Parameters.AddWithValue("@linha", catalogo.Linha);
                update.Parameters.AddWithValue("@id_catalogo", catalogo.ID_Catalogo);

                update.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Produto do catálogo editado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public int IdDoUltimoProdutoCatalogado()
        {
            int id;
            string comando = "SELECT TOP(1) ID_Catalogo FROM tbl_Catalogo ORDER BY ID_Catalogo DESC";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                id = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return id;
        }
        public ProdutoLocalizacao InformacoesDaLocalizacao(int id_catalogo, string localizacao)
        {
            ProdutoLocalizacao Localizacao = new ProdutoLocalizacao();
            string comando = "SELECT (SELECT CONVERT(VARCHAR(10), ID_Reparticao) + '. ' + Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira)) AS Reparticao, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) AS Localizacao, Qtd_Ideal, (SELECT Identificacao FROM tbl_IdentificacoesPrateleiras WHERE ID_Identificacao = tbl_ProdutosLocalizacoes.ID_Identificacao) AS Identificacao, CMR, ISNULL((SELECT CONVERT(VARCHAR(10), ID_Reparticao) + '. ' + Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = ID_ReparticaoOrigem), '') AS Origem, (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira))) AS Estabelecimento, (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_ProdutosLocalizacoes.ID_ReparticaoOrigem)) AS Est_Origem FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = @id_catalogo AND ID_Prateleira = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao)";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_catalogo", id_catalogo);
                select.Parameters.AddWithValue("@localizacao", localizacao);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Localizacao.Reparticao = leitor[0].ToString();
                        Localizacao.Localizacao = leitor[1].ToString();
                        Localizacao.Qtd_Ideal = Convert.ToInt32(leitor[2]);
                        Localizacao.Identificacao = leitor[3].ToString();
                        Localizacao.CMR = Convert.ToInt32(leitor[4]);
                        Localizacao.Reparticao_Origem = leitor[5].ToString();
                        Localizacao.Estabelecimento = leitor[6].ToString();
                        Localizacao.Estabelecimento_Origem = leitor[7].ToString();
                    }
                }
            }
            conexao.Desconectar();
            return Localizacao;
        }
        public bool VerificarSeVinculoEntreProdutoELocalizacaoJaExiste(int id_catalogo, string localizacao)
        {
            string comando = "SELECT ID_Catalogo FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = @id_catalogo AND (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) = @localizacao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_catalogo", id_catalogo);
            select.Parameters.AddWithValue("@localizacao", localizacao);

            bool contem;
            if (select.ExecuteScalar() == null) { contem = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { contem = false; }
            else { contem = true; }
            conexao.Desconectar();

            return contem;
        }
        public void CadastrarLocalizacoesDoProduto(ProdutoLocalizacao localizacao)
        {
            string comando = "INSERT INTO tbl_ProdutosLocalizacoes (ID_Catalogo, ID_Prateleira, Qtd_Ideal, CMR, ID_ReparticaoOrigem, ID_Identificacao, Identificacao) VALUES (@id_catalogo, (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao), @estoque, @cmr, @id_origem, (SELECT ID_Identificacao FROM tbl_IdentificacoesPrateleiras WHERE Identificacao = @identificacao), 0)";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_catalogo", localizacao.ID_Catalogo);
                insert.Parameters.AddWithValue("@localizacao", localizacao.Localizacao);
                insert.Parameters.AddWithValue("@estoque", localizacao.Qtd_Ideal);
                insert.Parameters.AddWithValue("@cmr", localizacao.CMR);
                insert.Parameters.AddWithValue("@id_origem", localizacao.ID_Reparticao_Origem);
                insert.Parameters.AddWithValue("@identificacao", localizacao.Identificacao);

                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void EditarLocalizacoesDoProduto(ProdutoLocalizacao localizacao)
        {
            string comando = "UPDATE tbl_ProdutosLocalizacoes SET Qtd_Ideal = @estoque, CMR = @cmr, ID_ReparticaoOrigem = @id_origem, ID_Identificacao = (SELECT ID_Identificacao FROM tbl_IdentificacoesPrateleiras WHERE Identificacao = @identificacao) WHERE ID_Prateleira = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao) AND ID_Catalogo = @id_catalogo";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_catalogo", localizacao.ID_Catalogo);
                update.Parameters.AddWithValue("@localizacao", localizacao.Localizacao);
                update.Parameters.AddWithValue("@estoque", localizacao.Qtd_Ideal);
                update.Parameters.AddWithValue("@cmr", localizacao.CMR);
                update.Parameters.AddWithValue("@id_origem", localizacao.ID_Reparticao_Origem);
                update.Parameters.AddWithValue("@identificacao", localizacao.Identificacao);

                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void ApagarLocalizacaoDoProduto(string localizacao, int id_catalogo)
        {
            string comando = "DELETE FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = @id_catalogo AND ID_Prateleira = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @localizacao)";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@localizacao", localizacao);
                delete.Parameters.AddWithValue("@id_catalogo", id_catalogo);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Localização do produto excluída permanentemente!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public List<Catalogo> ListaDeProdutosCatalogadosDaCapsula(int id_capsula)
        {
            List<Catalogo> produtos = new List<Catalogo>();
            string comando = "SELECT ID_Catalogo AS ID, Nome, (SELECT Fabricante FROM tbl_Fabricantes WHERE ID_Fabricante = (SELECT ID_Fabricante FROM tbl_Produtos2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao))) AS Fabricante, Preco_Venda AS Venda, (SELECT Ativacao FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) AS Ativacao, (SELECT Disponibilidade FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) AS Disponibilidade, ID_ProdutoVariacao FROM tbl_Catalogo WHERE ID_Capsula = @id_capsula";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_capsula", id_capsula);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        produtos.Add(new Catalogo
                        {
                            ID_Catalogo = Convert.ToInt32(leitor[0]),
                            Nome = leitor[1].ToString(),
                            Fabricante = leitor[2].ToString(),
                            Preco_Venda = Convert.ToDecimal(leitor[3]),
                            Ativacao = Convert.ToBoolean(leitor[4]),
                            Disponibilidade = Convert.ToBoolean(leitor[5]),
                            ID_ProdutoVariacao = Convert.ToInt32(leitor[6])
                        });
                    }
                }
            }

            conexao.Desconectar();
            return produtos;
        }

        public List<Catalogo> ListaDeProdutosCatalogados()
        {
            List<Catalogo> produtos = new List<Catalogo>();
            string comando = "SELECT ID_Catalogo AS ID, Nome, (SELECT Fabricante FROM tbl_Fabricantes WHERE ID_Fabricante = (SELECT ID_Fabricante FROM tbl_Produtos2 WHERE ID_Produto = (SELECT ID_Produto FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao))) AS Fabricante, ISNULL(Preco_Venda, 0) AS Venda, (SELECT Ativacao FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) AS Ativacao, (SELECT Disponibilidade FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao) AS Disponibilidade, ISNULL(ID_ProdutoVariacao, 0) FROM tbl_Catalogo";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        produtos.Add(new Catalogo
                        {
                            ID_Catalogo = Convert.ToInt32(leitor[0]),
                            Nome = leitor[1].ToString(),
                            Fabricante = leitor[2].ToString(),
                            Preco_Venda = Convert.ToDecimal(leitor[3]),
                            Ativacao = Convert.ToBoolean(leitor[4]),
                            Disponibilidade = Convert.ToBoolean(leitor[5]),
                            ID_ProdutoVariacao = Convert.ToInt32(leitor[6])
                        });
                    }
                }
            }

            conexao.Desconectar();
            return produtos;
        }
        public void ApagarProdutoDoCatalogo(int id)
        {
            string comando = "DELETE FROM tbl_Catalogo WHERE ID_Catalogo = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            ApagarImagensDoProdutoDoCatalogo(id);
            ApagarLocalizacoesDoProdutoDoCatalogo(id);
        }
        private void ApagarImagensDoProdutoDoCatalogo(int id)
        {
            string comando = "DELETE FROM tbl_Catalogo WHERE ID_Catalogo = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }
        private void ApagarLocalizacoesDoProdutoDoCatalogo(int id)
        {
            string comando = "DELETE FROM tbl_Catalogo WHERE ID_Catalogo = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }
        public void AlterarDisponibilidadeDoProdutoNoCatalogo(int id_catalogo)
        {
            string comando = "UPDATE tbl_ProdutoVariacao SET Disponibilidade = IIF(Disponibilidade = 1, 0, 1) WHERE ID_ProdutoVariacao = (SELECT ID_ProdutoVariacao FROM tbl_Catalogo WHERE ID_Catalogo = @id_catalogo)";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_catalogo", id_catalogo);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void AlterarAtivacaoDoProdutoNoCatalogo(int id_catalogo)
        {
            string comando = "UPDATE tbl_ProdutoVariacao SET Ativacao = IIF(Ativacao = 1, 0, 1) WHERE ID_ProdutoVariacao = (SELECT ID_ProdutoVariacao FROM tbl_Catalogo WHERE ID_Catalogo = @id_catalogo)";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_catalogo", id_catalogo);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void AlterarStatusDoInstagramDoProduto(int id_catalogo)
        {
            string comando = "UPDATE tbl_Catalogo SET Instagram = IIF(Instagram = 1, 0, 1) WHERE ID_Catalogo = @id_catalogo";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_catalogo", id_catalogo);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void AlterarStatusDoWhatsappDoProduto(int id_catalogo)
        {
            string comando = "UPDATE tbl_Catalogo SET Whatsapp = IIF(Whatsapp = 1, 0, 1) WHERE ID_Catalogo = @id_catalogo";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_catalogo", id_catalogo);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        #region Imagens do catálogo
        public bool VerificarSeNomeDaImagemJaExiste(string descricao)
        {
            string comando = "SELECT Descricao FROM tbl_Imagens WHERE Descricao = @descricao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@descricao", descricao);

            bool contem;
            if (select.ExecuteScalar() == null) { contem = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { contem = false; }
            else { contem = true; }
            conexao.Desconectar();

            return contem;
        }
        public void InserirImagem(Imagem_Produto produto)
        {
            byte[] imagem = CarregarImagem(produto.Caminho);
            string comando = "INSERT INTO tbl_Imagens (Descricao, Imagem, Categoria) VALUES (@descricao, @imagem, 'PRODUTOS')";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", produto.Descricao);
                insert.Parameters.Add("@imagem", SqlDbType.Image, imagem.Length).Value = imagem;
                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Imagem registrada!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public byte[] CarregarImagem(string caminho)
        {
            byte[] imagem;

            using (FileStream stream = new FileStream(caminho, FileMode.Open, FileAccess.Read))
            {
                using (BinaryReader leitor = new BinaryReader(stream))
                {
                    imagem = leitor.ReadBytes((int)stream.Length);
                }
            }

            return imagem;
        }
        public void VincularImagemAoProduto(int id_catalogo)
        {
            string comando = "INSERT INTO tbl_ProdutosImagens (ID_Catalogo, ID_Imagem) VALUES (@id_catalogo, (SELECT TOP(1) ID_Imagem FROM tbl_Imagens WHERE Categoria = 'PRODUTOS' ORDER BY ID_Imagem DESC))";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_catalogo", id_catalogo);
                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }
        public List<string> PreencherComboImagens(int id_catalogo)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Descricao FROM tbl_Imagens WHERE (SELECT COUNT(*) FROM tbl_ProdutosImagens WHERE ID_Imagem = tbl_Imagens.ID_Imagem AND ID_Catalogo = @id_catalogo) > 0";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_catalogo", id_catalogo);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(Convert.ToString(leitor[0]));
                    }
                }
            }

            conexao.Desconectar();
            return lista;
        }
        public List<Imagem_Produto> ListaDeImagens(int id_catalogo)
        {
            List<Imagem_Produto> lista = new List<Imagem_Produto>();
            string comando = "SELECT ID_Imagem, Descricao, Imagem FROM tbl_Imagens WHERE (SELECT COUNT(*) FROM tbl_ProdutosImagens WHERE ID_Imagem = tbl_Imagens.ID_Imagem AND ID_Catalogo = @id_catalogo) > 0";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_catalogo", id_catalogo);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    int i = 1;
                    while (leitor.Read())
                    {
                        lista.Add(new Imagem_Produto
                        {
                            Index = i,
                            ID_Imagem = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Imagem = (byte[])leitor[2]
                        });

                        i++;
                    }
                }
            }

            conexao.Desconectar();
            return lista;
        }
        public void ApagarImagemDoCatalogo(int id_catalogo, int id_imagem)
        {
            string comando = "DELETE FROM tbl_ProdutosImagens WHERE ID_Catalogo = @id_catalogo AND ID_Imagem = @id_imagem";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_catalogo", id_catalogo);
                delete.Parameters.AddWithValue("@id_imagem", id_imagem);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }
        public void ApagarImagem(int id_imagem)
        {
            string comando = "DELETE FROM tbl_Imagens WHERE ID_Imagem = @id_imagem";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_imagem", id_imagem);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        #endregion
        #endregion

        public List<Catalogo> ProdutosDoCatalogoParaTransformacao()
        {
            string comando = "SELECT ID_ProdutoVariacao AS ID, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) AS Produto, Preco_Base AS Custo, Aliquota_IPI, Aliquota_ICMS, tbl_ProdutoVariacao.Ativacao, tbl_ProdutoVariacao.Disponibilidade, (SELECT Nome_Utensilio FROM tbl_Utensilios WHERE ID_Utensilio = tbl_Produtos2.ID_Utensilio) AS Utensilio, (SELECT Fabricante FROM tbl_Fabricantes WHERE ID_Fabricante = tbl_Produtos2.ID_Fabricante) AS Fabricante, (SELECT Material FROM tbl_MateriaPrima WHERE ID_MateriaPrima = tbl_Produtos2.ID_Material) AS Material, Especificacao, IIF(ID_Conjunto IS NULL, 0, ID_Conjunto) AS ID_Conjunto, Altura, Largura, Comprimento, Diametro, Capacidade, (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) AS Cor, (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) AS Estampa, Tipo, IIF((SELECT COUNT(*) FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) = 0, 'Descartado', IIF((SELECT Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) = 1, 'Catalogado', 'Provisório')) AS Catalogado, ISNULL((SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao), 0) AS ID_Catalogo, tbl_ProdutoVariacao.ID_Produto FROM tbl_ProdutoVariacao INNER JOIN tbl_Produtos2 ON tbl_ProdutoVariacao.ID_Produto = tbl_Produtos2.ID_Produto";
            
            List<Catalogo> Produtos = new List<Catalogo>();
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Produtos.Add(new Catalogo
                {
                    ID_ProdutoVariacao = Convert.ToInt32(leitor[0]),
                    Nome_Produto = leitor[1].ToString(),
                    Preco_Base = Convert.ToDecimal(leitor[2]),
                    Aliquota_IPI = Convert.ToDecimal(leitor[3]),
                    Aliquota_ICMS = Convert.ToDecimal(leitor[4]),
                    Ativacao = Convert.ToBoolean(leitor[5]),
                    Disponibilidade = Convert.ToBoolean(leitor[6]),
                    Utensilio = leitor[7].ToString(),
                    Fabricante = leitor[8].ToString(),
                    MateriaPrima = leitor[9].ToString(),
                    Especificacao = leitor[10].ToString(),
                    ID_Conjunto = Convert.ToInt32(leitor[11]),
                    Altura = leitor[12].ToString(),
                    Largura = leitor[13].ToString(),
                    Comprimento = leitor[14].ToString(),
                    Diametro = leitor[15].ToString(),
                    Capacidade = leitor[16].ToString(),
                    Cor = leitor[17].ToString(),
                    Estampa = leitor[18].ToString(),
                    Tipo = leitor[19].ToString(),
                    Status = leitor[20].ToString(),
                    ID_Catalogo = Convert.ToInt32(leitor[21]),
                    ID_Produto = Convert.ToInt32(leitor[22])
                });
            }
            leitor.Close();
            conexao.Desconectar();

            return Produtos;
        }

        public void PreencherDataGridTransformacoes(BindingSource bindingSource, DataGridView dataGridView)
        {
            string comando = "SELECT ID_ProdutoVariacao AS ID, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) AS Produto, Preco_Base, Aliquota_IPI, Aliquota_ICMS, FORMAT(ISNULL(Preco_Base + (Preco_Base / 100 * Aliquota_IPI) + (Preco_Base / 100 * Aliquota_ICMS), 0) , 'C', 'pt-br') AS Custo, tbl_ProdutoVariacao.Ativacao, tbl_ProdutoVariacao.Disponibilidade, (SELECT Nome_Utensilio FROM tbl_Utensilios WHERE ID_Utensilio = tbl_Produtos2.ID_Utensilio) AS Utensilio, (SELECT Fabricante FROM tbl_Fabricantes WHERE ID_Fabricante = tbl_Produtos2.ID_Fabricante) AS Fabricante, (SELECT Material FROM tbl_MateriaPrima WHERE ID_MateriaPrima = tbl_Produtos2.ID_Material) AS Material, Especificacao, IIF(ID_Conjunto IS NULL, 0, ID_Conjunto) AS ID_Conjunto, Altura, Largura, Comprimento, Diametro, Capacidade, (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) AS Cor, (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) AS Estampa, Tipo, IIF((SELECT COUNT(*) FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) = 0, 'Descartado', IIF((SELECT Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao) = 1, 'Catalogado', 'Provisório')) AS Catalogado, ISNULL((SELECT ID_Catalogo FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutoVariacao.ID_ProdutoVariacao), 0) AS ID_Catalogo FROM tbl_ProdutoVariacao INNER JOIN tbl_Produtos2 ON tbl_ProdutoVariacao.ID_Produto = tbl_Produtos2.ID_Produto ORDER BY Utensilio, Produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            bindingSource.DataSource = dataSet;
            bindingSource.DataMember = dataSet.Tables[0].TableName;
            dataGridView.DataSource = bindingSource;
            conexao.Desconectar();
        }

        public void ApagarProdutoDoCatalogoPeloIdDaVariacao(int id)
        {
            string comando = "DELETE FROM tbl_Catalogo WHERE ID_ProdutoVariacao = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            ApagarImagensDoProdutoDoCatalogo(id);
            ApagarLocalizacoesDoProdutoDoCatalogo(id);
        }

        public void CatalogarOProdutoPeloIdDaVariacao(int id)
        {
            string comando = "INSERT INTO tbl_Catalogo (ID_Capsula, ID_ProdutoVariacao, Nome, Instagram, Whatsapp, Estoque_Ideal, Nome_Preco, Preco_Venda, ID_Linha, Catalogo)SELECT 0, ID_ProdutoVariacao, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto), 0, 0, 1,SUBSTRING((SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto), 1, 30), (SELECT top(1) Preco_Venda FROM tbl_Produtos WHERE Cod_Barras = (SELECT Cod_Barras FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto)), 1, 0 FROM tbl_ProdutoVariacao WHERE ID_ProdutoVariacao = @id";
            string cmd = "INSERT INTO tbl_ProdutosLocalizacoes (ID_Catalogo, ID_Prateleira, Qtd_Ideal, CMR, ID_ReparticaoOrigem, ID_Identificacao, Identificacao) VALUES ((SELECT TOP(1) ID_Catalogo FROM tbl_Catalogo ORDER BY ID_Catalogo DESC), 1453, 1,	1,	NULL, 3, 0), ((SELECT TOP(1) ID_Catalogo FROM tbl_Catalogo ORDER BY ID_Catalogo DESC), 1454, 1,	1,	5	, 3, 0), ((SELECT TOP(1) ID_Catalogo FROM tbl_Catalogo ORDER BY ID_Catalogo DESC), 1455, 1,	1,	2	, 1, 0), ((SELECT TOP(1) ID_Catalogo FROM tbl_Catalogo ORDER BY ID_Catalogo DESC), 1458, 1,	1,	8	, 1, 0), ((SELECT TOP(1) ID_Catalogo FROM tbl_Catalogo ORDER BY ID_Catalogo DESC), 1459, 1,	1,	5	, 3, 0)";
            
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id", id);
                insert.ExecuteNonQuery();
            }

            using (SqlCommand insert = new SqlCommand(cmd, conexao.Conectar()))
            {
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void TransformarProdutoDoCatalogo(Catalogo catalogo)
        {
            string comando = "UPDATE tbl_Catalogo SET Nome = @nome, Instagram = @instagram, Whatsapp = @whatsapp, Estoque_Ideal = @estoque, Nome_Preco = @nome_preco, Preco_Venda = @venda, ID_Linha = (SELECT ID_Linha FROM tbl_ProdutosLinhas WHERE Descricao = @linha), ID_Capsula = @id_capsula, Catalogo = 1 WHERE ID_Catalogo = @id_catalogo";
            
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@nome", catalogo.Nome);
                update.Parameters.AddWithValue("@instagram", catalogo.Instagram);
                update.Parameters.AddWithValue("@whatsapp", catalogo.Whatsapp);
                update.Parameters.AddWithValue("@estoque", catalogo.Estoque_Ideal);
                update.Parameters.AddWithValue("@nome_preco", catalogo.Nome_Preco);
                update.Parameters.AddWithValue("@venda", catalogo.Preco_Venda);
                update.Parameters.AddWithValue("@linha", catalogo.Linha);
                update.Parameters.AddWithValue("@id_catalogo", catalogo.ID_Catalogo);
                update.Parameters.AddWithValue("@id_capsula", catalogo.ID_Capsula);

                update.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Produto catalogado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        #region Medias
        public int TrazerQuantidadeVendidaPorPeriodo(string produto, string data_inicial, string data_final)
        {
            string comando = "SELECT (SELECT Nome_Produto FROM tbl_Produtos WHERE tbl_Produtos.ID_Produto = tbl_ProdutosVendidos.ID_Produto) AS Produto, SUM (Quantidade) FROM tbl_ProdutosVendidos INNER JOIN tbl_Vendas ON tbl_Vendas.ID_Venda = tbl_ProdutosVendidos.ID_Venda WHERE ID_Produto = (SELECT ID_Produto FROM tbl_Produtos WHERE Nome_Produto = @produto) AND tbl_Vendas.Data_Venda BETWEEN @data_inicial AND @data_final GROUP BY ID_Produto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@produto", produto);
            select.Parameters.AddWithValue("@data_inicial", data_inicial);
            select.Parameters.AddWithValue("@data_final", data_final);
            int quantidade = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();
            return quantidade;
        }
        public int TrazerQuantidadeDeDiasZerados(string produto, string data_inicial, string data_final)
        {
            string comando = "";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@produto", produto);
            int dias = Convert.ToInt32(select.ExecuteScalar());
            conexao.Desconectar();
            return dias;
        }
        #endregion

        #endregion

        #region Métodos do Formulário Atividades

        #region Processos

        public List<Processo> ListaDeProcessos()
        {
            List<Processo> processo = new List<Processo>();

            string comando = "SELECT ID_Processo, Descricao, (SELECT COUNT(*) FROM tbl_ProcessosAtividades WHERE ID_Processo = tbl_Processos.ID_Processo) AS Atividades FROM tbl_Processos";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        processo.Add(new Processo
                        {
                            ID_Processo = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Atividades = Convert.ToInt32(leitor[2])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return processo;
        }

        public void ApagarProcesso(int id_processo)
        {
            string comando = "DELETE FROM tbl_Processos WHERE ID_Processo = @id_processo";
            string comando2 = "DELETE FROM tbl_ProcessosAtividades WHERE ID_Processo = @id_processo";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_processo", id_processo);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand(comando2, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_processo", id_processo);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public List<string> PreencherComboAtividades()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Descricao FROM tbl_Atividades WHERE (SELECT COUNT(*) FROM tbl_ProcessosAtividades WHERE ID_Atividade = tbl_Atividades.ID_Atividade) = 0";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public bool VerificarNomeDoProcesso(string processo)
        {
            string comando = "SELECT IIF(COUNT(*) > 0, 1, 0) FROM tbl_Processos WHERE Descricao = @processo";
            bool verificar;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@processo", processo);
                verificar = Convert.ToBoolean(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return verificar;
        }

        public void CadastrarProcesso(string processo, List<Atividade> atividades)
        {
            string comando = "INSERT INTO tbl_Processos (Descricao) VALUES (@processo)";
            string comando2 = "INSERT INTO tbl_ProcessosAtividades (ID_Processo, ID_Atividade, Ordem) VALUES ((SELECT TOP(1) ID_Processo FROM tbl_Processos ORDER BY ID_Processo DESC), (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), @ordem)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@processo", processo);
                insert.ExecuteNonQuery();
            }

            foreach (Atividade atividade in atividades)
            {
                using (SqlCommand insert = new SqlCommand(comando2, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@atividade", atividade.Descricao);
                    insert.Parameters.AddWithValue("@ordem", atividade.Ordem);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Processo cadastrado.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void AlterarDescricaoDoProcesso(int id_processo, string processo)
        {
            string comando = "UPDATE tbl_Processos SET Descricao = @processo WHERE ID_Processo = @id_processo";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_processo", id_processo);
                update.Parameters.AddWithValue("@processo", processo);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarAtividadeDoProcesso(int id_processo, string atividade)
        {
            string comando = "DELETE FROM tbl_ProcessosAtividades WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade) AND ID_Processo = @id_processo";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_processo", id_processo);
                delete.Parameters.AddWithValue("@atividade", atividade);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AdicionarAtividadeAoProcesso(Atividade atividade)
        {
            string comando = "INSERT INTO tbl_ProcessosAtividades (ID_Processo, ID_Atividade, Ordem) VALUES (@id_processo, (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), @ordem)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_processo", atividade.ID_Processo);
                insert.Parameters.AddWithValue("@atividade", atividade.Descricao);
                insert.Parameters.AddWithValue("@ordem", atividade.Ordem);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AlterarOrdemDaAtividadeNoProcesso(Atividade atividade)
        {
            string comando = "UPDATE tbl_ProcessosAtividades SET Ordem = @ordem WHERE ID_Processo = @id_processo AND ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade)";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_processo", atividade.ID_Processo);
                update.Parameters.AddWithValue("@atividade", atividade.Descricao);
                update.Parameters.AddWithValue("@ordem", atividade.Ordem);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public List<Atividade> ListaDeAtividadesDoProcesso(int id_processo)
        {
            List<Atividade> atividades = new List<Atividade>();

            string comando = "SELECT ID_Processo, (SELECT Descricao FROM tbl_Atividades WHERE ID_Atividade = tbl_ProcessosAtividades.ID_Atividade) AS Atividade, Ordem FROM tbl_ProcessosAtividades WHERE ID_Processo = @id_processo ORDER BY Ordem";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_processo", id_processo);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        atividades.Add(new Atividade
                        {
                            ID_Processo = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Ordem = Convert.ToInt32(leitor[2])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return atividades;
        }

        public void ReordenarAtividadesDoProcesso(int id_processo)
        {
            List<int> atividades = new List<int>();

            string comando = "SELECT ID_Atividade FROM tbl_ProcessosAtividades WHERE ID_Processo = @id_processo ORDER BY Ordem";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_processo", id_processo);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        atividades.Add(Convert.ToInt32(leitor["ID_Atividade"]));
                    }
                }
            }
            conexao.Desconectar();

            int ordem = 1;
            string cmd = "UPDATE tbl_ProcessosAtividades SET Ordem = @ordem WHERE ID_Atividade = @id_atividade AND ID_Processo = @id_processo";

            foreach (int id_atividade in atividades)
            {
                using (SqlCommand update = new SqlCommand(cmd, conexao.Conectar()))
                {
                    update.Parameters.AddWithValue("@id_processo", id_processo);
                    update.Parameters.AddWithValue("@id_atividade", id_atividade);
                    update.Parameters.AddWithValue("@ordem", ordem);
                    update.ExecuteNonQuery();
                }

                ordem++;
            }
        }

        #endregion

        #region Atividades

        public void PreencherDataGridAtividades(DataGridView dataGrid, BindingSource bindingSource)
        {
            string comando = "SELECT IIF(Rotina = 1, (SELECT Imagem FROM tbl_Imagens WHERE Descricao = 'ROTINA'), (SELECT Imagem FROM tbl_Imagens WHERE Descricao = 'ATIVIDADE')) AS Imagem, Descricao, (SELECT Nome_Setor FROM tbl_Setores WHERE tbl_Setores.ID_Setor = tbl_Atividades.ID_Setor) AS Setor, Categoria, Tempo_Execucao AS Tempo FROM tbl_Atividades  ORDER BY Descricao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            bindingSource.DataSource = dataSet;
            bindingSource.DataMember = dataSet.Tables[0].TableName;
            dataGrid.DataSource = bindingSource;
            conexao.Desconectar();
        }

        public int TrazerIdDaAtividade(string atividade)
        {
            int id;
            string comando = "SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@atividade", atividade);
                id = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return id;
        }

        public void ApagarAtividade(int id_atividade)
        {

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_Correcoes WHERE ID_Atividade = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_Procedimentos WHERE ID_Atividade = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_AtividadesStatus WHERE (SELECT ID_Atividade FROM tbl_AtividadesLancadas WHERE ID_AtividadeLancada = (SELECT ID_AtividadeLancada FROM tbl_AtividadesDelegadas WHERE ID_AtividadeDelegada = tbl_AtividadesStatus.ID_AtividadeDelegada)) = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_AtividadesDelegadas WHERE (SELECT ID_Atividade FROM tbl_AtividadesLancadas WHERE ID_AtividadeLancada = tbl_AtividadesDelegadas.ID_AtividadeLancada) = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_AtividadesLancadas WHERE ID_Atividade = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_AtividadesEquipamentos WHERE ID_Atividade = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_Indicadores WHERE ID_Atividade = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_AtividadesIndicadores WHERE (SELECT ID_Atividade FROM tbl_AtividadesLancadas WHERE ID_AtividadeLancada = tbl_AtividadesIndicadores.ID_AtividadeLancada) = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_Atividades WHERE ID_Atividade = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade);
                delete.ExecuteNonQuery();
            }



            conexao.Desconectar();

            MessageBox.Show("A atividade foi excluída!", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }


        #endregion

        #region Atividades em andamento

        public List<Colaborador> ListaDeColaboradoresDoSetor()
        {
            string comando = "[ListaDeColaboradoresComFoto]";

            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            List<Colaborador> Colaboradores = new List<Colaborador>();

            while (leitor.Read())
            {
                Colaboradores.Add(new Colaborador
                {
                    ID_Colaborador = Convert.ToInt32(leitor[0]),
                    Nome_Colaborador = leitor[1].ToString(),
                    Matricula = leitor[2].ToString(),
                    Foto = (byte[])leitor[3],
                    Status = leitor[4].ToString(),
                    Cargo = leitor[5].ToString(),
                    Setor = leitor[6].ToString()
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return Colaboradores;
        }

        #endregion

        public void PreencherDataGridAtividadesEmAndamento(DataGridView dataGrid, BindingSource bindingSource)
        {
            string comando = "[ListaDeAtividades]";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            bindingSource.DataSource = dataSet;
            bindingSource.DataMember = dataSet.Tables[0].TableName;
            dataGrid.DataSource = bindingSource;
            conexao.Desconectar();
        }

        public List<AtividadeStatus> ListaDeStatusDaAtividade(int id_atividade_lancada)
        {
            List<AtividadeStatus> lancamentos = new List<AtividadeStatus>();
            string comando = "SELECT ID_AtividadeStatus, ISNULL(FORMAT(Inicio, 'dd/MM/yyyy HH:mm'), ' - - - ') AS Inicio, ISNULL(FORMAT(Termino, 'dd/MM/yyyy HH:mm'), ' - - - ') AS Termino, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_AtividadesStatus.ID_Colaborador) AS Responsavel, Status, FORMAT(Lancamento, 'dd/MM/yyyy HH:mm') AS Lancamento, Lancamento AS Ordem FROM tbl_AtividadesStatus WHERE (SELECT ID_AtividadeLancada FROM tbl_AtividadesDelegadas WHERE ID_AtividadeDelegada = tbl_AtividadesStatus.ID_AtividadeDelegada) = @id ORDER BY Ordem, ID_AtividadeStatus";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_atividade_lancada);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lancamentos.Add(new AtividadeStatus
                        {
                            ID_AtividadeLancada = Convert.ToInt32(leitor[0]),
                            Inicio = leitor[1].ToString(),
                            Termino = leitor[2].ToString(),
                            Responsavel = leitor[3].ToString(),
                            Status = leitor[4].ToString(),
                            Lancamento = leitor[5].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return lancamentos;
        }

        #region Status

        public string StatusDaAtividade(int id_atividade_lancada)
        {
            string status;
            string comando = "SELECT CASE WHEN (SELECT COUNT(Status) FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = tbl_AtividadesLancadas.ID_AtividadeLancada) = 0 THEN 'Em aberto' WHEN (SELECT COUNT(DISTINCT Status) FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = tbl_AtividadesLancadas.ID_AtividadeLancada) = 1 THEN (SELECT TOP (1) Status FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = tbl_AtividadesLancadas.ID_AtividadeLancada) WHEN (SELECT COUNT(Status) FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = tbl_AtividadesLancadas.ID_AtividadeLancada) > 1 THEN CASE WHEN (SELECT COUNT(Status) FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = tbl_AtividadesLancadas.ID_AtividadeLancada AND Status = 'Cancelado') >= 1 THEN 'Cancelado' WHEN (SELECT COUNT(Status) FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = tbl_AtividadesLancadas.ID_AtividadeLancada AND Status = 'Em andamento') >= 1 THEN 'Em andamento' WHEN (SELECT COUNT(Status) FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = tbl_AtividadesLancadas.ID_AtividadeLancada AND Status = 'Em andamento') >= 1 THEN 'Pausado' WHEN (SELECT COUNT(Status) FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = tbl_AtividadesLancadas.ID_AtividadeLancada AND Status = 'Em andamento') >= 1	THEN 'Concluído' END END AS Status FROM tbl_AtividadesLancadas WHERE ID_AtividadeLancada = @id";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_atividade_lancada);
                status = select.ExecuteScalar().ToString();
            }

            conexao.Desconectar();

            return status;
        }

        public int IdDaAtividadeDelegada(int id_atividade_lancada)
        {
            int id;
            string comando = "SELECT ID_AtividadeDelegada FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = @id";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_atividade_lancada);
                id = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return id;
        }

        private void AlterarStatusDaAtividade(string status, int id)
        {
            string comando = "UPDATE tbl_AtividadesDelegadas SET Status = @status WHERE ID_AtividadeDelegada = @id";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@status", status);
                update.Parameters.AddWithValue("@id", id);

                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarAtividadeLancada(int id_atividade_lancada)
        {
            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_AtividadesStatus WHERE (SELECT ID_AtividadeLancada FROM tbl_AtividadesDelegadas WHERE ID_AtividadeDelegada = tbl_AtividadesStatus.ID_AtividadeDelegada) = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade_lancada);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade_lancada);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_AtividadesLancadas WHERE ID_AtividadeLancada = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade_lancada);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("A atividade foi excluída!", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarAtividadeDelegada(int id_atividade_delegada)
        {
            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_AtividadesStatus WHERE ID_AtividadeDelegada = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade_delegada);
                delete.ExecuteNonQuery();
            }

            using (SqlCommand delete = new SqlCommand("DELETE FROM tbl_AtividadesDelegadas WHERE ID_AtividadeDelegada = @id", conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_atividade_delegada);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("A atividade foi excluída!", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void IniciarAtividade(int id_atividade_delegada)
        {
            string comando = "INSERT INTO tbl_AtividadesStatus (ID_AtividadeDelegada, ID_Colaborador, Inicio, Status, Lancamento) VALUES (@id, (SELECT ID_Colaborador FROM tbl_AtividadesDelegadas WHERE ID_AtividadeDelegada = @id), GETDATE(), 'Em andamento', GETDATE())";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id", id_atividade_delegada);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            AlterarStatusDaAtividade("Em andamento", id_atividade_delegada);
        }

        public void PausarAtividade(int id_atividade_delegada)
        {
            string comando = "UPDATE tbl_AtividadesStatus SET Termino = GETDATE() WHERE ID_AtividadeDelegada = @id AND Status = 'Em andamento'";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", id_atividade_delegada);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string cmd = "INSERT INTO tbl_AtividadesStatus (ID_AtividadeDelegada, ID_Colaborador, Status, Lancamento) VALUES (@id, (SELECT ID_Colaborador FROM tbl_AtividadesDelegadas WHERE ID_AtividadeDelegada = @id), 'Pausado', GETDATE())";
            using (SqlCommand insert = new SqlCommand(cmd, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id", id_atividade_delegada);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            AlterarStatusDaAtividade("Pausado", id_atividade_delegada);
        }

        public void CancelarAtividade(int id_atividade_delegada)
        {
            string comando = "INSERT INTO tbl_AtividadesStatus (ID_AtividadeDelegada, ID_Colaborador, Status, Lancamento) VALUES (@id, (SELECT ID_Colaborador FROM tbl_AtividadesDelegadas WHERE ID_AtividadeDelegada = @id), 'Cancelado', GETDATE())";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id", id_atividade_delegada);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            AlterarStatusDaAtividade("Cancelado", id_atividade_delegada);
        }

        public void ConcluirAtividade(int id_atividade_delegada)
        {
            string comando = "UPDATE tbl_AtividadesStatus SET Termino = GETDATE() WHERE ID_AtividadeDelegada = @id AND Status = 'Em andamento'";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", id_atividade_delegada);
                update.ExecuteNonQuery();
            }

            string cmd = "INSERT INTO tbl_AtividadesStatus (ID_AtividadeDelegada, ID_Colaborador, Status, Lancamento) VALUES (@id, (SELECT ID_Colaborador FROM tbl_AtividadesDelegadas WHERE ID_AtividadeDelegada = @id), 'Concluído', GETDATE())";
            using (SqlCommand insert = new SqlCommand(cmd, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id", id_atividade_delegada);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            AlterarStatusDaAtividade("Concluído", id_atividade_delegada);
        }

        public string TrazerSetorPelaAtividade(string atividade)
        {
            string setor = string.Empty;
            string comando = "SELECT Nome_Setor FROM tbl_Setores WHERE ID_Setor = (SELECT ID_Setor FROM tbl_Atividades WHERE Descricao = @atividade)";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@atividade", atividade);
                setor = select.ExecuteScalar().ToString();
            }

            conexao.Desconectar();

            return setor;
        }

        public bool VerificarSeAtividadeERotina(string atividade)
        {
            bool verificar;

            string comando = "SELECT Rotina FROM tbl_Atividades WHERE Descricao = @atividade";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@atividade", atividade);

            verificar = Convert.ToBoolean(select.ExecuteScalar());

            conexao.Desconectar();

            return verificar;
        }

        public void DelegarAtividade(AtividadeLancada lancada)
        {
            string comando = "INSERT INTO tbl_AtividadesDelegadas (ID_AtividadeLancada, ID_Colaborador, Status, Ordem) VALUES (@id, @id_colaborador, 'Pendente', @ordem)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_colaborador", lancada.ID_Colaborador);
                insert.Parameters.AddWithValue("@id", lancada.ID_AtividadeLancada);
                insert.Parameters.AddWithValue("@ordem", OrdemDaProximaAtividade(lancada.ID_Colaborador));
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string cmd = "INSERT INTO tbl_AtividadesStatus (ID_AtividadeDelegada, ID_Colaborador, Status, Lancamento) VALUES ((SELECT TOP(1) ID_AtividadeDelegada FROM tbl_AtividadesDelegadas ORDER BY ID_AtividadeDelegada DESC), @id_colaborador, 'Pendente', GETDATE())";

            using (SqlCommand insert = new SqlCommand(cmd, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_colaborador", lancada.ID_Colaborador);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public List<string> ListaDeColaboradoresEmpenhados(int id_atividade_lancada)
        {
            List<string> Colaboradores = new List<string>();
            string comando = "SELECT DISTINCT (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_AtividadesDelegadas.ID_Colaborador) AS Colaborador FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = @id";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_atividade_lancada);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Colaboradores.Add(leitor[0].ToString());
                    }
                }
            }

            conexao.Desconectar();

            return Colaboradores;
        }

        public int QuantidadeDeColaboradoresEmpenhados(int id_atividade_lancada)
        {
            int quantidade;
            string comando = "SELECT COUNT(*) FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = @id";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_atividade_lancada);
                quantidade = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return quantidade;
        }

        public List<AtividadeDelegada> ListaDeAtividadesDelegadas(int id_atividade_lancada)
        {
            List<AtividadeDelegada> atividades_delegadas = new List<AtividadeDelegada>();

            string comando = "SELECT ID_AtividadeDelegada, (SELECT Nome_colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_AtividadesDelegadas.ID_Colaborador) AS Colaborador, Status FROM tbl_AtividadesDelegadas WHERE ID_AtividadeLancada = @id";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_atividade_lancada);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        atividades_delegadas.Add(new AtividadeDelegada
                        {
                            ID_AtividadeDelegada = Convert.ToInt32(leitor[0]),
                            Responsavel = leitor[1].ToString(),
                            Status = leitor[2].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return atividades_delegadas;
        }

        #endregion

        #region Cadastrar e Editar atividade

        public List<string> PreencherComboCategoriasDeAtividades()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT DISTINCT Categoria FROM tbl_Atividades";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<string> preencherComboSetores()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Nome_Setor FROM tbl_Setores ORDER BY Nome_Setor ASC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());

            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();

            conexao.Desconectar();

            return lista;
        }

        public bool VerificarNomeDaAtividade(string atividade)
        {
            string comando = "SELECT IIF(COUNT(*) > 0, 1, 0) FROM tbl_Atividades WHERE Descricao = @atividade";
            bool verificar;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@atividade", atividade);
                verificar = Convert.ToBoolean(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return verificar;
        }

        public List<string> ListaDeEquipamentosParaAtividade()
        {
            List<string> Ferramentas = new List<string>();
            
            string comando = "SELECT Descricao FROM tbl_Equipamentos ORDER BY Descricao";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        string ferramenta = leitor[0].ToString();
                        Ferramentas.Add(ferramenta);
                    }
                }
            }

            conexao.Desconectar();

            return Ferramentas;
        }

        public void CadastrarAtividade(Atividade atividade, List<Procedimento> procedimentos, List<string> correcoes, List<string> equipamentos)
        {
            string nome = atividade.Descricao;
            string setor = atividade.Setor;
            string cargo = atividade.Cargo;
            int intervalo = atividade.Intervalo;
            int tempo = atividade.Tempo;
            int prioridade = atividade.Prioridade;
            string resultado = atividade.Resultado;
            string categoria = atividade.Categoria;
            bool rotina = atividade.Rotina;

            string comando = "INSERT INTO tbl_Atividades (Descricao, Tempo_Execucao, ID_Setor, Prioridade, Resultado, Categoria, Rotina, ID_Cargo, Intervalo) VALUES (@nome, @tempo, (SELECT ID_Setor FROM tbl_Setores WHERE Nome_Setor = @setor), @prioridade, @resultado, @categoria, @rotina, (SELECT ID_Cargo FROM tbl_Cargos WHERE Cargo = @cargo), IIF(@intervalo = 0, NULL, @intervalo))";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@nome", nome);
                insert.Parameters.AddWithValue("@tempo", tempo);
                insert.Parameters.AddWithValue("@setor", setor);
                insert.Parameters.AddWithValue("@cargo", cargo);
                insert.Parameters.AddWithValue("@prioridade", prioridade);
                insert.Parameters.AddWithValue("@resultado", resultado);
                insert.Parameters.AddWithValue("@categoria", categoria);
                insert.Parameters.AddWithValue("@rotina", rotina);
                insert.Parameters.AddWithValue("@intervalo", intervalo);

                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();



            string comando3 = "INSERT INTO tbl_Procedimentos (Descricao, ID_Atividade, Ordem, Resumo) VALUES (@descricao, (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), @ordem, @resumo)";

            foreach (Procedimento procedimento in procedimentos)
            {
                string descricao = procedimento.Descricao;
                string resumo = procedimento.Resumo;
                int ordem = procedimento.Ordem;

                using (SqlCommand insert = new SqlCommand(comando3, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@descricao", descricao);
                    insert.Parameters.AddWithValue("@ordem", ordem);
                    insert.Parameters.AddWithValue("@atividade", nome);
                    insert.Parameters.AddWithValue("@resumo", resumo);
                    insert.ExecuteNonQuery();
                }

            }
            conexao.Desconectar();

            string comando4 = "INSERT INTO tbl_Correcoes (ID_Atividade, Correcao) VALUES ((SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), @correcao)";

            foreach (string correcao in correcoes)
            {
                using (SqlCommand insert = new SqlCommand(comando4, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@correcao", correcao);
                    insert.Parameters.AddWithValue("@atividade", nome);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            string comando5 = "INSERT INTO tbl_AtividadesEquipamentos (ID_Atividade, ID_Equipamento) VALUES ((SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), (SELECT ID_Equipamento FROM tbl_Equipamentos WHERE Descricao = @equipamento))";

            foreach (string equipamento in equipamentos)
            {
                using (SqlCommand insert = new SqlCommand(comando5, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@equipamento", equipamento);
                    insert.Parameters.AddWithValue("@atividade", nome);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Atividade cadastrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public Atividade TrazerInformacoesDaAtividade(string atividade)
        {
            Atividade Atividade = new Atividade();
            string comando = "SELECT ID_Atividade, Descricao, IIF(ID_Setor IS NULL, 'Todos', (SELECT Nome_Setor FROM tbl_Setores WHERE ID_Setor = tbl_Atividades.ID_Setor)) AS Setor, Prioridade, Resultado, Categoria, Rotina, IIF(ID_Cargo IS NULL, 'Todos', (SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = tbl_Atividades.ID_Cargo)) AS Cargo, IIF(Rotina = 1, Intervalo, 0) AS Intervalo FROM tbl_Atividades WHERE Descricao = @atividade";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@atividade", atividade);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Atividade.ID_Atividade = Convert.ToInt32(leitor[0]);
                        Atividade.Descricao = leitor[1].ToString();
                        Atividade.Setor = leitor[2].ToString();
                        Atividade.Prioridade = Convert.ToInt32(leitor[3]);
                        Atividade.Resultado = leitor[4].ToString();
                        Atividade.Categoria = leitor[5].ToString();
                        Atividade.Rotina = Convert.ToBoolean(leitor[6]);
                        Atividade.Cargo = leitor[7].ToString();
                        if (leitor[8] != DBNull.Value)
                            Atividade.Intervalo = Convert.ToInt32(leitor[8]);
                    }
                }
            }

            conexao.Desconectar();

            return Atividade;
        }

        public List<Procedimento> TrazerProcedimentosDaAtividade(string atividade)
        {
            List<Procedimento> procedimentos = new List<Procedimento>();

            string comando = "SELECT ID_Procedimento, Ordem, Descricao, Resumo FROM tbl_Procedimentos WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade) ORDER BY Ordem";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@atividade", atividade);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        procedimentos.Add(new Procedimento
                        {
                            ID_Procedimento = Convert.ToInt32(leitor[0]),
                            Ordem = Convert.ToInt32(leitor[1]),
                            Descricao = leitor[2].ToString(),
                            Resumo = leitor[3].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return procedimentos;
        }

        public List<string> ListaDeEquipamentosDaAtividade(string atividade)
        {
            List<string> Ferramentas = new List<string>();

            string comando = "SELECT (SELECT Descricao FROM tbl_Equipamentos WHERE ID_Equipamento = tbl_AtividadesEquipamentos.ID_Equipamento) AS Equipamento FROM tbl_AtividadesEquipamentos WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade)";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@atividade", atividade);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        string ferramenta = leitor[0].ToString();
                        Ferramentas.Add(ferramenta);
                    }
                }
            }

            conexao.Desconectar();

            return Ferramentas;
        }

        public List<Acao_Corretiva> ListaDeAcoesCorretivasDaAtividade(string atividade)
        {
            List<Acao_Corretiva> correcoes = new List<Acao_Corretiva>();

            string comando = "SELECT ID_Correcao, Correcao FROM tbl_Correcoes WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade)";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@atividade", atividade);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        correcoes.Add(new Acao_Corretiva
                        {
                            ID_Correcao = Convert.ToInt32(leitor[0]),
                            Correcao = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return correcoes;
        }

        public void CadastrarAcaoCorretiva(string correcao, string atividade)
        {
            string comando = "INSERT INTO tbl_Correcoes (ID_Atividade, Correcao) VALUES ((SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), @correcao)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@correcao", correcao);
                insert.Parameters.AddWithValue("@atividade", atividade);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarAcaoCorretiva(string correcao, string atividade)
        {
            string comando = "DELETE FROM tbl_Correcoes WHERE Correcao = @correcao AND ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade)";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@correcao", correcao);
                delete.Parameters.AddWithValue("@atividade", atividade);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void CadastrarProcedimento(Procedimento procedimento, string atividade)
        {
            string comando = "INSERT INTO tbl_Procedimentos (Descricao, ID_Atividade, Ordem, Resumo) VALUES (@descricao, (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), @ordem, @resumo)";

            string descricao = procedimento.Descricao;
            string resumo = procedimento.Resumo;
            int ordem = procedimento.Ordem;

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", descricao);
                insert.Parameters.AddWithValue("@ordem", ordem);
                insert.Parameters.AddWithValue("@atividade", atividade);
                insert.Parameters.AddWithValue("@resumo", resumo);
                insert.ExecuteNonQuery();
            }


            conexao.Desconectar();
        }

        public void ApagarProcedimento(int id_procedimento)
        {
            string comando = "DELETE FROM tbl_Procedimentos WHERE ID_Procedimento = @id_procedimento";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_procedimento", id_procedimento);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AlterarOrdemDoProcedimento(int id_procedimento, int nova_ordem)
        {
            string comando = "UPDATE tbl_Procedimentos SET Ordem = @nova_ordem WHERE ID_Procedimento = @id_procedimento";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_procedimento", id_procedimento);
                update.Parameters.AddWithValue("@nova_ordem", nova_ordem);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void EditarAtividade(Atividade atividade)
        {
            int id_atividade = atividade.ID_Atividade;
            string descricao = atividade.Descricao;
            string setor = atividade.Setor;
            string cargo = atividade.Cargo;
            int intervalo = atividade.Intervalo;
            int tempo = atividade.Tempo;
            DateTime proxima = atividade.Proxima_Execucao;
            int prioridade = atividade.Prioridade;
            string resultado = atividade.Resultado;
            string categoria = atividade.Categoria;
            bool rotina = atividade.Rotina;

            string comando = "UPDATE tbl_Atividades SET Descricao = @descricao, Tempo_Execucao = 0, ID_Setor = (SELECT ID_Setor FROM tbl_Setores WHERE Nome_Setor = @setor), Prioridade = @prioridade, Resultado = @resultado, Categoria = @categoria, Rotina = @rotina, ID_Cargo = (SELECT ID_Cargo FROM tbl_Cargos WHERE Cargo = @cargo), Intervalo = IIF(@intervalo = 0, NULL, @intervalo) WHERE ID_Atividade = @id_atividade";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_atividade", id_atividade);
                update.Parameters.AddWithValue("@descricao", descricao);
                update.Parameters.AddWithValue("@tempo", tempo);
                update.Parameters.AddWithValue("@setor", setor);
                update.Parameters.AddWithValue("@cargo", cargo);
                update.Parameters.AddWithValue("@prioridade", prioridade);
                update.Parameters.AddWithValue("@resultado", resultado);
                update.Parameters.AddWithValue("@categoria", categoria);
                update.Parameters.AddWithValue("@rotina", rotina);
                update.Parameters.AddWithValue("@intervalo", intervalo);

                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void EditarProcedimento(Procedimento procedimento)
        {
            string comando = "UPDATE tbl_Procedimentos SET Descricao = @descricao, Resumo = @resumo WHERE ID_Procedimento = @id_procedimento";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@descricao", procedimento.Descricao);
                update.Parameters.AddWithValue("@id_procedimento", procedimento.ID_Procedimento);
                update.Parameters.AddWithValue("@resumo", procedimento.Resumo);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AdicionarEquipamentoDaAtividade(string atividade, string equipamento)
        {
            string comando = "INSERT INTO tbl_AtividadesEquipamentos (ID_Atividade, ID_Equipamento) VALUES ((SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), (SELECT ID_Equipamento FROM tbl_Equipamentos WHERE Descricao = @equipamento))";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@equipamento", equipamento);
                insert.Parameters.AddWithValue("@atividade", atividade);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarEquipamentoDaAtividade(string atividade, string equipamento)
        {
            string comando = "DELETE FROM tbl_AtividadesEquipamentos WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade) AND ID_Equipamento = (SELECT ID_Equipamento FROM tbl_Equipamentos WHERE Descricao = @equipamento)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@equipamento", equipamento);
                insert.Parameters.AddWithValue("@atividade", atividade);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        #endregion

        #region Delegar atividades

        public void LancarAtividade(AtividadeLancada lancada)
        {
            string comando = "INSERT INTO tbl_AtividadesLancadas (ID_Atividade, ID_Colaborador, Data_Registro, ID_Responsavel, Delegavel) VALUES ((SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 1)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@atividade", lancada.Descricao);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            #region Tempo

            //Lançar atividades cronometradas

            //insert.Parameters.AddWithValue("@previsao_inicio", realizada.Previsao_Inicio);
            //insert.Parameters.AddWithValue("@previsao_termino", realizada.Previsao_Termino);
            //insert.Parameters.AddWithValue("@tempo", realizada.Tempo);

            #endregion

            conexao.Desconectar();

            MessageBox.Show("Atividade delegada.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void DelegarAtividadeAoLancar(AtividadeDelegada delegada)
        {
            string comando = "INSERT INTO tbl_AtividadesDelegadas (ID_AtividadeLancada, ID_Colaborador, Status, Ordem) VALUES ((SELECT TOP(1) ID_AtividadeLancada FROM tbl_AtividadesLancadas ORDER BY ID_AtividadeLancada DESC), @id_colaborador, 'Pendente', @ordem)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_colaborador", delegada.ID_Colaborador);
                insert.Parameters.AddWithValue("@ordem", OrdemDaProximaAtividade(delegada.ID_Colaborador));
                insert.ExecuteNonQuery();
            }

            string cmd = "INSERT INTO tbl_AtividadesStatus (ID_AtividadeDelegada, ID_Colaborador, Status, Lancamento) VALUES ((SELECT TOP(1) ID_AtividadeDelegada FROM tbl_AtividadesDelegadas ORDER BY ID_AtividadeDelegada DESC), @id_colaborador, 'Pendente', GETDATE())";

            using (SqlCommand insert = new SqlCommand(cmd, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_colaborador", delegada.ID_Colaborador);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public int OrdemDaProximaAtividade(int id_colaborador)
        {
            string comando = "SELECT TOP(1) Ordem FROM tbl_AtividadesDelegadas WHERE Status <> 'Em andamento' AND Status <> 'Concluído' AND ID_Colaborador = @id_colaborador ORDER BY Ordem DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            int ordem;
            if (select.ExecuteScalar() == DBNull.Value) { ordem = 1; }
            else { ordem = Convert.ToInt32(select.ExecuteScalar()) + 1; }
            return ordem;
        }

        public List<Colaborador> ListaDeColaboradoresTaticos()
        {
            List<Colaborador> Colaboradores = new List<Colaborador>();

            string comando = "SELECT ID_Colaborador, Nome_Colaborador + ' (' + Matricula + ')' AS Colaborador FROM tbl_Colaboradores WHERE ((SELECT Planejamento FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo) = 'Tático' OR (SELECT Planejamento FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo) = 'Estratégico') AND Ativacao = 1 ORDER BY Colaborador";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                //select.Parameters.AddWithValue("@matricula", Program.matricula);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Colaboradores.Add(new Colaborador
                        {
                            ID_Colaborador = Convert.ToInt32(leitor[0]),
                            Nome_Colaborador = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();
            return Colaboradores;
        }

        public List<string> PreencherComboAtividadesPeloColaboradorTatico(int id_colaborador)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Descricao FROM tbl_Atividades WHERE ID_Setor = (SELECT ID_Setor FROM tbl_Colaboradores WHERE ID_Colaborador = @id_colaborador) OR ID_Setor IS NULL ORDER BY Descricao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<string> PreencherComboAtividadesPeloColaboradorTatico()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Descricao FROM tbl_Atividades WHERE ID_Setor = (SELECT ID_Setor FROM tbl_Colaboradores WHERE Matricula = @matricula) OR ID_Setor IS NULL ORDER BY Descricao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", Program.matricula);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public void RegistrarAtividadeDelegavel(AtividadeLancada Atividade)
        {
            string atividade = Atividade.Descricao;
            int id_colaborador = Atividade.ID_Colaborador;
            bool delegavel = Atividade.Delegavel;

            string comando = "INSERT INTO tbl_AtividadesLancadas (ID_Atividade, ID_Colaborador, Data_Registro, ID_Responsavel, Delegavel) VALUES ((SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), @id_colaborador, @delegavel)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@atividade", atividade);
                insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.Parameters.AddWithValue("@delegavel", delegavel);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Atividade registrada!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void RegistrarAtividadeEmAberto(string atividade)
        {
            string comando = "INSERT INTO tbl_AtividadesLancadas (ID_Atividade, ID_Colaborador, Data_Registro, ID_Responsavel, Delegavel) VALUES ((SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 1)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@atividade", atividade);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Atividade registrada!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void RegistrarAtividadeDelegavelAutomaticamente(AtividadeRealizada Atividade)
        {

        }

        public bool VerificarSeColaboradorRecebeuTreinamentoParaAtividade(int id_colaborador, string atividade)
        {
            bool verificar = false;

            string comando = "SELECT COUNT(*) FROM tbl_TreinamentosColaboradores WHERE ID_Colaborador = @id_colaborador AND (SELECT COUNT(*) FROM tbl_TreinamentosMaterias WHERE ID_Materia = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade) AND Tipo = 'PROCEDIMENTOS') > 0 AND Status = 'Aprovado'";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                select.Parameters.AddWithValue("@atividade", atividade);

                int treinamentos = Convert.ToInt32(select.ExecuteScalar());

                if (treinamentos > 0) { verificar = true; }
                else { verificar = false; }
            }

            conexao.Desconectar();

            return verificar;
        }

        #endregion

        #region Apetrechos

        public List<string> PreencherComboEquipamentos()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Descricao FROM tbl_Equipamentos ORDER BY Descricao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<Apetrecho> ListaDeApetrechos()
        {
            List<Apetrecho> Apetrechos = new List<Apetrecho>();
            string comando = "SELECT ID_Apetrecho, Apetrecho, ID_Colaborador, Estado_Conservacao FROM tbl_Apetrechos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                int id_apetrecho = Convert.ToInt32(leitor[0]);
                string apetrecho = leitor[1].ToString();
                int id_colaborador;
                if (leitor[2] == DBNull.Value) { id_colaborador = 0; }
                else if (leitor[2].ToString() == string.Empty) { id_colaborador = 0; }
                else { id_colaborador = Convert.ToInt32(leitor[2]); }
                string conservacao = leitor[3].ToString();
                string status;
                int ordem;

                if (id_colaborador != 0)
                {
                    status = "Em uso";
                    ordem = 2;
                }
                else
                {
                    if (conservacao == "Danificado")
                    {
                        status = "Danificado";
                        ordem = 3;
                    }
                    else
                    {
                        status = "Disponível";
                        ordem = 1;
                    }
                }

                Apetrechos.Add(new Apetrecho
                {
                    ID_Colaborador = id_colaborador,
                    ID_Apetrecho = id_apetrecho,
                    Nome_Apetrecho = apetrecho,
                    Status = status,
                    Ordem = ordem
                });
            }
            leitor.Close();
            conexao.Desconectar();

            Apetrechos = Apetrechos.OrderBy(x => x.Ordem).ToList();
            return Apetrechos;
        }

        public void CadastrarApetrecho(Apetrecho Apetrecho)
        {
            string comando = "INSERT INTO tbl_Apetrechos (Apetrecho, Estado_Conservacao, Data_Cadastro, Tipo, ID_Equipamento) VALUES (@apetrecho, 'Em condições', GETDATE(), @tipo, (SELECT ID_Equipamento FROM tbl_Equipamentos WHERE Descricao = @equipamento))";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@apetrecho", Apetrecho.Nome_Apetrecho);
            insert.Parameters.AddWithValue("@tipo", Apetrecho.Tipo);
            insert.Parameters.AddWithValue("@equipamento", Apetrecho.Equipamento);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Apetrecho cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public bool VerificarApetrecho(int id_apetrecho)
        {
            string comando = "SELECT ID_Colaborador FROM tbl_Apetrechos WHERE ID_Apetrecho = @id_apetrecho AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("matricula", Program.matricula);
            select.Parameters.AddWithValue("@id_apetrecho", id_apetrecho);
            bool verificar;

            if (select.ExecuteScalar() == null) { verificar = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { verificar = false; }
            else { verificar = true; }

            conexao.Desconectar();
            return verificar;
        }

        public void EquiparApetrecho(int id_apetrecho)
        {
            string comando = "UPDATE tbl_Apetrechos SET ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) WHERE ID_Apetrecho = @id_apetrecho";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@matricula", Program.matricula);
            update.Parameters.AddWithValue("@id_apetrecho", id_apetrecho);
            update.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Apetrecho equipado!\r\nDesequipe o material ao terminar a atividade.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void DesequiparApetrecho(int id_apetrecho, string estado_conservacao)
        {
            string comando = "UPDATE tbl_Apetrechos SET ID_Colaborador = NULL, Ultimo_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), Estado_Conservacao = @estado_conservacao WHERE ID_Apetrecho = @id_apetrecho";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@matricula", Program.matricula);
            update.Parameters.AddWithValue("@id_apetrecho", id_apetrecho);
            update.Parameters.AddWithValue("@estado_conservacao", estado_conservacao);
            update.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Apetrecho desequipado!\r\nO sistema registrou que você foi o último a utilizar o equipamento.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        #endregion

        public List<Colaborador> PreencherComboColaboradoresPorSetor()
        {
            List<Colaborador> lista = new List<Colaborador>();

            string comando = "SELECT ID_Colaborador, Nome_Colaborador + ' (' + Matricula + ')' AS Colaborador FROM tbl_Colaboradores WHERE (SELECT COUNT(*) FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = tbl_Colaboradores.ID_Colaborador AND (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_ReparticoesColaboradores.ID_Reparticao) = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT TOP(1) ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)))) > 0 AND Ativacao = 1";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", Program.matricula);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(new Colaborador
                        {
                            ID_Colaborador = Convert.ToInt32(leitor[0]),
                            Nome_Colaborador = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();
            return lista;
        }

        public List<string> PreencherComboAtividadesPeloSetor(string setor)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Descricao FROM tbl_Atividades WHERE ID_Setor = (SELECT ID_Setor FROM tbl_Setores WHERE Nome_Setor = @setor) OR ID_Setor IS NULL ORDER BY Descricao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@setor", setor);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<string> PreencherComboCargosPeloSetor(string setor)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Cargo FROM tbl_Cargos WHERE ID_Setor = (SELECT ID_Setor FROM tbl_Setores WHERE Nome_Setor = @setor)";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@setor", setor);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(Convert.ToString(leitor[0]));
                    }
                }
            }

            conexao.Desconectar();

            return lista;
        }

        public Atividade PrioridadeETempoDaAtividade(string atividade)
        {
            string comando = "SELECT Tempo_Execucao, Prioridade FROM tbl_Atividades WHERE Descricao = @atividade";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@atividade", atividade);
            Atividade Atividade = new Atividade();
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                Atividade.Tempo = Convert.ToInt32(leitor[0]);
                Atividade.Prioridade = Convert.ToInt32(leitor[1]);
            }
            leitor.Close();
            conexao.Desconectar();
            return Atividade;
        }

        public List<Colaborador> PreencherComboColaboradores()
        {
            List<Colaborador> lista = new List<Colaborador>();
            string comando = "SELECT ID_Colaborador, Nome_Colaborador + ' (' + Matricula + ')' AS Colaborador FROM tbl_Colaboradores WHERE Ativacao = 1";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", Program.matricula);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(new Colaborador
                        {
                            ID_Colaborador = Convert.ToInt32(leitor[0]),
                            Nome_Colaborador = leitor[1].ToString()
                        });
                    }
                }
            }
            conexao.Desconectar();

            return lista;
        }

        public bool VerificarSeHorarioDoColaboradorJaFoiDefinido(DateTime data, int id_colaborador)
        {
            bool verificar;
            string comando = "SELECT COUNT(*) FROM tbl_Expediente WHERE ID_Colaborador = @id_colaborador AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@data", data);
            int registros = Convert.ToInt32(select.ExecuteScalar());

            if (registros > 0) { verificar = true; } else { verificar = false; }

            conexao.Desconectar();

            return verificar;
        }

        public string VerificarSeColaboradorEstaDeLicenca(DateTime data, int id_colaborador)
        {
            string status;
            string comando = "SELECT Tipo FROM tbl_Licencas WHERE Inicio <= @data AND Termino >= @data AND ID_Colaborador = @id_colaborador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            if (select.ExecuteScalar() == null) { status = string.Empty; }
            else { status = select.ExecuteScalar().ToString(); }

            conexao.Desconectar();

            return status;
        }

        public List<DateTime> ListaDeExpedientesJaDefinidos()
        {
            List<DateTime> Datas = new List<DateTime>();
            string comando = "SELECT DISTINCT Data FROM tbl_Expediente WHERE Data >= CONVERT(DATE, GETDATE()) ORDER BY Data";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read()) { Datas.Add(Convert.ToDateTime(leitor[0])); }
                }
            }
            conexao.Desconectar();

            return Datas;
        }

        public void EditarHorariosAtuais(List<Horario> Horarios, List<DateTime> Datas, int id_colaborador)
        {
            CultureInfo cultura = new CultureInfo("pt-BR");
            DateTimeFormatInfo formato = cultura.DateTimeFormat;

            int ano = DateTime.Now.Year;
            int mes = DateTime.Now.Month;
            int dias_mes = DateTime.DaysInMonth(ano, mes);
            //int amanha = DateTime.Now.AddDays(1).Day;

            foreach (DateTime Data in Datas)
            {
                string dia_da_semana = formato.GetDayName(Data.DayOfWeek).PrimeiraLetraMaiuscula();
                SqlCommand insert;
                string comando;

                if (VerificarSeHorarioDoColaboradorJaFoiDefinido(Data, id_colaborador))
                {
                    comando = "UPDATE tbl_Expediente SET Status = @status, Previsao_Inicio = IIF(@servico_inicio = '', NULL, @servico_inicio), Previsao_Termino = IIF(@servico_termino = '', NULL, @servico_termino), Prev_Lanche_Inicio = IIF(@lanche_inicio = '', NULL, @lanche_inicio), Prev_Lanche_Termino = IIF(@lanche_termino = '', NULL, @lanche_termino), Prev_Almoco_Inicio = IIF(@almoco_inicio = '', NULL, @almoco_inicio), Prev_Almoco_Termino = IIF(@almoco_termino = '', NULL, @almoco_termino) WHERE ID_Colaborador = @id_colaborador AND Data = @data";
                }
                else
                {
                    comando = "INSERT INTO tbl_Expediente (ID_Colaborador, Status, Data, Previsao_Inicio, Previsao_Termino, Prev_Lanche_Inicio, Prev_Lanche_Termino, Prev_Almoco_Inicio, Prev_Almoco_Termino) VALUES (@id_colaborador, @status, @data, IIF(@servico_inicio = '', NULL, @servico_inicio), IIF(@servico_termino = '', NULL, @servico_termino), IIF(@lanche_inicio = '', NULL, @lanche_inicio), IIF(@lanche_termino = '', NULL, @lanche_termino), IIF(@almoco_inicio = '', NULL, @almoco_inicio), IIF(@almoco_termino = '', NULL, @almoco_termino))";
                }

                string status;

                bool folga = Horarios.Where(x => x.Dia == dia_da_semana).Select(x => x.Folga).FirstOrDefault();

                if (folga)
                {
                    status = "Folga";
                }
                else
                {
                    status = "Serviço";
                }

                string licenca = VerificarSeColaboradorEstaDeLicenca(Data, id_colaborador);

                if (licenca != string.Empty)
                {
                    status = licenca;
                }

                string data = Data.ToShortDateString();

                string servico_inicio;
                if (status != "Serviço")
                {
                    servico_inicio = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Serviço").Select(x => x.Inicio).FirstOrDefault() != string.Empty)
                    { servico_inicio = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Serviço").Select(x => x.Inicio).FirstOrDefault(); }
                    else { servico_inicio = string.Empty; }
                }


                string servico_termino;
                if (status != "Serviço")
                {
                    servico_termino = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Serviço").Select(x => x.Termino).FirstOrDefault() != string.Empty)
                    { servico_termino = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Serviço").Select(x => x.Termino).FirstOrDefault(); }
                    else { servico_termino = string.Empty; }
                }


                string lanche_inicio;
                if (status != "Serviço")
                {
                    lanche_inicio = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Lanche").Select(x => x.Inicio).FirstOrDefault() != string.Empty)
                    { lanche_inicio = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Lanche").Select(x => x.Inicio).FirstOrDefault(); }
                    else { lanche_inicio = string.Empty; }
                }


                string lanche_termino;
                if (status != "Serviço")
                {
                    lanche_termino = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Lanche").Select(x => x.Termino).FirstOrDefault() != string.Empty)
                    { lanche_termino = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Lanche").Select(x => x.Termino).FirstOrDefault(); }
                    else { lanche_termino = string.Empty; }
                }


                string almoco_inicio;
                if (status != "Serviço")
                {
                    almoco_inicio = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Almoço").Select(x => x.Inicio).FirstOrDefault() != string.Empty)
                    { almoco_inicio = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Almoço").Select(x => x.Inicio).FirstOrDefault(); }
                    else { almoco_inicio = string.Empty; }
                }


                string almoco_termino;
                if (status != "Serviço")
                {
                    almoco_termino = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Almoço").Select(x => x.Termino).FirstOrDefault() != string.Empty)
                    { almoco_termino = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Almoço").Select(x => x.Termino).FirstOrDefault(); }
                    else { almoco_termino = string.Empty; }
                }

                insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                insert.Parameters.AddWithValue("status", status);
                insert.Parameters.AddWithValue("@data", data);
                insert.Parameters.AddWithValue("@servico_inicio", servico_inicio);
                insert.Parameters.AddWithValue("@servico_termino", servico_termino);
                insert.Parameters.AddWithValue("@lanche_inicio", lanche_inicio);
                insert.Parameters.AddWithValue("@lanche_termino", lanche_termino);
                insert.Parameters.AddWithValue("@almoco_inicio", almoco_inicio);
                insert.Parameters.AddWithValue("@almoco_termino", almoco_termino);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Os horários do mês atual foram atualizados!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void EditarHorariosDeColaboradoresDoRodizioDeTurnos(List<Turno> Horarios, int id_colaborador, int id_turno, List<DateTime> Datas)
        {
            CultureInfo cultura = new CultureInfo("pt-BR");
            DateTimeFormatInfo formato = cultura.DateTimeFormat;

            List<string> Folgas = FolgasDoTurno(id_turno);

            foreach (DateTime Data in Datas)
            {
                string dia_da_semana = formato.GetDayName(Data.DayOfWeek).PrimeiraLetraMaiuscula();
                SqlCommand insert;
                string comando;

                if (VerificarSeHorarioDoColaboradorJaFoiDefinido(Data, id_colaborador))
                {
                    comando = "UPDATE tbl_Expediente SET Status = @status, Previsao_Inicio = IIF(@servico_inicio = '', NULL, @servico_inicio), Previsao_Termino = IIF(@servico_termino = '', NULL, @servico_termino), Prev_Lanche_Inicio = IIF(@lanche_inicio = '', NULL, @lanche_inicio), Prev_Lanche_Termino = IIF(@lanche_termino = '', NULL, @lanche_termino), Prev_Almoco_Inicio = IIF(@almoco_inicio = '', NULL, @almoco_inicio), Prev_Almoco_Termino = IIF(@almoco_termino = '', NULL, @almoco_termino) WHERE ID_Colaborador = @id_colaborador AND Data = @data";
                }
                else
                {
                    comando = "INSERT INTO tbl_Expediente (ID_Colaborador, Status, Data, Previsao_Inicio, Previsao_Termino, Prev_Lanche_Inicio, Prev_Lanche_Termino, Prev_Almoco_Inicio, Prev_Almoco_Termino) VALUES (@id_colaborador, @status, @data, IIF(@servico_inicio = '', NULL, @servico_inicio), IIF(@servico_termino = '', NULL, @servico_termino), IIF(@lanche_inicio = '', NULL, @lanche_inicio), IIF(@lanche_termino = '', NULL, @lanche_termino), IIF(@almoco_inicio = '', NULL, @almoco_inicio), IIF(@almoco_termino = '', NULL, @almoco_termino))";
                }

                string status;

                bool folga = Folgas.Contains(dia_da_semana);

                if (folga)
                {
                    status = "Folga";
                }
                else
                {
                    status = "Serviço";
                }

                string licenca = VerificarSeColaboradorEstaDeLicenca(Data, id_colaborador);

                if (licenca != string.Empty)
                {
                    status = licenca;
                }

                string data = Data.ToShortDateString();

                string servico_inicio;
                if (status != "Serviço")
                {
                    servico_inicio = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Serviço").Select(x => x.Inicio).FirstOrDefault() != string.Empty)
                    { servico_inicio = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Serviço").Select(x => x.Inicio).FirstOrDefault(); }
                    else { servico_inicio = string.Empty; }
                }


                string servico_termino;
                if (status != "Serviço")
                {
                    servico_termino = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Serviço").Select(x => x.Termino).FirstOrDefault() != string.Empty)
                    { servico_termino = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Serviço").Select(x => x.Termino).FirstOrDefault(); }
                    else { servico_termino = string.Empty; }
                }


                string lanche_inicio;
                if (status != "Serviço")
                {
                    lanche_inicio = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Lanche").Select(x => x.Inicio).FirstOrDefault() != string.Empty)
                    { lanche_inicio = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Lanche").Select(x => x.Inicio).FirstOrDefault(); }
                    else { lanche_inicio = string.Empty; }
                }


                string lanche_termino;
                if (status != "Serviço")
                {
                    lanche_termino = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Lanche").Select(x => x.Termino).FirstOrDefault() != string.Empty)
                    { lanche_termino = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Lanche").Select(x => x.Termino).FirstOrDefault(); }
                    else { lanche_termino = string.Empty; }
                }


                string almoco_inicio;
                if (status != "Serviço")
                {
                    almoco_inicio = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Almoço").Select(x => x.Inicio).FirstOrDefault() != string.Empty)
                    { almoco_inicio = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Almoço").Select(x => x.Inicio).FirstOrDefault(); }
                    else { almoco_inicio = string.Empty; }
                }


                string almoco_termino;
                if (status != "Serviço")
                {
                    almoco_termino = string.Empty;
                }
                else
                {
                    if (Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Almoço").Select(x => x.Termino).FirstOrDefault() != string.Empty)
                    { almoco_termino = Data.ToShortDateString() + " " + Horarios.Where(x => x.Dia == dia_da_semana && x.Descricao == "Almoço").Select(x => x.Termino).FirstOrDefault(); }
                    else { almoco_termino = string.Empty; }
                }

                insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                insert.Parameters.AddWithValue("status", status);
                insert.Parameters.AddWithValue("@data", data);
                insert.Parameters.AddWithValue("@servico_inicio", servico_inicio);
                insert.Parameters.AddWithValue("@servico_termino", servico_termino);
                insert.Parameters.AddWithValue("@lanche_inicio", lanche_inicio);
                insert.Parameters.AddWithValue("@lanche_termino", lanche_termino);
                insert.Parameters.AddWithValue("@almoco_inicio", almoco_inicio);
                insert.Parameters.AddWithValue("@almoco_termino", almoco_termino);
                insert.ExecuteNonQuery();
            }
        }

        public List<string> FolgasDoTurno(int id_turno)
        {
            string comando = "SELECT Folga FROM tbl_FolgasTurno WHERE ID_Turno = @id_turno";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_turno", id_turno);
            List<string> folgas = new List<string>();

            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                if (leitor[0].ToString() != string.Empty)
                    folgas.Add(leitor[0].ToString());
            }
            leitor.Close();

            conexao.Desconectar();

            return folgas;
        }

        public string TrazerHorariosPorDia(DateTime data, int id_colaborador)
        {
            List<Horario> horarios = InformacoesDaEscala(id_colaborador);
            List<string> folgas = DiasDeFolga(id_colaborador);

            CultureInfo cultura = new CultureInfo("pt-BR");
            DateTimeFormatInfo formato = cultura.DateTimeFormat;
            string dia_da_semana = formato.GetDayName(data.DayOfWeek).PrimeiraLetraMaiuscula();
            bool feriado = VerificarFeriadoComLojaFechada(data);
            string texto = string.Empty;
            bool folga = folgas.Contains(dia_da_semana);

            if (feriado)
            {
                texto = "\r\nFERIADO";
            }
            else if (folga)
            {
                texto = "\r\nFOLGA";
            }
            else
            {
                string servico = horarios.Where(x => x.Descricao == "Serviço" && x.Dia == dia_da_semana).Select(x => x.Inicio + "~" + x.Termino).FirstOrDefault();
                string lanche = horarios.Where(x => x.Descricao == "Lanche" && x.Dia == dia_da_semana).Select(x => x.Inicio + "~" + x.Termino).FirstOrDefault();
                string almoco = horarios.Where(x => x.Descricao == "Almoço" && x.Dia == dia_da_semana).Select(x => x.Inicio + "~" + x.Termino).FirstOrDefault();

                if (lanche == "~") { lanche = "Não tem"; }
                if (almoco == "~") { almoco = "Não tem"; }
                texto = "\r\nServiço: " + servico + "\r\nLanche: " + lanche + "\r\nAlmoço: " + almoco;
            }

            return texto;
        }

        public string TrazerHorariosParaOCalendarioPequeno(DateTime data, int id_colaborador)
        {
            Escala horarios = ExpedienteDoDia(id_colaborador, data);
            string servico;
            try
            {
                servico = Convert.ToDateTime(horarios.segServicoInicio).ToShortTimeString() + "~" + Convert.ToDateTime(horarios.segServicoTermino).ToShortTimeString();
            }
            catch { servico = string.Empty; }

            string status = horarios.Folga;
            string texto;

            if (status == "Folga")
            {
                texto = "\r\nFOLGA";
            }
            else
            {
                texto = "\r\n" + servico;
            }

            return texto;
        }

        public string VerificarCargo()
        {
            string matricula = Program.matricula;
            string comando = "SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = (SELECT ID_Cargo FROM tbl_Colaboradores WHERE Matricula = @matricula)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            string cargo = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return cargo;
        }

        public void SinalSonoroDaAtividade(string colaborador, string atividade)
        {
            string aviso = "Atenção  " + colaborador + ", " + "  " + atividade;
        }

        public DateTime HorarioDaProximaAtividade(int id_colaborador)
        {
            DateTime hora_da_atividade = DateTime.Now;
            string cmd = "SELECT TOP (1) Previsao_Inicio, Previsao_termino FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = @id_colaborador ORDER BY Previsao_Inicio DESC";
            SqlCommand select = new SqlCommand(cmd, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            DateTime ultima_atv_inicio = DateTime.Now;
            DateTime ultima_atv_fim = DateTime.Now;
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                ultima_atv_inicio = Convert.ToDateTime(leitor[0]);
                ultima_atv_fim = Convert.ToDateTime(leitor[1]);
            }
            leitor.Close();
            conexao.Desconectar();

            string data_ultima_atv = ultima_atv_inicio.ToShortDateString();
            string command = "SELECT Previsao_Termino FROM tbl_Expediente WHERE ID_Colaborador = @id_colaborador AND Data = @data";
            SqlCommand select1 = new SqlCommand(command, conexao.Conectar());
            select1.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select1.Parameters.AddWithValue("@data", data_ultima_atv);
            SqlDataReader leitor1 = select1.ExecuteReader();
            DateTime previsao_termino = DateTime.Now;
            bool sem_atividade = false;
            while (leitor1.Read())
            {
                if (leitor1[0].ToString() == string.Empty) { sem_atividade = true; }
                else { previsao_termino = Convert.ToDateTime(leitor1[0]); }
            }
            leitor1.Close();
            conexao.Desconectar();

            string data = ultima_atv_inicio.AddDays(1).ToShortDateString();
            bool folga = VerificarSeColaboradorEstaDeFolga(id_colaborador, data);

            if (sem_atividade)
            {
                if (folga) { data = ultima_atv_inicio.AddDays(2).ToShortDateString(); }
                hora_da_atividade = InicioDoServico(id_colaborador, data);
            }
            else
            {
                if (ultima_atv_fim < previsao_termino)
                {
                    hora_da_atividade = ultima_atv_fim.AddSeconds(1);
                }
                else
                {
                    if (folga) { data = ultima_atv_inicio.AddDays(2).ToShortDateString(); }
                    hora_da_atividade = InicioDoServico(id_colaborador, data);
                }
            }
            return hora_da_atividade;
        }

        public List<Hora_Extra> HorasExtrasEDeslocamentos(int id_colaborador, string data)
        {
            string comando = "SELECT SUM (Tempo) AS Tempo, Periodo, Tipo FROM tbl_HorasExtras WHERE ID_Colaborador = @id_colaborador AND Data = @data GROUP BY Periodo, Tipo";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();
            List<Hora_Extra> horas_extras = new List<Hora_Extra>();
            while (leitor.Read())
            {
                horas_extras.Add(new Hora_Extra
                {
                    Tempo = Convert.ToInt32(leitor[0]),
                    Periodo = leitor[1].ToString(),
                    Tipo = leitor[2].ToString()
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return horas_extras;
        }

        public List<AtividadeRealizada> QuadroDeHorariosDoColaborador(int id_colaborador, string data)
        {
            List<AtividadeRealizada> lista_atividade = new List<AtividadeRealizada>();
            string comando = "SELECT Status, Previsao_Inicio, Previsao_Termino, Prev_Lanche_Inicio, Prev_lanche_Termino, Prev_Almoco_Inicio, Prev_Almoco_Termino FROM tbl_Expediente WHERE Data = @data AND ID_Colaborador = @id_colaborador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                DateTime inicio = Convert.ToDateTime(leitor[1].ToString());
                DateTime termino = Convert.ToDateTime(leitor[2].ToString());

                AtividadeRealizada atividade1 = new AtividadeRealizada()
                {
                    Descricao = "Expediente",
                    Inicio = Convert.ToDateTime(leitor[1].ToString()),
                    Termino = Convert.ToDateTime(leitor[2].ToString())
                };
                AtividadeRealizada atividade2 = new AtividadeRealizada()
                {
                    Descricao = "Lanche",
                    Inicio = Convert.ToDateTime(leitor[3].ToString()),
                    Termino = Convert.ToDateTime(leitor[4].ToString())
                };
                AtividadeRealizada atividade3 = new AtividadeRealizada()
                {
                    Descricao = "Almoço",
                    Inicio = Convert.ToDateTime(leitor[5].ToString()),
                    Termino = Convert.ToDateTime(leitor[6].ToString())
                };

                lista_atividade.Add(atividade1);
                lista_atividade.Add(atividade2);
                lista_atividade.Add(atividade3);
            }
            leitor.Close();
            conexao.Desconectar();

            string comando1 = "SELECT (SELECT Nome_Atividade FROM tbl_Atividades WHERE tbl_Atividades.ID_Atividade = tbl_AtividadesRealizadas.ID_Atividade) AS Atividade, Previsao_Inicio AS Inicio, Previsao_Termino AS Termino FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = @id_colaborador AND Status = 'Em andamento' OR Status = 'Pendente'";
            SqlCommand select1 = new SqlCommand(comando1, conexao.Conectar());
            select1.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            SqlDataReader leitor1 = select1.ExecuteReader();
            while (leitor1.Read())
            {
                lista_atividade.Add(new AtividadeRealizada
                {
                    Descricao = leitor1[0].ToString(),
                    Inicio = Convert.ToDateTime(leitor1[1].ToString()),
                    Termino = Convert.ToDateTime(leitor1[2].ToString())
                });
            }
            leitor1.Close();
            conexao.Desconectar();
            List<AtividadeRealizada> Lista = lista_atividade.OrderBy(x => x.Inicio).ToList();
            return Lista;
        }

        public List<AtividadeRealizada> ListaDeAtividadesPorColaborador()
        {
            string matricula = Program.matricula;
            string comando = "SELECT 1 AS Numero, (SELECT Nome_Atividade FROM tbl_Atividades WHERE ID_Atividade = tbl_AtividadesRealizadas.ID_Atividade) as Atividade, Status, ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE Status = 'Em andamento' AND Tipo = 'Atividade' AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) UNION SELECT 1 AS Numero, (SELECT Nome_Rotina FROM tbl_Rotinas WHERE ID_Rotina = tbl_AtividadesRealizadas.ID_Atividade), Status, ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE Status = 'Em andamento' AND Tipo = 'Rotina' AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) UNION SELECT 2 AS Numero,(SELECT Nome_Atividade FROM tbl_Atividades WHERE ID_Atividade = tbl_AtividadesRealizadas.ID_Atividade), Status, ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE Status = 'Pendente' AND Tipo = 'Atividade' AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) UNION SELECT 2 AS Numero, (SELECT Nome_Rotina FROM tbl_Rotinas WHERE ID_Rotina = tbl_AtividadesRealizadas.ID_Atividade) as Atividade, Status, ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE Status = 'Pendente' AND Tipo = 'Rotina' AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY ID_AtividadeRealizada";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            SqlDataReader leitor = select.ExecuteReader();
            List<AtividadeRealizada> lista = new List<AtividadeRealizada>();
            while (leitor.Read())
            {
                lista.Add(new AtividadeRealizada
                {
                    Descricao = leitor[1].ToString(),
                    Status = leitor[2].ToString()
                });

            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<AtividadeRealizada> ListaDeAtividades()
        {
            string comando = "SELECT 1 AS Numero, (SELECT Nome_Atividade FROM tbl_Atividades WHERE ID_Atividade = tbl_AtividadesRealizadas.ID_Atividade) as Atividade, (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_AtividadesRealizadas.ID_Colaborador) as Responsavel, Inicio, Status, ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE Status = 'Em andamento' AND Tipo = 'Atividade' UNION SELECT 1 AS Numero, (SELECT Nome_Rotina FROM tbl_Rotinas WHERE ID_Rotina = tbl_AtividadesRealizadas.ID_Atividade), (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_AtividadesRealizadas.ID_Colaborador), Inicio, Status, ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE Status = 'Em andamento' AND Tipo = 'Rotina' UNION SELECT 2 AS Numero,(SELECT Nome_Atividade FROM tbl_Atividades WHERE ID_Atividade = tbl_AtividadesRealizadas.ID_Atividade), (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_AtividadesRealizadas.ID_Colaborador), Inicio, Status, ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE Status = 'Pendente' AND Tipo = 'Atividade' UNION SELECT 2 AS Numero, (SELECT Nome_Rotina FROM tbl_Rotinas WHERE ID_Rotina = tbl_AtividadesRealizadas.ID_Atividade) as Atividade, (SELECT Nome_Colaborador FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_AtividadesRealizadas.ID_Colaborador) as Responsavel, Inicio, Status, ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE Status = 'Pendente' AND Tipo = 'Rotina' ORDER BY Responsavel, ID_AtividadeRealizada";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();
            List<AtividadeRealizada> lista = new List<AtividadeRealizada>();
            while (leitor.Read())
            {
                //DateTime previsao_inicio = DateTime.Now;
                //try { previsao_inicio = Convert.ToDateTime(leitor[3]); } catch { } 
                DateTime inicio = DateTime.Now;
                try { inicio = Convert.ToDateTime(leitor[3]); } catch { }
                //DateTime previsao_termino = DateTime.Now;
                //try { previsao_termino = Convert.ToDateTime(leitor[4]); } catch { }

                lista.Add(new AtividadeRealizada
                {
                    Descricao = leitor[1].ToString(),
                    Colaborador = leitor[2].ToString(),
                    //Previsao_Inicio = previsao_inicio,
                    Inicio = inicio,
                    //Previsao_Termino = previsao_termino,
                    //Tempo = Convert.ToInt32(leitor[6]),
                    Status = leitor[4].ToString()
                });

            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<AtividadeEspecificacao> TrazerEspecificacaoPelaAtividade(string atividade)
        {
            List<AtividadeEspecificacao> especificacoes = new List<AtividadeEspecificacao>();
            string comando = "SELECT Nome_Especificacao, Tempo FROM tbl_AtividadesEspecificacoes WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Nome_Atividade = @atividade)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@atividade", atividade);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                especificacoes.Add(new AtividadeEspecificacao
                {
                    Especificacao = leitor[0].ToString(),
                    Tempo = Convert.ToInt32(leitor[1])
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return especificacoes;
        }

        public bool VerificarSeEspecificacaoDaAtividadeJaExiste(string especificacao, string atividade)
        {
            string comando = "SELECT Nome_Especificacao FROM tbl_AtividadesEspecificacoes WHERE Nome_Especificacao = @especificacao AND ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Nome_Atividade = @atividade)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@atividade", atividade);
            select.Parameters.AddWithValue("@especificacao", especificacao);
            bool existe;
            if (select.ExecuteScalar() == null) { existe = false; }
            else { existe = true; }
            conexao.Desconectar();
            return existe;
        }

        public void CadastrarEspecificacaoDaAtividade(AtividadeEspecificacao Especificacao)
        {
            string comando = "INSERT INTO tbl_AtividadesEspecificacoes (ID_Atividade, Nome_Especificacao, Tempo) VALUES ((SELECT ID_Atividade FROM tbl_Atividades WHERE Nome_Atividade = @atividade), @especificacao, @tempo)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@atividade", Especificacao.Atividade);
            insert.Parameters.AddWithValue("@especificacao", Especificacao.Especificacao);
            insert.Parameters.AddWithValue("@tempo", Especificacao.Tempo);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Especificação da atividade \"" + Especificacao.Atividade + "\" cadastrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<string> PreenhcerComboFolgas(int id_colaborador)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Data FROM tbl_Expediente WHERE ID_Colaborador = @id_colaborador AND Status = 'Folga'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToDateTime(leitor[0]).ToShortDateString());
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public string SetorPeloColaborador()
        {
            string comando = "SELECT Nome_Setor FROM tbl_Setores WHERE ID_Setor = (SELECT ID_Setor FROM tbl_Cargos WHERE ID_Cargo = (SELECT ID_Cargo FROM tbl_Colaboradores WHERE Matricula = @matricula))";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", Program.matricula);
            string setor = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return setor;
        }

        public string SetorPeloIdDoColaborador(int id_colaborador)
        {
            string comando = "SELECT Nome_Setor FROM tbl_Setores WHERE ID_Setor = (SELECT ID_Setor FROM tbl_Cargos WHERE ID_Cargo = (SELECT ID_Cargo FROM tbl_Colaboradores WHERE ID_Colaborador = @id_colaborador))";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            string setor = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return setor;
        }

        public void AlterarFolgas(DateTime antiga_folga, DateTime folga, int id_colaborador)
        {
            int intervalo = Convert.ToInt32(ObterValorDoParametro("Intervalo mínimo entre folgas dos funcionários"));
            string comando = "SELECT TOP (1) Data FROM tbl_Expediente WHERE Data < @data AND ID_Colaborador = @id_colaborador AND Status = 'Folga' AND Data <> @antiga_folga ORDER BY Data DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", folga.ToShortDateString());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@antiga_folga", antiga_folga.ToShortDateString());
            string comando1 = "SELECT TOP (1) Data FROM tbl_Expediente WHERE Data > @data AND ID_Colaborador = @id_colaborador AND Status = 'Folga' AND Data <> @antiga_folga";
            SqlCommand select1 = new SqlCommand(comando1, conexao.Conectar());
            select1.Parameters.AddWithValue("@data", folga.ToShortDateString());
            select1.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select1.Parameters.AddWithValue("@antiga_folga", antiga_folga.ToShortDateString());

            bool verificar_anterior = true;
            bool verificar_posterior = true;

            DateTime folga_anterior = new DateTime();
            DateTime folga_posterior = new DateTime();
            try { folga_anterior = Convert.ToDateTime(select.ExecuteScalar()); } catch { verificar_anterior = false; }
            try { folga_posterior = Convert.ToDateTime(select1.ExecuteScalar()); } catch { verificar_posterior = false; }

            bool permitir = true;

            if (verificar_posterior)
            {
                if (folga_posterior.Subtract(folga).TotalDays > intervalo)
                {
                    MessageBox.Show("A data selecionada conflitua com o intervalo mínimo entre folgas.\r\nIntervalo (dias): " + intervalo.ToString() + "\r\nData: " + folga.ToShortDateString() + "\r\nPróxima folga: " + folga_posterior.ToShortDateString());
                    permitir = false;
                }
            }

            if (verificar_anterior)
            {
                if (folga.Subtract(folga_anterior).TotalDays > intervalo)
                {
                    MessageBox.Show("A data selecionada conflitua com o intervalo mínimo entre folgas.\r\nIntervalo (dias): " + intervalo.ToString() + "\r\nData: " + folga.ToShortDateString() + "\r\nFolga anterior: " + folga_anterior.ToShortDateString());
                    permitir = false;
                }
            }

            if (permitir)
            {
                Expediente Expediente = new Expediente();
                string comando2 = "SELECT Previsao_Inicio, Previsao_Termino, Prev_Lanche_Inicio, Prev_lanche_Termino, Prev_Almoco_Inicio, Prev_Almoco_Termino FROM tbl_Expediente WHERE Data = @data AND ID_Colaborador = @id_colaborador";
                SqlCommand select2 = new SqlCommand(comando2, conexao.Conectar());
                select2.Parameters.AddWithValue("@data", folga.ToShortDateString());
                select2.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                SqlDataReader leitor = select2.ExecuteReader();
                while (leitor.Read())
                {
                    Expediente.Previsao_Inicio = Convert.ToDateTime(leitor[0]);
                    Expediente.Previsao_Termino = Convert.ToDateTime(leitor[1]);
                    Expediente.Previsao_Lanche_Inicio = Convert.ToDateTime(leitor[2]);
                    Expediente.Previsao_Lanche_Termino = Convert.ToDateTime(leitor[3]);
                    Expediente.Previsao_Almoco_Inicio = Convert.ToDateTime(leitor[4]);
                    Expediente.Previsao_Almoco_Termino = Convert.ToDateTime(leitor[5]);
                }
                leitor.Close();
                conexao.Desconectar();

                string comando3 = "UPDATE tbl_Expediente SET Status = 'Folga', Previsao_Inicio = NULL, Previsao_Termino = NULL, Prev_Lanche_Inicio = NULL, Prev_lanche_Termino = NULL, Prev_Almoco_Inicio = NULL, Prev_Almoco_Termino = NULL WHERE Data = @data AND ID_Colaborador = @id_colaborador";
                SqlCommand update = new SqlCommand(comando3, conexao.Conectar());
                update.Parameters.AddWithValue("@data", folga.ToShortDateString());
                update.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                update.ExecuteNonQuery();
                conexao.Desconectar();

                string comando4 = "UPDATE tbl_Expediente SET Status = 'Serviço', Previsao_Inicio = @previsao_inicio, Previsao_Termino = @previsao_termino, Prev_Lanche_Inicio = @prev_lanche_inicio, Prev_lanche_Termino = @prev_lanche_termino, Prev_Almoco_Inicio = @prev_almoco_inicio, Prev_Almoco_Termino = @prev_almoco_termino WHERE Data = @data AND ID_Colaborador = @id_colaborador";
                SqlCommand update1 = new SqlCommand(comando4, conexao.Conectar());
                update1.Parameters.AddWithValue("@data", antiga_folga.ToShortDateString());
                update1.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                update1.Parameters.AddWithValue("@previsao_inicio", Expediente.Previsao_Inicio);
                update1.Parameters.AddWithValue("@previsao_termino", Expediente.Previsao_Termino);
                update1.Parameters.AddWithValue("@prev_lanche_inicio", Expediente.Previsao_Lanche_Inicio);
                update1.Parameters.AddWithValue("@prev_lanche_termino", Expediente.Previsao_Lanche_Termino);
                update1.Parameters.AddWithValue("@prev_almoco_inicio", Expediente.Previsao_Almoco_Inicio);
                update1.Parameters.AddWithValue("@prev_almoco_termino", Expediente.Previsao_Almoco_Termino);
                update1.ExecuteNonQuery();
                conexao.Desconectar();

                MessageBox.Show("Folga trocada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public bool VerificarSeJaTemHoraExtra(string periodo, string data, int id_colaborador)
        {
            string comando = "SELECT Data FROM tbl_HorasExtras WHERE Tipo = 'Hora Extra' AND Periodo = @periodo AND Data = @data AND ID_Colaborador = @id_colaborador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@periodo", periodo);
            select.Parameters.AddWithValue("@data", data);
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            bool existe;
            if (select.ExecuteScalar() == null) { existe = false; }
            else { existe = true; }

            return existe;
        }

        public void AdicionarHorasExtras(Hora_Extra hora_extra)
        {
            string data = hora_extra.Data.ToShortDateString();
            int tempo = hora_extra.Tempo;
            int id_colaborador = hora_extra.ID_Colaborador;
            string periodo = string.Empty;
            if (hora_extra.Periodo == "Início do Serviço") { periodo = "Servico_Inicio"; }
            else if (hora_extra.Periodo == "Fim do Serviço") { periodo = "Servico_Termino"; }
            string matricula = Program.matricula;
            string registro = hora_extra.Data_Registro.ToString();

            bool existe = VerificarSeJaTemHoraExtra(periodo, data, id_colaborador);

            conexao.Desconectar();

            if (existe)
            {
                string comand = "UPDATE tbl_HorasExtras SET Tempo = @tempo, ID_Responsavel = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), Data_Registro = @registro WHERE Data = @data AND Tipo = 'Hora Extra' AND Periodo = @periodo AND ID_Colaborador = @id_colaborador";
                SqlCommand update = new SqlCommand(comand, conexao.Conectar());
                update.Parameters.AddWithValue("@data", data);
                update.Parameters.AddWithValue("@tempo", tempo);
                update.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                update.Parameters.AddWithValue("@matricula", matricula);
                update.Parameters.AddWithValue("@registro", registro);
                update.Parameters.AddWithValue("@periodo", periodo);

                if (DialogResult.Yes == MessageBox.Show("Já existe um registro de horas extras nesse mesmo período.\r\nDeseja sobrescrever?", "Atenção!", MessageBoxButtons.YesNo, MessageBoxIcon.Information))
                {
                    update.ExecuteNonQuery();
                    MessageBox.Show("Hora extra registrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            else
            {
                string comand = "INSERT INTO tbl_HorasExtras (Data, Tipo, Tempo, ID_Colaborador, ID_Responsavel, Data_Registro, Periodo) VALUES (@data, 'Hora Extra', @tempo, @id_colaborador, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), @registro, @periodo)";
                SqlCommand insert = new SqlCommand(comand, conexao.Conectar());
                insert.Parameters.AddWithValue("@data", data);
                insert.Parameters.AddWithValue("@tempo", tempo);
                insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                insert.Parameters.AddWithValue("@matricula", matricula);
                insert.Parameters.AddWithValue("@registro", registro);
                insert.Parameters.AddWithValue("@periodo", periodo);

                insert.ExecuteNonQuery();
                MessageBox.Show("Hora extra registrada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            conexao.Desconectar();
        }

        public List<AtividadeRealizada> ListaParaOrdenarAtividadesPorHorario(string colaborador, string data)
        {
            //string comando = "SELECT 1, null, 'Início do Serviço', Previsao_Inicio, null, null, null FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data UNION SELECT 2, ID_AtividadeRealizada, Descricao, Previsao_Inicio, Previsao_Termino, Tempo, Prioridade FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND CONVERT(DATE, Previsao_Inicio) = @data UNION SELECT 3, null, 'Fim do Serviço', null, Previsao_Termino, null, null FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            string comando = "SELECT ID_AtividadeRealizada, Descricao, Previsao_Inicio, Previsao_Termino, Tempo, Prioridade FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND CONVERT(DATE, Previsao_Inicio) = @data AND Status = 'Pendente' ORDER BY Previsao_Inicio ASC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();
            List<AtividadeRealizada> lista = new List<AtividadeRealizada>();
            int i = 1;

            while (leitor.Read())
            {
                DateTime previsao_inicio;
                DateTime previsao_termino;
                if (leitor[2].ToString() == string.Empty) { previsao_inicio = DateTime.Now; }
                else { previsao_inicio = Convert.ToDateTime(leitor[2]); }
                if (leitor[3].ToString() == string.Empty) { previsao_termino = DateTime.Now; }
                else { previsao_termino = Convert.ToDateTime(leitor[3]); }
                int tempo;
                int prioridade;
                int id_atividade;
                try { tempo = Convert.ToInt32(leitor[4]); } catch { tempo = 0; }
                try { prioridade = Convert.ToInt32(leitor[5]); } catch { prioridade = 0; }
                try { id_atividade = Convert.ToInt32(leitor[0]); } catch { id_atividade = 0; }

                lista.Add(new AtividadeRealizada
                {
                    Index = i,
                    ID_Atividade = id_atividade,
                    Descricao = leitor[1].ToString(),
                    Previsao_Inicio = previsao_inicio,
                    Previsao_Termino = previsao_termino,
                    Tempo = tempo,
                    Prioridade = prioridade
                });
                i++;
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<AtividadeDelegada> ListaParaOrdenarAtividades(int id_colaborador)
        {
            List<AtividadeDelegada> lista = new List<AtividadeDelegada>();

            string comando = "SELECT ID_AtividadeDelegada, (SELECT Descricao FROM tbl_Atividades WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_AtividadesLancadas WHERE ID_AtividadeLancada = tbl_AtividadesDelegadas.ID_AtividadeLancada)) AS Descricao, (SELECT Prioridade FROM tbl_Atividades WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_AtividadesLancadas WHERE ID_AtividadeLancada = tbl_AtividadesDelegadas.ID_AtividadeLancada)) AS Prioridade, Ordem FROM tbl_AtividadesDelegadas WHERE ID_Colaborador = @id_colaborador AND Status = 'Pendente' ORDER BY Ordem";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_colaborador", id_colaborador);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    int i = 1;

                    while (leitor.Read())
                    {
                        int prioridade;
                        int id_atividade;
                        int ordem;

                        try
                        {
                            ordem = Convert.ToInt32(leitor[3]);
                        }
                        catch
                        {
                            ordem = 0;
                        }
                        try
                        {
                            prioridade = Convert.ToInt32(leitor[2]);
                        }
                        catch
                        {
                            prioridade = 0;
                        }
                        try
                        {
                            id_atividade = Convert.ToInt32(leitor[0]);
                        }
                        catch
                        {
                            id_atividade = 0;
                        }

                        lista.Add(new AtividadeDelegada
                        {
                            Index = i,
                            ID_AtividadeDelegada = id_atividade,
                            Descricao = leitor[1].ToString(),
                            Prioridade = prioridade,
                            Ordem = ordem
                        });
                        i++;
                    }
                }
            }

            conexao.Desconectar();
            return lista;
        }

        public void ReordenarHorarioDasAtividades(List<AtividadeRealizada> atividades)
        {
            foreach (AtividadeRealizada atividade in atividades)
            {
                DateTime inicio = atividade.Previsao_Inicio;
                DateTime termino = atividade.Previsao_Termino;
                int id = atividade.ID_Atividade;
                string comando = "UPDATE tbl_AtividadesRealizadas SET Previsao_Inicio = @inicio, Previsao_Termino = @termino WHERE ID_AtividadeRealizada = @id";
                SqlCommand update = new SqlCommand(comando, conexao.Conectar());
                update.Parameters.AddWithValue("@inicio", inicio);
                update.Parameters.AddWithValue("@termino", termino);
                update.Parameters.AddWithValue("@id", id);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
            MessageBox.Show("Horário das atividades atualizado com sucesso!", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ReordenarAtividades(List<AtividadeDelegada> atividades)
        {
            foreach (AtividadeDelegada atividade in atividades)
            {
                int ordem = atividade.Ordem;
                int id = atividade.ID_AtividadeDelegada;
                string comando = "UPDATE tbl_AtividadesDelegadas SET Ordem = @ordem WHERE ID_AtividadeDelegada = @id";
                SqlCommand update = new SqlCommand(comando, conexao.Conectar());
                update.Parameters.AddWithValue("@ordem", ordem);
                update.Parameters.AddWithValue("@id", id);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
            MessageBox.Show("Ordem das atividades atualizada com sucesso!", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public bool VerificarSeColaboradorEstaDeFolga(int id_colaborador, string data)
        {
            string comando = "SELECT Status FROM tbl_Expediente WHERE ID_Colaborador = @id_colaborador AND Data = @data AND Status = 'Folga'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@data", data);
            bool folga;
            if (select.ExecuteScalar() == null) { folga = false; }
            else { folga = true; }
            conexao.Desconectar();
            return folga;
        }

        public DateTime InicioDoServico(int id_colaborador, string data)
        {
            string comando = "SELECT Previsao_Inicio FROM tbl_Expediente WHERE ID_Colaborador = @id_colaborador AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@data", data);
            DateTime inicio = Convert.ToDateTime(select.ExecuteScalar());
            conexao.Desconectar();
            return inicio;
        }

        public Expediente HorariosDoDia(int id_colaborador, string data)
        {
            Expediente expediente = new Expediente();
            string comando = "SELECT Previsao_Inicio, Previsao_Termino, Prev_Lanche_Inicio, Prev_lanche_Termino, Prev_Almoco_Inicio, Prev_Almoco_Termino FROM tbl_Expediente WHERE ID_Colaborador = @id_colaborador AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                if (leitor[0].ToString() == string.Empty) { }
                else { expediente.Previsao_Inicio = Convert.ToDateTime(leitor[0].ToString()); }
                if (leitor[1].ToString() == string.Empty) { }
                else { expediente.Previsao_Termino = Convert.ToDateTime(leitor[1].ToString()); }
                if (leitor[2].ToString() == string.Empty) { }
                else { expediente.Previsao_Lanche_Inicio = Convert.ToDateTime(leitor[2].ToString()); }
                if (leitor[3].ToString() == string.Empty) { }
                else { expediente.Previsao_Lanche_Termino = Convert.ToDateTime(leitor[3].ToString()); }
                if (leitor[4].ToString() == string.Empty) { }
                else { expediente.Previsao_Almoco_Inicio = Convert.ToDateTime(leitor[4].ToString()); }
                if (leitor[5].ToString() == string.Empty) { }
                else { expediente.Previsao_Almoco_Termino = Convert.ToDateTime(leitor[5].ToString()); }

            }
            leitor.Close();
            conexao.Desconectar();
            return expediente;
        }

        public bool VerificarSeExpedienteFoiPreenchido(int id_colaborador, string data)
        {
            string comando = "SELECT Previsao_Inicio FROM tbl_Expediente WHERE ID_Colaborador = @id_colaborador AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@data", data);
            bool preenchido;
            if (select.ExecuteScalar() == null) { preenchido = false; }
            else { preenchido = true; }
            conexao.Desconectar();
            return preenchido;
        }

        public void DeslocarHorarios(int id_colaborador, string data, Expediente expediente)
        {
            string servico_inicio;
            if (expediente.Previsao_Inicio.ToString() == "01/01/0001 00:00:00") { servico_inicio = string.Empty; }
            else { servico_inicio = expediente.Previsao_Inicio.ToString(); }

            string servico_termino;
            if (expediente.Previsao_Termino.ToString() == "01/01/0001 00:00:00") { servico_termino = string.Empty; }
            else { servico_termino = expediente.Previsao_Termino.ToString(); }

            string lanche_inicio;
            if (expediente.Previsao_Lanche_Inicio.ToString() == "01/01/0001 00:00:00") { lanche_inicio = string.Empty; }
            else { lanche_inicio = expediente.Previsao_Lanche_Inicio.ToString(); }

            string lanche_termino;
            if (expediente.Previsao_Lanche_Termino.ToString() == "01/01/0001 00:00:00") { lanche_termino = string.Empty; }
            else { lanche_termino = expediente.Previsao_Lanche_Termino.ToString(); }

            string almoco_inicio;
            if (expediente.Previsao_Almoco_Inicio.ToString() == "01/01/0001 00:00:00") { almoco_inicio = string.Empty; }
            else { almoco_inicio = expediente.Previsao_Almoco_Inicio.ToString(); }

            string almoco_termino;
            if (expediente.Previsao_Almoco_Termino.ToString() == "01/01/0001 00:00:00") { almoco_termino = string.Empty; }
            else { almoco_termino = expediente.Previsao_Almoco_Termino.ToString(); }


            string comando = "UPDATE tbl_Expediente SET Previsao_Inicio = IIF(@inicio = '', NULL, @inicio), Previsao_Termino = IIF(@termino = '', NULL, @termino), Prev_Lanche_Inicio = IIF(@lanche_inicio = '', NULL, @lanche_inicio), Prev_lanche_Termino = IIF(@lanche_termino = '', NULL, @lanche_termino), Prev_Almoco_Inicio = IIF(@almoco_inicio = '', NULL, @almoco_inicio), Prev_Almoco_Termino = IIF(@almoco_termino = '', NULL, @almoco_termino) WHERE ID_Colaborador = @id_colaborador AND Data = @data";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            update.Parameters.AddWithValue("@data", data);
            update.Parameters.AddWithValue("@inicio", servico_inicio);
            update.Parameters.AddWithValue("@termino", servico_termino);
            update.Parameters.AddWithValue("@lanche_inicio", lanche_inicio);
            update.Parameters.AddWithValue("@lanche_termino", lanche_termino);
            update.Parameters.AddWithValue("@almoco_inicio", almoco_inicio);
            update.Parameters.AddWithValue("@almoco_termino", almoco_termino);
            update.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Horários atualizados com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarRegistrosDePonto(int id_colaborador, DateTime data, string coluna)
        {
            string comando = "UPDATE tbl_Expediente SET " + coluna + " WHERE ID_Colaborador = @id AND Data = @data";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id", id_colaborador);
            update.Parameters.AddWithValue("@data", data.ToShortDateString());
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void AlterarStatusDasAtividadesEmAndamento(int id_colaborador)
        {
            string comando = "UPDATE tbl_AtividadesRealizadas SET Status = 'Pendente', Inicio = NULL WHERE Status = 'Em andamento' AND ID_Colaborador = @id";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id", id_colaborador);
            update.ExecuteNonQuery();

            conexao.Desconectar();
        }

        public void ListaDeExpedientes(DateTime data, DataGridView dataGrid)
        {
            string comando = "SELECT ID_Colaborador, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Expediente.ID_Colaborador) AS Nome, Status, IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Previsao_Inicio, 103)), 1, 5), Status), IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Inicio, 103)), 1, 5), Status), IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Prev_Lanche_Inicio, 103)), 1, 5), Status), IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Lanche_inicio, 103)), 1, 5), Status),IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Prev_lanche_Termino, 103)), 1, 5), Status), IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Lanche_Termino, 103)), 1, 5), Status), IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Prev_Almoco_Inicio, 103)), 1, 5), Status), IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Almoco_Inicio, 103)), 1, 5), Status), IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Prev_Almoco_Termino, 103)), 1, 5), Status), IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Almoco_Termino, 103)), 1, 5), Status), IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Previsao_Termino, 103)), 1, 5), Status), IIF(Status = 'Serviço', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Termino, 103)), 1, 5), Status), IIF((SELECT COUNT(*) FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = tbl_Expediente.ID_Colaborador AND Status = 'Em andamento') > 0, 'Em andamento', IIF((SELECT COUNT(*) FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = tbl_Expediente.ID_Colaborador AND Status = 'Pendente') > 0, 'Pendente', IIF(Status = 'Serviço', 'Disponível', 'Indisponível'))) FROM tbl_Expediente WHERE Data = @data AND (SELECT Ativacao FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Expediente.ID_Colaborador) = 1 ORDER BY Nome";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@data", data.ToShortDateString());

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        dataGrid.Rows.Add(leitor[0].ToString(), leitor[1].ToString(), leitor[2].ToString(), leitor[3].ToString(), leitor[4].ToString(), leitor[5].ToString(), leitor[6].ToString(),
                            leitor[7].ToString(), leitor[8].ToString(), leitor[9].ToString(), leitor[10].ToString(), leitor[11].ToString(), leitor[12].ToString(), leitor[13].ToString(), leitor[14].ToString(), leitor[15].ToString());
                    }
                }
            }

            conexao.Desconectar();
        }

        public void AlterarHorario(int id_colaborador, string horario, string registro, DateTime data)
        {
            string comando = "UPDATE tbl_Expediente SET " + registro + " = IIF(@horario = '', NULL, @horario) WHERE ID_Colaborador = @id_colaborador AND Data = CONVERT(DATE, @data)";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@horario", horario);
                update.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                update.Parameters.AddWithValue("@data", data);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void RegistrarImpressaoPendente(int id_colaborador, string horario, string registro)
        {
            string comando = "INSERT INTO tbl_RegistrosPonto (ID_Colaborador, Evento, Data, Impressao, ID_Responsavel) VALUES (@id_colaborador, @registro, @horario, 0, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula))";

            if (registro == "Inicio")
            {
                registro = "Início do Serviço";
            }
            else if (registro == "Termino")
            {
                registro = "Término do Serviço";
            }
            else if (registro == "Lanche_Inicio")
            {
                registro = "Início do Lanche";
            }
            else if (registro == "Lanche_Termino")
            {
                registro = "Término do Lanche";
            }
            else if (registro == "Almoco_Inicio")
            {
                registro = "Início do Almoco";
            }
            else if (registro == "Almoco_Termino")
            {
                registro = "Término do Almoco";
            }

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@horario", horario);
                insert.Parameters.AddWithValue("@registro", registro);
                insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public Expediente TrazerPrevisoesDoExpediente(int id, DateTime data)
        {
            CultureInfo cultura = new CultureInfo("pt-BR");
            DateTimeFormatInfo formato = cultura.DateTimeFormat;
            string dia_da_semana = formato.GetDayName(data.DayOfWeek).PrimeiraLetraMaiuscula();
            List<Horario> horario = InformacoesDaEscala(id);

            Expediente expediente = new Expediente();

            string comando = "SELECT Status, Previsao_Inicio, Previsao_Termino, Prev_Lanche_Inicio, Prev_lanche_Termino, Prev_Almoco_Inicio, Prev_Almoco_Termino FROM tbl_Expediente WHERE ID_Colaborador = @id AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                string status = leitor[0].ToString();

                if (status == "Folga")
                {
                    expediente.Status = status;
                    expediente.Previsao_Inicio = horario.Where(x => x.Dia == dia_da_semana && x.Descricao == "Serviço").Select(x => Convert.ToDateTime(data.ToShortDateString() + " " + x.Inicio)).FirstOrDefault();
                    expediente.Previsao_Termino = horario.Where(x => x.Dia == dia_da_semana && x.Descricao == "Serviço").Select(x => Convert.ToDateTime(data.ToShortDateString() + " " + x.Termino)).FirstOrDefault();
                    expediente.Previsao_Lanche_Inicio = horario.Where(x => x.Dia == dia_da_semana && x.Descricao == "Lanche").Select(x => Convert.ToDateTime(data.ToShortDateString() + " " + x.Inicio)).FirstOrDefault();
                    expediente.Previsao_Lanche_Termino = horario.Where(x => x.Dia == dia_da_semana && x.Descricao == "Lanche").Select(x => Convert.ToDateTime(data.ToShortDateString() + " " + x.Termino)).FirstOrDefault();
                    expediente.Previsao_Almoco_Inicio = horario.Where(x => x.Dia == dia_da_semana && x.Descricao == "Almoço").Select(x => Convert.ToDateTime(data.ToShortDateString() + " " + x.Inicio)).FirstOrDefault();
                    expediente.Previsao_Almoco_Termino = horario.Where(x => x.Dia == dia_da_semana && x.Descricao == "Almoço").Select(x => Convert.ToDateTime(data.ToShortDateString() + " " + x.Termino)).FirstOrDefault();
                }
                else
                {
                    expediente.Status = status;
                    if (leitor[1].ToString() == string.Empty) { }
                    else { expediente.Previsao_Inicio = Convert.ToDateTime(leitor[1].ToString()); }
                    if (leitor[2].ToString() == string.Empty) { }
                    else { expediente.Previsao_Termino = Convert.ToDateTime(leitor[2].ToString()); }
                    if (leitor[3].ToString() == string.Empty) { }
                    else { expediente.Previsao_Lanche_Inicio = Convert.ToDateTime(leitor[3].ToString()); }
                    if (leitor[4].ToString() == string.Empty) { }
                    else { expediente.Previsao_Lanche_Termino = Convert.ToDateTime(leitor[4].ToString()); }
                    if (leitor[5].ToString() == string.Empty) { }
                    else { expediente.Previsao_Almoco_Inicio = Convert.ToDateTime(leitor[5].ToString()); }
                    if (leitor[6].ToString() == string.Empty) { }
                    else { expediente.Previsao_Almoco_Termino = Convert.ToDateTime(leitor[6].ToString()); }
                }
            }
            leitor.Close();

            conexao.Desconectar();

            return expediente;
        }

        public Expediente TrazerRegistrosDoExpediente(int id, DateTime data)
        {
            Expediente expediente = new Expediente();

            string comando = "SELECT Status, Inicio, Termino, Lanche_Inicio, lanche_Termino, Almoco_Inicio, Almoco_Termino FROM tbl_Expediente WHERE ID_Colaborador = @id AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id);
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                string status = leitor[0].ToString();

                expediente.Status = status;
                if (leitor[1].ToString() == string.Empty) { }
                else { expediente.Previsao_Inicio = Convert.ToDateTime(leitor[1].ToString()); }
                if (leitor[2].ToString() == string.Empty) { }
                else { expediente.Previsao_Termino = Convert.ToDateTime(leitor[2].ToString()); }
                if (leitor[3].ToString() == string.Empty) { }
                else { expediente.Previsao_Lanche_Inicio = Convert.ToDateTime(leitor[3].ToString()); }
                if (leitor[4].ToString() == string.Empty) { }
                else { expediente.Previsao_Lanche_Termino = Convert.ToDateTime(leitor[4].ToString()); }
                if (leitor[5].ToString() == string.Empty) { }
                else { expediente.Previsao_Almoco_Inicio = Convert.ToDateTime(leitor[5].ToString()); }
                if (leitor[6].ToString() == string.Empty) { }
                else { expediente.Previsao_Almoco_Termino = Convert.ToDateTime(leitor[6].ToString()); }
            }
            leitor.Close();

            conexao.Desconectar();

            return expediente;
        }

        public void AlterarExpediente(int id_colaborador, string data, Expediente expediente)
        {
            string servico_inicio;
            if (expediente.Previsao_Inicio.ToString() == "01/01/0001 00:00:00" || expediente.Status == "Folga") { servico_inicio = string.Empty; }
            else { servico_inicio = expediente.Previsao_Inicio.ToString(); }

            string servico_termino;
            if (expediente.Previsao_Termino.ToString() == "01/01/0001 00:00:00" || expediente.Status == "Folga") { servico_termino = string.Empty; }
            else { servico_termino = expediente.Previsao_Termino.ToString(); }

            string lanche_inicio;
            if (expediente.Previsao_Lanche_Inicio.ToString() == "01/01/0001 00:00:00" || expediente.Status == "Folga") { lanche_inicio = string.Empty; }
            else { lanche_inicio = expediente.Previsao_Lanche_Inicio.ToString(); }

            string lanche_termino;
            if (expediente.Previsao_Lanche_Termino.ToString() == "01/01/0001 00:00:00" || expediente.Status == "Folga") { lanche_termino = string.Empty; }
            else { lanche_termino = expediente.Previsao_Lanche_Termino.ToString(); }

            string almoco_inicio;
            if (expediente.Previsao_Almoco_Inicio.ToString() == "01/01/0001 00:00:00" || expediente.Status == "Folga") { almoco_inicio = string.Empty; }
            else { almoco_inicio = expediente.Previsao_Almoco_Inicio.ToString(); }

            string almoco_termino;
            if (expediente.Previsao_Almoco_Termino.ToString() == "01/01/0001 00:00:00" || expediente.Status == "Folga") { almoco_termino = string.Empty; }
            else { almoco_termino = expediente.Previsao_Almoco_Termino.ToString(); }


            string comando = "UPDATE tbl_Expediente SET Status = @status, Previsao_Inicio = IIF(@inicio = '', NULL, @inicio), Previsao_Termino = IIF(@termino = '', NULL, @termino), Prev_Lanche_Inicio = IIF(@lanche_inicio = '', NULL, @lanche_inicio), Prev_lanche_Termino = IIF(@lanche_termino = '', NULL, @lanche_termino), Prev_Almoco_Inicio = IIF(@almoco_inicio = '', NULL, @almoco_inicio), Prev_Almoco_Termino = IIF(@almoco_termino = '', NULL, @almoco_termino) WHERE ID_Colaborador = @id_colaborador AND Data = @data";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            update.Parameters.AddWithValue("@data", data);
            update.Parameters.AddWithValue("@status", expediente.Status);
            update.Parameters.AddWithValue("@inicio", servico_inicio);
            update.Parameters.AddWithValue("@termino", servico_termino);
            update.Parameters.AddWithValue("@lanche_inicio", lanche_inicio);
            update.Parameters.AddWithValue("@lanche_termino", lanche_termino);
            update.Parameters.AddWithValue("@almoco_inicio", almoco_inicio);
            update.Parameters.AddWithValue("@almoco_termino", almoco_termino);
            update.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Expediente atualizado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void AlterarRegistros(int id_colaborador, string data, Expediente expediente)
        {
            string servico_inicio;
            if (expediente.Previsao_Inicio.ToString() == "01/01/0001 00:00:00") { servico_inicio = string.Empty; }
            else { servico_inicio = expediente.Previsao_Inicio.ToString(); }

            string servico_termino;
            if (expediente.Previsao_Termino.ToString() == "01/01/0001 00:00:00") { servico_termino = string.Empty; }
            else { servico_termino = expediente.Previsao_Termino.ToString(); }

            string lanche_inicio;
            if (expediente.Previsao_Lanche_Inicio.ToString() == "01/01/0001 00:00:00") { lanche_inicio = string.Empty; }
            else { lanche_inicio = expediente.Previsao_Lanche_Inicio.ToString(); }

            string lanche_termino;
            if (expediente.Previsao_Lanche_Termino.ToString() == "01/01/0001 00:00:00") { lanche_termino = string.Empty; }
            else { lanche_termino = expediente.Previsao_Lanche_Termino.ToString(); }

            string almoco_inicio;
            if (expediente.Previsao_Almoco_Inicio.ToString() == "01/01/0001 00:00:00") { almoco_inicio = string.Empty; }
            else { almoco_inicio = expediente.Previsao_Almoco_Inicio.ToString(); }

            string almoco_termino;
            if (expediente.Previsao_Almoco_Termino.ToString() == "01/01/0001 00:00:00") { almoco_termino = string.Empty; }
            else { almoco_termino = expediente.Previsao_Almoco_Termino.ToString(); }

            string comando = "UPDATE tbl_Expediente SET Inicio = IIF(@inicio = '', NULL, @inicio), Termino = IIF(@termino = '', NULL, @termino), Lanche_Inicio = IIF(@lanche_inicio = '', NULL, @lanche_inicio), lanche_Termino = IIF(@lanche_termino = '', NULL, @lanche_termino), Almoco_Inicio = IIF(@almoco_inicio = '', NULL, @almoco_inicio), Almoco_Termino = IIF(@almoco_termino = '', NULL, @almoco_termino) WHERE ID_Colaborador = @id_colaborador AND Data = @data";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            update.Parameters.AddWithValue("@data", data);
            update.Parameters.AddWithValue("@inicio", servico_inicio);
            update.Parameters.AddWithValue("@termino", servico_termino);
            update.Parameters.AddWithValue("@lanche_inicio", lanche_inicio);
            update.Parameters.AddWithValue("@lanche_termino", lanche_termino);
            update.Parameters.AddWithValue("@almoco_inicio", almoco_inicio);
            update.Parameters.AddWithValue("@almoco_termino", almoco_termino);
            update.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Registros atualizados com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public Expediente TrazerExpedienteDoColaborador(int id_colaborador, DateTime Data)
        {
            Expediente Expediente = new Expediente();
            string comando = "SELECT Status, Data, Previsao_Inicio, Inicio, Previsao_Termino, Termino, Prev_Lanche_Inicio, Lanche_inicio, Prev_lanche_Termino, Lanche_Termino, Prev_Almoco_Inicio, Almoco_Inicio, Prev_Almoco_Termino, Almoco_Termino FROM tbl_Expediente WHERE ID_Colaborador = @id_colaborador AND Data = CONVERT(DATE, @data)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@data", Data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                string status = leitor[0].ToString();
                string data = leitor[1].ToString();

                DateTime previsao_inicio = new DateTime();
                DateTime inicio = new DateTime();
                DateTime previsao_termino = new DateTime();
                DateTime termino = new DateTime();
                DateTime previsao_lanche_inicio = new DateTime();
                DateTime lanche_inicio = new DateTime();
                DateTime previsao_lanche_termino = new DateTime();
                DateTime lanche_termino = new DateTime();
                DateTime previsao_almoco_inicio = new DateTime();
                DateTime almoco_inicio = new DateTime();
                DateTime previsao_almoco_termino = new DateTime();
                DateTime almoco_termino = new DateTime();

                try { previsao_inicio = Convert.ToDateTime(leitor[2].ToString()); } catch { }
                try { inicio = Convert.ToDateTime(leitor[3].ToString()); } catch { }
                try { previsao_termino = Convert.ToDateTime(leitor[4].ToString()); } catch { }
                try { termino = Convert.ToDateTime(leitor[5].ToString()); } catch { }
                try { previsao_lanche_inicio = Convert.ToDateTime(leitor[6].ToString()); } catch { }
                try { lanche_inicio = Convert.ToDateTime(leitor[7].ToString()); } catch { }
                try { previsao_lanche_termino = Convert.ToDateTime(leitor[8].ToString()); } catch { }
                try { lanche_termino = Convert.ToDateTime(leitor[9].ToString()); } catch { }
                try { previsao_almoco_inicio = Convert.ToDateTime(leitor[10].ToString()); } catch { }
                try { almoco_inicio = Convert.ToDateTime(leitor[11].ToString()); } catch { }
                try { previsao_almoco_termino = Convert.ToDateTime(leitor[12].ToString()); } catch { }
                try { almoco_termino = Convert.ToDateTime(leitor[13].ToString()); } catch { }

                Expediente.Status = status;
                Expediente.Data = data;
                try { Expediente.Previsao_Inicio = previsao_inicio; } catch { }
                try { Expediente.Inicio = inicio; } catch { }
                try { Expediente.Previsao_Termino = previsao_termino; } catch { }
                try { Expediente.Termino = termino; } catch { }
                try { Expediente.Previsao_Lanche_Inicio = previsao_lanche_inicio; } catch { }
                try { Expediente.Lanche_Inicio = lanche_inicio; } catch { }
                try { Expediente.Previsao_Lanche_Termino = previsao_lanche_termino; } catch { }
                try { Expediente.Lanche_Termino = lanche_termino; } catch { }
                try { Expediente.Previsao_Almoco_Inicio = previsao_almoco_inicio; } catch { }
                try { Expediente.Almoco_Inicio = almoco_inicio; } catch { }
                try { Expediente.Previsao_Almoco_Termino = previsao_almoco_termino; } catch { }
                try { Expediente.Almoco_Termino = almoco_termino; } catch { }
            }
            leitor.Close();
            conexao.Desconectar();

            return Expediente;
        }

        public double CalcularHorasExtras(Expediente Expediente)
        {
            double servico;
            double previsao_servico;
            double lanche;
            double previsao_lanche;
            double almoco;
            double previsao_almoco;

            double tolerancia = Convert.ToDouble(ObterValorDoParametro("Tolerância legal - Ponto eletrônico"));
            double tolerancia_intervalos = Convert.ToDouble(ObterValorDoParametro("Margem de erro para o ponto eletrônico"));

            double extra = 0;

            DateTime data = Convert.ToDateTime(Expediente.Data);
            CultureInfo cultura = new CultureInfo("pt-BR");
            DateTimeFormatInfo formato = cultura.DateTimeFormat;

            string dia_da_semana = formato.GetDayName(data.DayOfWeek).PrimeiraLetraMaiuscula();
            bool feriado = VerificarFeriadoComLojaAberta(data);
            bool folga;
            if (Expediente.Status == "Folga" || Expediente.Status == "Feriado") { folga = true; }
            else { folga = false; }

            if (!folga)
            {
                if (Expediente.Inicio > Expediente.Previsao_Inicio && Expediente.Previsao_Inicio.AddMinutes(tolerancia) > Expediente.Inicio
                    || Expediente.Inicio < Expediente.Previsao_Inicio && Expediente.Previsao_Inicio.AddMinutes(-tolerancia) < Expediente.Inicio)
                { Expediente.Inicio = Expediente.Previsao_Inicio; } // 08:00

                if (Expediente.Termino > Expediente.Previsao_Termino && Expediente.Previsao_Termino.AddMinutes(tolerancia) > Expediente.Termino
                    || Expediente.Termino < Expediente.Previsao_Termino && Expediente.Previsao_Termino.AddMinutes(-tolerancia) < Expediente.Termino)
                { Expediente.Termino = Expediente.Previsao_Termino; } // 18:00

                if (Expediente.Almoco_Inicio > Expediente.Previsao_Almoco_Inicio && Expediente.Previsao_Almoco_Inicio.AddMinutes(tolerancia_intervalos) > Expediente.Almoco_Inicio
                || Expediente.Almoco_Inicio < Expediente.Previsao_Almoco_Inicio && Expediente.Previsao_Almoco_Inicio.AddMinutes(-tolerancia_intervalos) < Expediente.Almoco_Inicio)
                {
                    Expediente.Almoco_Inicio = Expediente.Previsao_Almoco_Inicio;
                }

                if (Expediente.Almoco_Termino > Expediente.Previsao_Almoco_Termino && Expediente.Previsao_Almoco_Termino.AddMinutes(tolerancia_intervalos) > Expediente.Almoco_Termino
                    || Expediente.Almoco_Termino < Expediente.Previsao_Almoco_Termino && Expediente.Previsao_Almoco_Termino.AddMinutes(-tolerancia_intervalos) < Expediente.Almoco_Termino)
                {
                    Expediente.Almoco_Termino = Expediente.Previsao_Almoco_Termino;
                }

                if (Expediente.Lanche_Inicio > Expediente.Previsao_Lanche_Inicio && Expediente.Previsao_Lanche_Inicio.AddMinutes(tolerancia_intervalos) > Expediente.Lanche_Inicio
                || Expediente.Lanche_Inicio < Expediente.Previsao_Lanche_Inicio && Expediente.Previsao_Lanche_Inicio.AddMinutes(-tolerancia_intervalos) < Expediente.Lanche_Inicio)
                {
                    Expediente.Lanche_Inicio = Expediente.Previsao_Lanche_Inicio;
                }

                if (Expediente.Lanche_Termino > Expediente.Previsao_Lanche_Termino && Expediente.Previsao_Lanche_Termino.AddMinutes(tolerancia_intervalos) > Expediente.Lanche_Termino
                    || Expediente.Lanche_Termino < Expediente.Previsao_Lanche_Termino && Expediente.Previsao_Lanche_Termino.AddMinutes(-tolerancia_intervalos) < Expediente.Lanche_Termino)
                {
                    Expediente.Lanche_Termino = Expediente.Previsao_Lanche_Termino;
                }

                previsao_almoco = Expediente.Previsao_Almoco_Termino.Subtract(Expediente.Previsao_Almoco_Inicio).TotalHours;
                almoco = Expediente.Almoco_Termino.Subtract(Expediente.Almoco_Inicio).TotalHours;

                previsao_lanche = Expediente.Previsao_Lanche_Termino.Subtract(Expediente.Previsao_Lanche_Inicio).TotalHours;
                lanche = Expediente.Lanche_Termino.Subtract(Expediente.Lanche_Inicio).TotalHours;

                servico = Expediente.Termino.Subtract(Expediente.Inicio).TotalHours; //10 horas
                previsao_servico = Expediente.Previsao_Termino.Subtract(Expediente.Previsao_Inicio).TotalHours;

                servico = servico - lanche - almoco;
                previsao_servico = previsao_servico - previsao_lanche - previsao_almoco;

                double saldo = servico - previsao_servico;

                if (dia_da_semana != "Domingo" && !feriado) { extra = saldo; }
            }

            return extra;
        }

        public void AtualizarBancoDeHoras(int id_colaborador, Expediente Expediente)
        {
            decimal horas = Convert.ToDecimal(CalcularHorasExtras(Expediente));

            if (horas != 0)
            {
                string comando = "UPDATE tbl_Colaboradores SET Banco_Horas = Banco_Horas + @horas WHERE ID_Colaborador = @id_colaborador";
                SqlCommand update = new SqlCommand(comando, conexao.Conectar());
                update.Parameters.AddWithValue("@horas", horas);
                update.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                update.ExecuteNonQuery();

                conexao.Desconectar();
            }
        }

        #endregion

        #region Métodos do Formulário Colaboradores

        public List<string> preencherComboCargosPorSetor(string setor)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Cargo FROM tbl_Cargos WHERE ID_Setor = (SELECT ID_Setor FROM tbl_Setores WHERE Nome_Setor = @setor) ORDER BY Cargo";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@setor", setor);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<Colaborador> ListaDeColaboradores(bool inativos)
        {
            string comando;

            if (inativos)
            {
                comando = "SELECT ID_Colaborador, Nome_Colaborador + ' ' + Sobrenome AS Colaborador, (SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo) AS Cargo, (SELECT Nome_Setor FROM tbl_Setores WHERE ID_Setor = (SELECT ID_Setor FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo)) AS Setor, Matricula, Ativacao FROM tbl_Colaboradores ORDER BY Colaborador";
            }
            else
            {
                comando = "SELECT ID_Colaborador, Nome_Colaborador + ' ' + Sobrenome AS Colaborador, (SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo) AS Cargo, (SELECT Nome_Setor FROM tbl_Setores WHERE ID_Setor = (SELECT ID_Setor FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo)) AS Setor, Matricula, Ativacao FROM tbl_Colaboradores WHERE Ativacao = 1 ORDER BY Colaborador";

            }
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            List<Colaborador> Colaboradores = new List<Colaborador>();

            while (leitor.Read())
            {
                Colaboradores.Add(new Colaborador
                {
                    ID_Colaborador = Convert.ToInt32(leitor[0]),
                    Nome_Colaborador = leitor[1].ToString(),
                    Cargo = leitor[2].ToString(),
                    Setor = leitor[3].ToString(),
                    Matricula = leitor[4].ToString(),
                    Ativacao = Convert.ToBoolean(leitor[5])
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return Colaboradores;
        }

        public Colaborador TrazerInformacoesDoColaborador(int id_colaborador)
        {
            Colaborador colaborador = new Colaborador();
            string comando = "SELECT Nome_Colaborador, (SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo) AS Cargo, Aniversario, Login_Sistema, Senha, Endereco, Telefone, Email, Mes_Ferias, Salario, Data_Admissao, Formacao,CPF,RG,Comportamento, Cod_Banco,Num_Agencia,Num_Conta,Chave_Pix, Tipo_ChavePix, CTPS,Serie_CTPS,pis,Titulo_Eleitor,zona,Sessao,CNH,Categoria_CNH,Val_CNH, Filhos,Sobrenome,Dia_Folga,Impressao_Digital1, Impressao_Digital2, Impressao_Digital3, Matricula, Banco_Horas, Bairro, Numero, Estado_Civil, Celular, CEP, Cidade, Estado, (SELECT Nome_Setor FROM tbl_Setores WHERE ID_Setor = (SELECT ID_Setor FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo)), Possui_CNH FROM tbl_Colaboradores WHERE ID_Colaborador = @id_colaborador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                //Informações principais
                colaborador.Nome_Colaborador = leitor[0].ToString();
                colaborador.Sobrenome = leitor[30].ToString();
                colaborador.CPF = leitor[12].ToString();
                colaborador.RG = leitor[13].ToString();
                colaborador.Estado_Civil = leitor[39].ToString();
                colaborador.Aniversario = Convert.ToDateTime(leitor[2].ToString());
                colaborador.Email = leitor[7].ToString();
                colaborador.Telefone = leitor[6].ToString();
                colaborador.Celular = leitor[40].ToString();
                colaborador.Filhos = Convert.ToInt32(leitor[29]);
                colaborador.Formacao = leitor[11].ToString();
                colaborador.Endereco = leitor[5].ToString();
                colaborador.Numero = leitor[38].ToString();
                colaborador.CEP = leitor[41].ToString();
                colaborador.Bairro = leitor[37].ToString();
                colaborador.Cidade = leitor[42].ToString();
                colaborador.Estado = leitor[43].ToString();

                //Informações complementares
                colaborador.Possui_CNH = Convert.ToBoolean(leitor[45]);
                if (colaborador.Possui_CNH)
                {
                    colaborador.CNH = leitor[26].ToString();
                    colaborador.Categoria_CNH = leitor[27].ToString();
                    colaborador.Validade_CNH = Convert.ToDateTime(leitor[28].ToString());
                }
                colaborador.Titulo_Eleitor = leitor[23].ToString();
                colaborador.Sessao_Titulo = leitor[25].ToString();
                colaborador.Zona_Titulo = leitor[24].ToString();

                //Informações profissionais
                colaborador.Matricula = leitor[35].ToString();
                colaborador.Setor = leitor[44].ToString();
                colaborador.Cargo = leitor[1].ToString();
                colaborador.Data_Admissao = Convert.ToDateTime(leitor[10].ToString());
                colaborador.Folga = leitor[31].ToString();
                colaborador.Mes_Ferias = leitor[8].ToString();
                colaborador.Comportamento = Convert.ToDecimal(leitor[14]);
                colaborador.Banco_Horas = Convert.ToDecimal(leitor[36]);

                //Informações financeiras
                colaborador.Codigo_Banco = leitor[15].ToString();
                colaborador.Agencia_Banco = leitor[16].ToString();
                colaborador.Conta_Banco = leitor[17].ToString();
                colaborador.Chave_Pix = leitor[18].ToString();
                colaborador.Tipo_ChavePix = leitor[19].ToString();
                colaborador.Salario = Convert.ToDecimal(leitor[9]);
                colaborador.CTPS = leitor[20].ToString();
                colaborador.Serie_CTPS = leitor[21].ToString();
                colaborador.PIS = leitor[22].ToString();


                //Informações do sistema
                colaborador.Login = leitor[3].ToString();
                colaborador.Senha = leitor[4].ToString();
                colaborador.Digital1 = leitor[32].ToString();
                colaborador.Digital2 = leitor[33].ToString();
                colaborador.Digital3 = leitor[34].ToString();
            }
            leitor.Close();

            conexao.Desconectar();

            return colaborador;
        }

        public void CadastrarColaborador(Colaborador colaborador)
        {
            string comando;
            if (colaborador.Possui_CNH)
            {
                comando = "INSERT INTO tbl_Colaboradores (Nome_Colaborador, ID_Cargo, Aniversario, Login_Sistema, Senha, Endereco, Telefone, Email, Mes_Ferias, Salario, Data_Admissao, Formacao, CPF, RG, Comportamento, Cod_Banco, Num_Agencia, Num_Conta, Chave_Pix, Tipo_ChavePix, CTPS, Serie_CTPS, pis, Titulo_Eleitor, Zona, Sessao, CNH, Categoria_CNH, Val_CNH, Filhos,Sobrenome, Impressao_Digital1, Impressao_Digital2, Impressao_Digital3, Matricula, Bairro, Numero, Estado_Civil, Celular, CEP, Cidade, Estado, Banco_Horas, Possui_CNH) VALUES (@nome, (SELECT ID_Cargo FROM tbl_Cargos WHERE Cargo = @cargo), @aniversario, @login, @senha, @endereco, @telefone, @email, @ferias, @salario, @admissao, @formacao, @cpf, @rg, @comportamento, @banco, @agencia, @conta, @pix, @chave, @ctps, @serie, @pis, @titulo, @zona, @sessao, @cnh, @categoria, @validade, @filhos, @sobrenome, @digital1, @digital2, @digital3, @matricula, @bairro, @numero, @estado_civil, @celular, @cep, @cidade, @estado, @horas, @possui_cnh)";
            }
            else
            {
                comando = "INSERT INTO tbl_Colaboradores (Nome_Colaborador, ID_Cargo, Aniversario, Login_Sistema, Senha, Endereco, Telefone, Email, Mes_Ferias, Salario, Data_Admissao, Formacao, CPF, RG, Comportamento, Cod_Banco, Num_Agencia, Num_Conta, Chave_Pix, Tipo_ChavePix, CTPS, Serie_CTPS, pis, Titulo_Eleitor, Zona, Sessao, Filhos, Sobrenome, Impressao_Digital1, Impressao_Digital2, Impressao_Digital3, Matricula, Bairro, Numero, Estado_Civil, Celular, CEP, Cidade, Estado, Banco_Horas, Possui_CNH) VALUES (@nome, (SELECT ID_Cargo FROM tbl_Cargos WHERE Cargo = @cargo), @aniversario, @login, @senha, @endereco, @telefone, @email, @ferias, @salario, @admissao, @formacao, @cpf, @rg, @comportamento, @banco, @agencia, @conta, @pix, @chave, @ctps, @serie, @pis, @titulo, @zona, @sessao, @filhos, @sobrenome, @digital1, @digital2, @digital3, @matricula, @bairro, @numero, @estado_civil, @celular, @cep, @cidade, @estado, @horas, @possui_cnh)";
            }


            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@nome", colaborador.Nome_Colaborador);
            insert.Parameters.AddWithValue("@cargo", colaborador.Cargo);
            insert.Parameters.AddWithValue("@aniversario", colaborador.Aniversario);
            insert.Parameters.AddWithValue("@login", colaborador.Login);
            insert.Parameters.AddWithValue("@senha", colaborador.Senha);
            insert.Parameters.AddWithValue("@endereco", colaborador.Endereco);
            insert.Parameters.AddWithValue("@telefone", colaborador.Telefone);
            insert.Parameters.AddWithValue("@email", colaborador.Email);
            insert.Parameters.AddWithValue("@ferias", colaborador.Mes_Ferias);
            insert.Parameters.AddWithValue("@salario", colaborador.Salario);
            insert.Parameters.AddWithValue("@admissao", colaborador.Data_Admissao);
            insert.Parameters.AddWithValue("@formacao", colaborador.Formacao);
            insert.Parameters.AddWithValue("@cpf", colaborador.CPF);
            insert.Parameters.AddWithValue("@rg", colaborador.RG);
            insert.Parameters.AddWithValue("@comportamento", colaborador.Comportamento);
            insert.Parameters.AddWithValue("@banco", colaborador.Codigo_Banco);
            insert.Parameters.AddWithValue("@agencia", colaborador.Agencia_Banco);
            insert.Parameters.AddWithValue("@conta", colaborador.Conta_Banco);
            insert.Parameters.AddWithValue("@pix", colaborador.Chave_Pix);
            insert.Parameters.AddWithValue("@chave", colaborador.Tipo_ChavePix);
            insert.Parameters.AddWithValue("@ctps", colaborador.CTPS);
            insert.Parameters.AddWithValue("@serie", colaborador.Serie_CTPS);
            insert.Parameters.AddWithValue("@pis", colaborador.PIS);
            insert.Parameters.AddWithValue("@titulo", colaborador.Titulo_Eleitor);
            insert.Parameters.AddWithValue("@zona", colaborador.Zona_Titulo);
            insert.Parameters.AddWithValue("@sessao", colaborador.Sessao_Titulo);
            insert.Parameters.AddWithValue("@possui_cnh", colaborador.Possui_CNH);

            if (colaborador.Possui_CNH)
            {

                insert.Parameters.AddWithValue("@cnh", colaborador.CNH);
                insert.Parameters.AddWithValue("@categoria", colaborador.Categoria_CNH);
                insert.Parameters.AddWithValue("@validade", colaborador.Validade_CNH);
            }

            insert.Parameters.AddWithValue("@filhos", colaborador.Filhos);
            insert.Parameters.AddWithValue("@sobrenome", colaborador.Sobrenome);
            insert.Parameters.AddWithValue("@digital1", colaborador.Digital1);
            insert.Parameters.AddWithValue("@digital2", colaborador.Digital2);
            insert.Parameters.AddWithValue("@digital3", colaborador.Digital3);
            insert.Parameters.AddWithValue("@matricula", colaborador.Matricula);
            insert.Parameters.AddWithValue("@bairro", colaborador.Bairro);
            insert.Parameters.AddWithValue("@numero", colaborador.Numero);
            insert.Parameters.AddWithValue("@estado_civil", colaborador.Estado_Civil);
            insert.Parameters.AddWithValue("@celular", colaborador.Celular);
            insert.Parameters.AddWithValue("@cep", colaborador.CEP);
            insert.Parameters.AddWithValue("@cidade", colaborador.Cidade);
            insert.Parameters.AddWithValue("@estado", colaborador.Estado);
            insert.Parameters.AddWithValue("@horas", colaborador.Banco_Horas);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Colaborador cadastrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void EditarColaborador(Colaborador colaborador)
        {
            string comando;
            if (colaborador.Possui_CNH)
            {
                comando = "UPDATE tbl_Colaboradores SET Nome_Colaborador = @nome, ID_Cargo = (SELECT ID_Cargo FROM tbl_Cargos WHERE Cargo = @cargo), Aniversario = @aniversario, Login_Sistema = @login, Senha = @senha, Endereco = @endereco, Telefone = @telefone, Email = @email, Mes_Ferias = @ferias, Salario = @salario, Formacao = @formacao, CPF = @cpf, RG = @rg, Cod_Banco = @banco, Num_Agencia = @agencia, Num_Conta = @conta, Chave_Pix = @pix, Tipo_ChavePix = @chave, CTPS = @ctps, Serie_CTPS = @serie, PIS = @pis, Titulo_Eleitor = @titulo, Zona = @zona, Sessao = @sessao, CNH = @cnh, Categoria_CNH = @categoria, Val_CNH = @validade, Filhos = @filhos, Sobrenome = @sobrenome, Impressao_Digital1 = @digital1, Impressao_Digital2 = @digital2, Impressao_Digital3 = @digital3, Matricula = @matricula, Bairro = @bairro, Numero = @numero, Estado_Civil = @estado_civil, Celular = @celular, CEP = @cep, Cidade = @cidade, Estado = @estado, Data_Admissao = @admissao, Possui_CNH = @possui_cnh WHERE ID_Colaborador = @id_colaborador";
            }
            else
            {
                comando = "UPDATE tbl_Colaboradores SET Nome_Colaborador = @nome, ID_Cargo = (SELECT ID_Cargo FROM tbl_Cargos WHERE Cargo = @cargo), Aniversario = @aniversario, Login_Sistema = @login, Senha = @senha, Endereco = @endereco, Telefone = @telefone, Email = @email, Mes_Ferias = @ferias, Salario = @salario, Formacao = @formacao, CPF = @cpf, RG = @rg, Cod_Banco = @banco, Num_Agencia = @agencia, Num_Conta = @conta, Chave_Pix = @pix, Tipo_ChavePix = @chave, CTPS = @ctps, Serie_CTPS = @serie, PIS = @pis, Titulo_Eleitor = @titulo, Zona = @zona, Sessao = @sessao, Filhos = @filhos, Sobrenome = @sobrenome, Impressao_Digital1 = @digital1, Impressao_Digital2 = @digital2, Impressao_Digital3 = @digital3, Matricula = @matricula, Bairro = @bairro, Numero = @numero, Estado_Civil = @estado_civil, Celular = @celular, CEP = @cep, Cidade = @cidade, Estado = @estado, Data_Admissao = @admissao, Possui_CNH = @possui_cnh WHERE ID_Colaborador = @id_colaborador";
            }

            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@id_colaborador", colaborador.ID_Colaborador);
            insert.Parameters.AddWithValue("@nome", colaborador.Nome_Colaborador);
            insert.Parameters.AddWithValue("@cargo", colaborador.Cargo);
            insert.Parameters.AddWithValue("@aniversario", colaborador.Aniversario);
            insert.Parameters.AddWithValue("@login", colaborador.Login);
            insert.Parameters.AddWithValue("@senha", colaborador.Senha);
            insert.Parameters.AddWithValue("@endereco", colaborador.Endereco);
            insert.Parameters.AddWithValue("@telefone", colaborador.Telefone);
            insert.Parameters.AddWithValue("@email", colaborador.Email);
            insert.Parameters.AddWithValue("@ferias", colaborador.Mes_Ferias);
            insert.Parameters.AddWithValue("@salario", colaborador.Salario);
            insert.Parameters.AddWithValue("@formacao", colaborador.Formacao);
            insert.Parameters.AddWithValue("@cpf", colaborador.CPF);
            insert.Parameters.AddWithValue("@rg", colaborador.RG);
            insert.Parameters.AddWithValue("@banco", colaborador.Codigo_Banco);
            insert.Parameters.AddWithValue("@agencia", colaborador.Agencia_Banco);
            insert.Parameters.AddWithValue("@conta", colaborador.Conta_Banco);
            insert.Parameters.AddWithValue("@pix", colaborador.Chave_Pix);
            insert.Parameters.AddWithValue("@chave", colaborador.Tipo_ChavePix);
            insert.Parameters.AddWithValue("@ctps", colaborador.CTPS);
            insert.Parameters.AddWithValue("@serie", colaborador.Serie_CTPS);
            insert.Parameters.AddWithValue("@pis", colaborador.PIS);
            insert.Parameters.AddWithValue("@titulo", colaborador.Titulo_Eleitor);
            insert.Parameters.AddWithValue("@zona", colaborador.Zona_Titulo);
            insert.Parameters.AddWithValue("@sessao", colaborador.Sessao_Titulo);
            insert.Parameters.AddWithValue("@possui_cnh", colaborador.Possui_CNH);

            if (colaborador.Possui_CNH)
            {

                insert.Parameters.AddWithValue("@cnh", colaborador.CNH);
                insert.Parameters.AddWithValue("@categoria", colaborador.Categoria_CNH);
                insert.Parameters.AddWithValue("@validade", colaborador.Validade_CNH);
            }

            insert.Parameters.AddWithValue("@filhos", colaborador.Filhos);
            insert.Parameters.AddWithValue("@sobrenome", colaborador.Sobrenome);
            insert.Parameters.AddWithValue("@digital1", colaborador.Digital1);
            insert.Parameters.AddWithValue("@digital2", colaborador.Digital2);
            insert.Parameters.AddWithValue("@digital3", colaborador.Digital3);
            insert.Parameters.AddWithValue("@matricula", colaborador.Matricula);
            insert.Parameters.AddWithValue("@bairro", colaborador.Bairro);
            insert.Parameters.AddWithValue("@numero", colaborador.Numero);
            insert.Parameters.AddWithValue("@estado_civil", colaborador.Estado_Civil);
            insert.Parameters.AddWithValue("@celular", colaborador.Celular);
            insert.Parameters.AddWithValue("@cep", colaborador.CEP);
            insert.Parameters.AddWithValue("@cidade", colaborador.Cidade);
            insert.Parameters.AddWithValue("@estado", colaborador.Estado);
            insert.Parameters.AddWithValue("@admissao", colaborador.Data_Admissao);
            insert.Parameters.AddWithValue("@horas", colaborador.Banco_Horas);

            try
            {
                insert.ExecuteNonQuery();
            }
            catch (SqlException e)
            {
                MessageBox.Show(e.Message);
            }


            conexao.Desconectar();

            MessageBox.Show("Informações do colaborador editadas com sucesso!", "Editado!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<int> ListaDeAcessosDoColaborador(int id_colaborador)
        {
            List<int> Acessos = new List<int>();
            string comando = "SELECT ID_Acesso FROM tbl_PermissoesDeAcesso WHERE ID_Colaborador = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id_colaborador);

            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Acessos.Add(Convert.ToInt32(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();

            return Acessos;
        }

        public List<int> ListaDeAcessosDoColaboradorPelaMatricula()
        {
            List<int> Acessos = new List<int>();
            string comando = "SELECT ID_Acesso FROM tbl_PermissoesDeAcesso WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", Program.matricula);

            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Acessos.Add(Convert.ToInt32(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();

            return Acessos;
        }

        public List<Acesso> ListaDeAcessos()
        {
            List<Acesso> Acessos = new List<Acesso>();
            string comando = "SELECT ID_Acesso, Descricao, Requisito, Status, ID_Requisito, Categoria FROM tbl_Acessos ORDER BY Descricao";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());

            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                int id_requisito = 0;
                bool requisito = Convert.ToBoolean(leitor[2]);
                if (requisito) { id_requisito = Convert.ToInt32(leitor[4]); }

                Acessos.Add(new Acesso
                {
                    ID_Acesso = Convert.ToInt32(leitor[0]),
                    Descricao = leitor[1].ToString(),
                    Requisito = requisito,
                    Status = leitor[3].ToString(),
                    ID_Requisito = id_requisito,
                    Categoria = leitor[5].ToString(),
                });
            }
            leitor.Close();
            conexao.Desconectar();

            return Acessos;
        }

        public List<string> CategoriasDeAcessos()
        {
            List<string> Categorias = new List<string>();
            string comando = "SELECT DISTINCT Categoria FROM tbl_Acessos ORDER BY Categoria";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Categorias.Add(leitor[0].ToString());
            }
            leitor.Close();
            conexao.Desconectar();

            return Categorias;
        }

        public void AdicionarPermissaoDeAcesso(Acesso acesso)
        {
            string comando = "INSERT INTO tbl_Acessos (Descricao, Categoria, Status, Requisito) VALUES (@descricao, @categoria, 'Privado', 0)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@descricao", acesso.Descricao);
            insert.Parameters.AddWithValue("@categoria", acesso.Categoria);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Restrição de acesso registrada.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void AlterarAcessosDoColaborador(int id_colaborador, List<int> Permissoes)
        {
            string cmd = "DELETE FROM tbl_PermissoesDeAcesso WHERE ID_Colaborador = @id_colaborador";
            SqlCommand delete = new SqlCommand(cmd, conexao.Conectar());
            delete.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            delete.ExecuteNonQuery();

            foreach (int id_acesso in Permissoes)
            {
                string comando = "INSERT INTO tbl_PermissoesDeAcesso (ID_Colaborador, ID_Acesso) VALUES (@id_colaborador, @id_acesso)";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                insert.Parameters.AddWithValue("@id_acesso", id_acesso);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
            MessageBox.Show("As restrições de acesso foram atualizadas.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void AlterarAtivacaoDoColaborador(int id_colaborador, bool ativacao)
        {
            string comando = "UPDATE tbl_Colaboradores SET Ativacao = @ativacao WHERE ID_Colaborador = @id_colaborador";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@ativacao", ativacao);
                update.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public List<string> MesesDaFolhaDePonto()
        {
            List<string> Meses = new List<string>();

            string comando = "SELECT DISTINCT MONTH(Data), CONVERT(VARCHAR, UPPER(FORMAT(Data, 'MMMM', 'pt-BR'))) + '/' + CONVERT(VARCHAR, YEAR(Data)) AS Periodo FROM tbl_Expediente ORDER BY MONTH(Data) DESC";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Meses.Add(leitor[1].ToString());
                    }
                }
            }

            conexao.Desconectar();

            return Meses;
        }


        #region Ponto eletrônico e Banco de horas

        public void AtualizarBancoDeHoras(double horas, int id_colaborador)
        {
            string comando = "UPDATE tbl_Colaboradores SET Banco_Horas = Banco_Horas + @horas WHERE ID_Colaborador = @id_colaborador";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@horas", horas);
                update.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ImprimirFolhaDePonto(int mes, int ano, int id_colaborador, bool impressao)
        {
            DateTime data_anterior = new DateTime(ano, mes, 1);
            int dias = DateTime.DaysInMonth(ano, mes);
            string Mes = data_anterior.ToString(@"MMMM").PrimeiraLetraMaiuscula();
            string periodo = data_anterior.ToShortDateString() + " a " + new DateTime(ano, mes, dias).ToShortDateString();

            string colaborador = TrazerColaboradorPeloID(id_colaborador);
            string matricula = TrazerMatriculaPeloID(id_colaborador);

            Hora_Extra Extra = CalcularHorasExtras(TrazerExpedientesDoColaborador(mes, ano, id_colaborador));
            double extra_100 = Extra.Extra_100;
            double extra_50 = Extra.Extra_50;

            // AtualizarBancoDeHoras(extra_50, id_colaborador);
            double banco = TrazerSaldoDoBancoDeHoras(id_colaborador)/* + extra_50*/;

            DateTime data = DateTime.Now;
            formRepFolhaDePonto relatorio = new formRepFolhaDePonto();

            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data.ToShortDateString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("mes", Mes));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("periodo", periodo));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("colaborador", colaborador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("matricula", matricula));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("extra_50", extra_50.ToString("F")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("extra_100", extra_100.ToString("F")));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("banco", banco.ToString("F")));

            relatorio.FolhaDePontoTableAdapter.Fill(relatorio.dataSetFolhaDePonto.FolhaDePonto, mes, ano, id_colaborador);
            relatorio.reportViewer1.RefreshReport();

            if (impressao)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_A4;
                autoprintme.Print();
            }
            else
            {
                string[] partir = colaborador.Split(' ');
                colaborador = partir[0];

                var bytes = relatorio.reportViewer1.LocalReport.Render("PDF");
                string arquivo = "folha " + colaborador + " " + Mes + ".pdf";

                SaveFileDialog dialogo = new SaveFileDialog();
                dialogo.FileName = arquivo;

                if (dialogo.ShowDialog() == DialogResult.OK)
                {
                    arquivo = dialogo.FileName;
                    File.WriteAllBytes(arquivo, bytes);

                    MessageBox.Show("O arquivo foi salvo\r\nNa pasta " + arquivo + ".", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        public List<Expediente> TrazerExpedientesDoColaborador(int mes, int ano, int id_colaborador)
        {
            string comando = "SELECT Status, Data, Previsao_Inicio, Inicio, Previsao_Termino, Termino, Prev_Lanche_Inicio, Lanche_inicio, Prev_lanche_Termino, Lanche_Termino, Prev_Almoco_Inicio, Almoco_Inicio, Prev_Almoco_Termino, Almoco_Termino FROM tbl_Expediente WHERE ID_Colaborador = @id_colaborador AND MONTH(Data) = @mes AND YEAR(Data) = @ano";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@mes", mes);
            select.Parameters.AddWithValue("@ano", ano);
            SqlDataReader leitor = select.ExecuteReader();
            List<Expediente> Expedientes = new List<Expediente>();

            while (leitor.Read())
            {
                string status = leitor[0].ToString();
                string data = leitor[1].ToString();

                DateTime previsao_inicio = new DateTime();
                DateTime inicio = new DateTime();
                DateTime previsao_termino = new DateTime();
                DateTime termino = new DateTime();
                DateTime previsao_lanche_inicio = new DateTime();
                DateTime lanche_inicio = new DateTime();
                DateTime previsao_lanche_termino = new DateTime();
                DateTime lanche_termino = new DateTime();
                DateTime previsao_almoco_inicio = new DateTime();
                DateTime almoco_inicio = new DateTime();
                DateTime previsao_almoco_termino = new DateTime();
                DateTime almoco_termino = new DateTime();

                try { previsao_inicio = Convert.ToDateTime(leitor[2].ToString()); } catch { }
                try { inicio = Convert.ToDateTime(leitor[3].ToString()); } catch { }
                try { previsao_termino = Convert.ToDateTime(leitor[4].ToString()); } catch { }
                try { termino = Convert.ToDateTime(leitor[5].ToString()); } catch { }
                try { previsao_lanche_inicio = Convert.ToDateTime(leitor[6].ToString()); } catch { }
                try { lanche_inicio = Convert.ToDateTime(leitor[7].ToString()); } catch { }
                try { previsao_lanche_termino = Convert.ToDateTime(leitor[8].ToString()); } catch { }
                try { lanche_termino = Convert.ToDateTime(leitor[9].ToString()); } catch { }
                try { previsao_almoco_inicio = Convert.ToDateTime(leitor[10].ToString()); } catch { }
                try { almoco_inicio = Convert.ToDateTime(leitor[11].ToString()); } catch { }
                try { previsao_almoco_termino = Convert.ToDateTime(leitor[12].ToString()); } catch { }
                try { almoco_termino = Convert.ToDateTime(leitor[13].ToString()); } catch { }

                Expediente Expediente = new Expediente();

                Expediente.Status = status;
                Expediente.Data = data;
                try { Expediente.Previsao_Inicio = previsao_inicio; } catch { }
                try { Expediente.Inicio = inicio; } catch { }
                try { Expediente.Previsao_Termino = previsao_termino; } catch { }
                try { Expediente.Termino = termino; } catch { }
                try { Expediente.Previsao_Lanche_Inicio = previsao_lanche_inicio; } catch { }
                try { Expediente.Lanche_Inicio = lanche_inicio; } catch { }
                try { Expediente.Previsao_Lanche_Termino = previsao_lanche_termino; } catch { }
                try { Expediente.Lanche_Termino = lanche_termino; } catch { }
                try { Expediente.Previsao_Almoco_Inicio = previsao_almoco_inicio; } catch { }
                try { Expediente.Almoco_Inicio = almoco_inicio; } catch { }
                try { Expediente.Previsao_Almoco_Termino = previsao_almoco_termino; } catch { }
                try { Expediente.Almoco_Termino = almoco_termino; } catch { }

                Expedientes.Add(Expediente);
            }
            leitor.Close();
            conexao.Desconectar();

            return Expedientes;
        }

        public double TrazerSaldoDoBancoDeHoras(int id_colaborador)
        {
            string comando = "SELECT ISNULL(Banco_Horas, 0) FROM tbl_Colaboradores WHERE ID_Colaborador = @id";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id", id_colaborador);
            double saldo = Convert.ToDouble(select.ExecuteScalar());

            conexao.Desconectar();

            return saldo;
        }

        public Hora_Extra CalcularHorasExtras(List<Expediente> Expedientes)
        {
            double servico;
            double previsao_servico;
            double lanche;
            double previsao_lanche;
            double almoco;
            double previsao_almoco;

            double tolerancia = Convert.ToDouble(ObterValorDoParametro("Tolerância legal - Ponto eletrônico"));
            double tolerancia_intervalos = Convert.ToDouble(ObterValorDoParametro("Margem de erro para o ponto eletrônico"));

            double extra_50 = 0;
            double extra_100 = 0;

            foreach (Expediente Expediente in Expedientes)
            {
                DateTime data = Convert.ToDateTime(Expediente.Data);
                CultureInfo cultura = new CultureInfo("pt-BR");
                DateTimeFormatInfo formato = cultura.DateTimeFormat;

                string dia_da_semana = formato.GetDayName(data.DayOfWeek).PrimeiraLetraMaiuscula();

                bool feriado = VerificarFeriadoComLojaAberta(data);
                bool folga;
                if (Expediente.Status != "Serviço") { folga = true; }
                else { folga = false; }

                if (!folga)
                {
                    if (Expediente.Inicio > Expediente.Previsao_Inicio && Expediente.Previsao_Inicio.AddMinutes(tolerancia) > Expediente.Inicio
                        || Expediente.Inicio < Expediente.Previsao_Inicio && Expediente.Previsao_Inicio.AddMinutes(-tolerancia) < Expediente.Inicio)
                    {
                        Expediente.Inicio = Expediente.Previsao_Inicio;
                    }

                    if (Expediente.Termino > Expediente.Previsao_Termino && Expediente.Previsao_Termino.AddMinutes(tolerancia) > Expediente.Termino
                        || Expediente.Termino < Expediente.Previsao_Termino && Expediente.Previsao_Termino.AddMinutes(-tolerancia) < Expediente.Termino)
                    {
                        Expediente.Termino = Expediente.Previsao_Termino;
                    }

                    if (Expediente.Almoco_Inicio > Expediente.Previsao_Almoco_Inicio && Expediente.Previsao_Almoco_Inicio.AddMinutes(tolerancia_intervalos) > Expediente.Almoco_Inicio
                    || Expediente.Almoco_Inicio < Expediente.Previsao_Almoco_Inicio && Expediente.Previsao_Almoco_Inicio.AddMinutes(-tolerancia_intervalos) < Expediente.Almoco_Inicio)
                    {
                        Expediente.Almoco_Inicio = Expediente.Previsao_Almoco_Inicio;
                    }

                    if (Expediente.Almoco_Termino > Expediente.Previsao_Almoco_Termino && Expediente.Previsao_Almoco_Termino.AddMinutes(tolerancia_intervalos) > Expediente.Almoco_Termino
                        || Expediente.Almoco_Termino < Expediente.Previsao_Almoco_Termino && Expediente.Previsao_Almoco_Termino.AddMinutes(-tolerancia_intervalos) < Expediente.Almoco_Termino)
                    {
                        Expediente.Almoco_Termino = Expediente.Previsao_Almoco_Termino;
                    }

                    if (Expediente.Lanche_Inicio > Expediente.Previsao_Lanche_Inicio && Expediente.Previsao_Lanche_Inicio.AddMinutes(tolerancia_intervalos) > Expediente.Lanche_Inicio
                    || Expediente.Lanche_Inicio < Expediente.Previsao_Lanche_Inicio && Expediente.Previsao_Lanche_Inicio.AddMinutes(-tolerancia_intervalos) < Expediente.Lanche_Inicio)
                    {
                        Expediente.Lanche_Inicio = Expediente.Previsao_Lanche_Inicio;
                    }

                    if (Expediente.Lanche_Termino > Expediente.Previsao_Lanche_Termino && Expediente.Previsao_Lanche_Termino.AddMinutes(tolerancia_intervalos) > Expediente.Lanche_Termino
                        || Expediente.Lanche_Termino < Expediente.Previsao_Lanche_Termino && Expediente.Previsao_Lanche_Termino.AddMinutes(-tolerancia_intervalos) < Expediente.Lanche_Termino)
                    {
                        Expediente.Lanche_Termino = Expediente.Previsao_Lanche_Termino;
                    }

                    previsao_almoco = Expediente.Previsao_Almoco_Termino.Subtract(Expediente.Previsao_Almoco_Inicio).TotalHours;
                    almoco = Expediente.Almoco_Termino.Subtract(Expediente.Almoco_Inicio).TotalHours;

                    previsao_lanche = Expediente.Previsao_Lanche_Termino.Subtract(Expediente.Previsao_Lanche_Inicio).TotalHours;
                    lanche = Expediente.Lanche_Termino.Subtract(Expediente.Lanche_Inicio).TotalHours;

                    servico = Expediente.Termino.Subtract(Expediente.Inicio).TotalHours; //10 horas
                    previsao_servico = Expediente.Previsao_Termino.Subtract(Expediente.Previsao_Inicio).TotalHours;

                    servico = servico - lanche - almoco;
                    previsao_servico = previsao_servico - previsao_lanche - previsao_almoco;

                    double saldo = servico - previsao_servico;

                    if (dia_da_semana == "Domingo") { extra_100 = extra_100 + servico; }
                    else if (feriado) { extra_100 = extra_100 + servico; }
                    else { extra_50 = extra_50 + saldo; }
                }
            }

            Hora_Extra Extra = new Hora_Extra();
            Extra.Extra_100 = extra_100;
            Extra.Extra_50 = extra_50;

            return Extra;
        }

        public List<DateTime> ListaDeExpedientesFuturos(int id_colaborador)
        {
            string comando = "SELECT Data FROM tbl_Expediente WHERE Inicio IS NULL AND Termino IS NULL AND Data > CONVERT(DATE, GETDATE()) AND ID_Colaborador = @id_colaborador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            SqlDataReader leitor = select.ExecuteReader();
            List<DateTime> Expedientes = new List<DateTime>();

            while (leitor.Read())
            {
                Expedientes.Add(Convert.ToDateTime(leitor[0].ToString()));
            }
            leitor.Close();

            conexao.Desconectar();

            return Expedientes;
        }

        public void ImprimirHorarioIndividual(int id_colaborador, bool impressao)
        {
            string data = DateTime.Now.ToShortDateString();
            string colaborador = TrazerColaboradorPeloID(id_colaborador) + " (" + TrazerMatriculaPeloID(id_colaborador) + ")";

            formRepHorarioIndividual relatorio = new formRepHorarioIndividual();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("colaborador", colaborador));

            relatorio.HorariosIndividuaisTableAdapter.Fill(relatorio.dataSetHorariosIndividuais.HorariosIndividuais, id_colaborador);
            relatorio.reportViewer1.RefreshReport();

            if (impressao)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_A4;
                autoprintme.Print();
            }
            else
            {
                string[] partir = colaborador.Split(' ');
                colaborador = partir[0];

                var bytes = relatorio.reportViewer1.LocalReport.Render("PDF");
                string arquivo = "horário semanal - " + colaborador + ".pdf";

                SaveFileDialog dialogo = new SaveFileDialog();
                dialogo.FileName = arquivo;

                if (dialogo.ShowDialog() == DialogResult.OK)
                {
                    arquivo = dialogo.FileName;
                    File.WriteAllBytes(arquivo, bytes);

                    MessageBox.Show("O arquivo foi salvo\r\nNa pasta " + arquivo + ".", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        public void ImprimirHorariosDoExpediente(int id_colaborador, DateTime inicio, DateTime termino, bool impressao)
        {
            List<Horario_Individual> expedientes = new List<Horario_Individual>();

            string colaborador = TrazerColaboradorEMatriculaPeloID(id_colaborador);

            string comando = "SELECT SUBSTRING(dbo.fn_Dia_Da_Semana_Extenso(Data), 1, 1) + LOWER(SUBSTRING(dbo.fn_Dia_Da_Semana_Extenso(Data), 2, LEN(dbo.fn_Dia_Da_Semana_Extenso(Data)))) AS Dia, CONVERT(VARCHAR(10), Data, 103) AS Data, IIF(Status <> 'Serviço', UPPER(Status), IIF((SELECT COUNT(*) FROM tbl_Datas WHERE Data = tbl_Expediente.Data AND Loja = 'Fechado') > 0, 'FERIADO', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Previsao_Inicio, 103)), 1, 5))) AS Inicio, IIF(Status <> 'Serviço', UPPER(Status), IIF((SELECT COUNT(*) FROM tbl_Datas WHERE Data = tbl_Expediente.Data AND Loja = 'Fechado') > 0, 'FERIADO', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Prev_Almoco_inicio, 103)), 1, 5) + ' ~ ' + SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Prev_Almoco_Termino, 103)), 1, 5))) AS Almoco, IIF(Status <> 'Serviço', UPPER(Status), IIF((SELECT COUNT(*) FROM tbl_Datas WHERE Data = tbl_Expediente.Data AND Loja = 'Fechado') > 0, 'FERIADO', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Prev_Lanche_inicio, 103)), 1, 5) + ' ~ ' + SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Prev_Lanche_Termino, 103)), 1, 5))) AS Lanche, IIF(Status <> 'Serviço', UPPER(Status), IIF((SELECT COUNT(*) FROM tbl_Datas WHERE Data = tbl_Expediente.Data AND Loja = 'Fechado') > 0, 'FERIADO', SUBSTRING(CONVERT(VARCHAR(30), CONVERT(TIME, Previsao_Termino, 103)), 1, 5))) AS Termino, IIF(Status <> 'Serviço', UPPER(Status), IIF((SELECT COUNT(*) FROM tbl_Datas WHERE Data = tbl_Expediente.Data AND Loja = 'Fechado') > 0, '00:00', dbo.fn_Converter_Minutos_Em_Horas (DATEDIFF(MI, CONVERT(TIME, Previsao_Inicio), CONVERT(TIME, Previsao_Termino)) - ISNULL(DATEDIFF(MI, CONVERT(TIME, Prev_Lanche_inicio), CONVERT(TIME, Prev_Lanche_Termino)), 0) - ISNULL(DATEDIFF(MI, CONVERT(TIME, Prev_Almoco_Inicio), CONVERT(TIME, Prev_Almoco_Termino)), 0)))) AS Horas FROM tbl_Expediente WHERE Data BETWEEN @inicio AND @termino AND ID_Colaborador = @id_colaborador";
                        
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                select.Parameters.AddWithValue("@inicio", inicio);
                select.Parameters.AddWithValue("@termino", termino);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        expedientes.Add(new Horario_Individual
                        {
                            Dia = leitor[0].ToString(),
                            Data = leitor[1].ToString(),
                            Inicio = leitor[2].ToString(),
                            Almoco = leitor[3].ToString(),
                            Lanche = leitor[4].ToString(),
                            Termino = leitor[5].ToString(),
                            Horas = leitor[6].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();
            formRepExpedientes relatorio = new formRepExpedientes();

            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("colaborador", colaborador));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("inicio", inicio.ToShortDateString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("termino", termino.ToShortDateString()));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", DateTime.Now.ToShortDateString()));

            relatorio.reportViewer1.LocalReport.DataSources.Clear();
            relatorio.reportViewer1.LocalReport.DataSources.Add(new ReportDataSource("DataSetHorarios", expedientes));

            relatorio.reportViewer1.RefreshReport();


            if (impressao)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_A4;
                autoprintme.Print();
            }
            else
            {
                try
                {
                    string[] partir = colaborador.Split(' ');
                    colaborador = partir[0];

                    var bytes = relatorio.reportViewer1.LocalReport.Render("PDF");
                    string arquivo = @"C:\Users\Administrador.WIN-IASFJOKMTG5\Desktop\Escala - " + colaborador + ".pdf";

                    File.WriteAllBytes(arquivo, bytes);
                }
                catch { }
            }

            //else
            //{
            //    string[] partir = colaborador.Split(' ');
            //    colaborador = partir[0];

            //    var bytes = relatorio.reportViewer1.LocalReport.Render("PDF");
            //    string arquivo = "horário semanal - " + colaborador + ".pdf";

            //    SaveFileDialog dialogo = new SaveFileDialog();
            //    dialogo.FileName = arquivo;

            //    //if (dialogo.ShowDialog() == DialogResult.OK)
            //    //{
            //    //    arquivo = dialogo.FileName;
            //    //    File.WriteAllBytes(arquivo, bytes);

            //    //    MessageBox.Show("O arquivo foi salvo\r\nNa pasta " + arquivo + ".", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //    //}
            //}
        }

        public void ImprimirExpedienteDoDia(DateTime data, bool impressao)
        {
            List<Expediente_do_Dia> expedientes = new List<Expediente_do_Dia>();

            string comando = "SELECT (SELECT Nome_Colaborador + '  (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Expediente.ID_Colaborador) AS Colaborador, Status, ISNULL(FORMAT(Previsao_Inicio, 'HH:mm'), '-') AS Início, ISNULL(FORMAT(Prev_Almoco_Inicio, 'HH:mm') + ' ~ ' +  FORMAT(Prev_Almoco_Termino, 'HH:mm'), '-') AS Almoço, ISNULL(FORMAT(Prev_Lanche_Inicio, 'HH:mm') + ' ~ ' +  FORMAT(Prev_lanche_Termino, 'HH:mm'), '-') AS Lanche, ISNULL(FORMAT(Previsao_Termino, 'HH:mm'), '-') AS Término FROM tbl_Expediente WHERE Data = CONVERT(DATE, @data) AND (SELECT Ativacao FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Expediente.ID_Colaborador) = 1 ORDER BY Início, Colaborador";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@data", data);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        expedientes.Add(new Expediente_do_Dia
                        {
                            Colaborador = (string)leitor[0],
                            Status = (string)leitor[1],
                            Inicio = (string)leitor[2],
                            Almoco = (string)leitor[3],
                            Lanche = (string)leitor[4],
                            Termino = (string)leitor[5],
                        });
                    }
                }
            }

            conexao.Desconectar();
            formRepHorariosDoDia relatorio = new formRepHorariosDoDia();
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data.ToShortDateString()));

            relatorio.reportViewer1.LocalReport.DataSources.Clear();
            relatorio.reportViewer1.LocalReport.DataSources.Add(new ReportDataSource("DataSetHorarios", expedientes));

            relatorio.reportViewer1.RefreshReport();


            if (impressao)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_A4;
                autoprintme.Print();
            }
            else
            {
                try
                {
                    var bytes = relatorio.reportViewer1.LocalReport.Render("PDF");
                    string arquivo = @"C:\Users\Administrador.WIN-IASFJOKMTG5\Desktop\Expediente.pdf";

                    File.WriteAllBytes(arquivo, bytes);
                }
                catch { }
            }
        }

        public void AlterarLiberacaoDoColaborador(int id_colaborador, DateTime data)
        {
            string comando = "UPDATE tbl_Expediente SET Liberacao = IIF(Liberacao = 1, 0, 1) WHERE ID_Colaborador = @id_colaborador AND Data = @data";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                update.Parameters.AddWithValue("@data", data);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public bool VerificarLiberacaoDoColaborador(int id_colaborador, DateTime data)
        {
            bool preenchido = false;

            string comando = "SELECT Liberacao FROM tbl_Expediente WHERE ID_Colaborador = @id_colaborador AND Data = @data";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                select.Parameters.AddWithValue("@data", data);

                preenchido = Convert.ToBoolean(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return preenchido;
        }

        #endregion

        #region Licenças
        public List<Licenca> ListaDeLicencas()
        {
            List<Licenca> Licencas = new List<Licenca>();
            string comando = "SELECT ID_Licenca, (SELECT Matricula FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Licencas.ID_Colaborador) AS Matricula, (SELECT Nome_Colaborador + ' ' + Sobrenome FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Licencas.ID_Colaborador) AS Colaborador, Inicio, Termino, Tipo FROM tbl_Licencas ORDER BY Inicio, Colaborador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());

            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                Licencas.Add(new Licenca
                {
                    ID_Licenca = Convert.ToInt32(leitor[0]),
                    Matricula = leitor[1].ToString(),
                    Colaborador = leitor[2].ToString(),
                    Inicio = Convert.ToDateTime(leitor[3]),
                    Termino = Convert.ToDateTime(leitor[4]),
                    Tipo = leitor[5].ToString()
                });
            }
            leitor.Close();
            conexao.Desconectar();

            return Licencas;
        }

        public List<string> TiposDeLicencas()
        {
            List<string> Tipos = new List<string>();

            string comando = "SELECT DISTINCT Tipo FROM tbl_Licencas ORDER BY Tipo";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Tipos.Add(leitor[0].ToString());
            }
            leitor.Close();
            conexao.Desconectar();

            return Tipos;
        }

        public void RegistrarLicenca(Licenca Licenca)
        {
            string comando = "INSERT INTO tbl_Licencas (ID_Colaborador, Inicio, Termino, Tipo) VALUES (@id_colaborador, @inicio, @termino, @tipo)";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_colaborador", Licenca.ID_Colaborador);
                insert.Parameters.AddWithValue("@inicio", Licenca.Inicio);
                insert.Parameters.AddWithValue("@termino", Licenca.Termino);
                insert.Parameters.AddWithValue("@tipo", Licenca.Tipo);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            LancarAfastamentoNaListaDoExpediente(Licenca);

            MessageBox.Show("Licença registrada.", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void LancarAfastamentoNaListaDoExpediente(Licenca Licenca)
        {
            string comando = "UPDATE tbl_Expediente SET Status = @status, Previsao_Inicio = NULL, Previsao_Termino = NULL, Prev_Lanche_Inicio = NULL, Prev_lanche_Termino = NULL, Prev_Almoco_Inicio = NULL, Prev_Almoco_Termino = NULL WHERE ID_Colaborador = @id_colaborador AND Data = @data";

            for (DateTime data = Licenca.Inicio.Date; data <= Licenca.Termino.Date; data = data.AddDays(1))
            {
                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@id_colaborador", Licenca.ID_Colaborador);
                    insert.Parameters.AddWithValue("@data", data.ToShortDateString());
                    insert.Parameters.AddWithValue("@status", Licenca.Tipo);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();
        }

        public void ApagarLicenca(int id_licenca)
        {
            string comando = "DELETE FROM tbl_Licencas WHERE ID_Licenca = @id";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id", id_licenca);
            delete.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Licença excluída!", "Excluído", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        #endregion

        #endregion

        #region Datas e Feriados

        public List<Data> DatasEFeriados()
        {
            string comando = "SELECT ID_Data, Descricao, Data, Loja FROM tbl_Datas WHERE YEAR(Data) = YEAR(GETDATE()) AND Data >= GETDATE()";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            List<Data> Datas = new List<Data>();
            while (leitor.Read())
            {
                Datas.Add(new Data
                {
                    ID_Data = Convert.ToInt32(leitor[0]),
                    Descricao = leitor[1].ToString(),
                    Dia = leitor[2].ToString(),
                    Loja = leitor[3].ToString()
                });
            }

            leitor.Close();
            conexao.Desconectar();
            return Datas;
        }

        public List<Data> ListaDeFeriados()
        {
            string comando = "SELECT ID_Feriado, Data, Descricao, Promocao, Loja, Tipo FROM tbl_Feriados";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            List<Data> Datas = new List<Data>();
            while (leitor.Read())
            {
                string dia;
                if (leitor[1].ToString() != string.Empty) { dia = Convert.ToDateTime(leitor[1].ToString()).ToShortDateString(); }
                else { dia = string.Empty; }

                Datas.Add(new Data
                {
                    ID_Data = Convert.ToInt32(leitor[0]),
                    Dia = dia,
                    Descricao = leitor[2].ToString(),
                    Promocao = Convert.ToBoolean(leitor[3]),
                    Loja = leitor[4].ToString(),
                    Tipo = leitor[5].ToString()
                });
            }

            leitor.Close();
            conexao.Desconectar();
            return Datas;
        }

        public bool VerificarSeFeriadosDoAnoJaForamDefinidos(int ano)
        {
            string comando = "SELECT COUNT(*) FROM tbl_Feriados WHERE (SELECT COUNT(Descricao) FROM tbl_Datas WHERE Descricao = tbl_Feriados.Descricao AND YEAR(Data) = @ano) < 1";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@ano", ano);
            decimal faltando = Convert.ToDecimal(select.ExecuteScalar());
            bool verificar;
            if (faltando > 0) { verificar = false; }
            else { verificar = true; }
            return verificar;
        }

        public List<Data> FeriadosQueFaltamDefinir(int ano)
        {
            string comando = "SELECT ID_Feriado, Data, Descricao, Loja, Tipo, Promocao, Observacao FROM tbl_Feriados WHERE (SELECT ISNULL(COUNT(*), 0) FROM tbl_Datas WHERE Descricao = tbl_Feriados.Descricao AND YEAR(Data) = @ano) = 0";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@ano", ano);
            SqlDataReader leitor = select.ExecuteReader();
            List<Data> Datas = new List<Data>();
            while (leitor.Read())
            {
                string dia;
                if (leitor[1].ToString() == "") { dia = string.Empty; }
                else
                {
                    DateTime Data = Convert.ToDateTime(leitor[1].ToString());
                    dia = new DateTime(ano, Data.Month, Data.Day).ToShortDateString();
                }
                Datas.Add(new Data
                {
                    ID_Data = Convert.ToInt32(leitor[0]),
                    Dia = dia,
                    Descricao = leitor[2].ToString(),
                    Loja = leitor[3].ToString(),
                    Tipo = leitor[4].ToString(),
                    Promocao = Convert.ToBoolean(leitor[5]),
                    Observacao = leitor[6].ToString()
                });
            }

            leitor.Close();
            conexao.Desconectar();
            return Datas;
        }

        public void CadastrarFeriado(Data Data)
        {
            string comando = "INSERT INTO tbl_Feriados (Data, Descricao, Promocao, Observacao, Loja, Tipo) VALUES (@dia, @descricao, @promocao, @obs, @loja, @tipo)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@dia", Data.Dia);
            insert.Parameters.AddWithValue("@descricao", Data.Descricao);
            insert.Parameters.AddWithValue("@promocao", Data.Promocao);
            insert.Parameters.AddWithValue("@obs", Data.Observacao);
            insert.Parameters.AddWithValue("@loja", Data.Loja);
            insert.Parameters.AddWithValue("@tipo", Data.Tipo);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Feriado cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void DefinirFeriados(List<Data> Feriados, int ano)
        {
            int i = 0;
            foreach (Data Feriado in Feriados)
            {
                if (Feriado.Dia != string.Empty)
                {
                    DateTime data_anterior = Convert.ToDateTime(Feriado.Dia);
                    DateTime data = new DateTime(ano, data_anterior.Month, data_anterior.Day);
                    string comando = "INSERT INTO tbl_Datas (Data, Descricao, Observacao, Loja, Promocao) VALUES (@data, @descricao, @observacao, @loja, @promocao)";
                    SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                    insert.Parameters.AddWithValue("@data", data);
                    insert.Parameters.AddWithValue("@descricao", Feriado.Descricao);
                    insert.Parameters.AddWithValue("@observacao", Feriado.Observacao);
                    insert.Parameters.AddWithValue("@loja", Feriado.Loja);
                    insert.Parameters.AddWithValue("@promocao", Feriado.Promocao);
                    insert.ExecuteNonQuery();
                    i++;
                }
            }

            conexao.Desconectar();

            string texto;
            if (i == Feriados.Count())
            {
                texto = "Todos os feriados do ano " + ano + " foram definidos.";
            }
            else
            {
                int faltando = Feriados.Count() - i;
                texto = i.ToString() + " feriados foram definidos.\r\nAinda falta definir " + faltando + " feriados para o ano de " + ano;
            }
            MessageBox.Show(texto, "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void DefinirFeriado(Data Feriado)
        {
            string comando = "INSERT INTO tbl_Datas (Data, Descricao, Observacao, Loja, Promocao) VALUES (@data, @descricao, @observacao, @loja, @promocao)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@data", Feriado.Dia);
            insert.Parameters.AddWithValue("@descricao", Feriado.Descricao);
            insert.Parameters.AddWithValue("@observacao", Feriado.Observacao);
            insert.Parameters.AddWithValue("@loja", Feriado.Loja);
            insert.Parameters.AddWithValue("@promocao", Feriado.Promocao);
            insert.ExecuteNonQuery();

            conexao.Desconectar();

            MessageBox.Show("Feriado definido!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public bool VerificarFeriadoComLojaFechada(DateTime data)
        {
            string comando = "SELECT COUNT(*) FROM tbl_Datas WHERE YEAR(Data) = YEAR(@data) AND MONTH(Data) = MONTH(@data) AND  DAY(Data) = DAY(@data) AND Loja = 'Fechado'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            bool verificar;
            int feriado = Convert.ToInt32(select.ExecuteScalar());
            if (feriado > 0) { verificar = true; }
            else { verificar = false; }

            conexao.Desconectar();

            return verificar;
        }

        public bool VerificarFeriadoComLojaAberta(DateTime data)
        {
            string comando = "SELECT COUNT(*) FROM tbl_Datas WHERE Data = @data AND Loja = 'Aberto' AND (SELECT Tipo FROM tbl_Feriados WHERE Data = @data) = 'Feriado'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            bool verificar;
            int feriado = Convert.ToInt32(select.ExecuteScalar());
            if (feriado > 0) { verificar = true; }
            else { verificar = false; }

            conexao.Desconectar();

            return verificar;
        }

        #endregion

        #region Métodos do Ponto Eletrônico

        #region Horas Extras
        public List<Hora_Extra> ListaDeHorasExtras(string colaborador)
        {
            List<Hora_Extra> lista = new List<Hora_Extra>();
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Tempo, Periodo FROM tbl_HorasExtras WHERE ID_colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@data", data);
            select.Parameters.AddWithValue("@colaborador", colaborador);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                lista.Add(new Hora_Extra
                {
                    Tempo = Convert.ToInt32(leitor[0]),
                    Periodo = leitor[1].ToString()
                });
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }
        #endregion

        #region Inicio do Serviço
        public string VerificarStatusDoExpediente(int id_colaborador)
        {
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Status FROM tbl_Expediente WHERE ID_Colaborador = @id_colaborador AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@data", data);
            string status = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return status;
        }
        public Expediente HoraDoServico(string colaborador)
        {
            List<Hora_Extra> lista = ListaDeHorasExtras(colaborador);
            int horas_extras = lista.Where(x => x.Periodo == "Servico_Inicio").Sum(x => x.Tempo);
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Previsao_Inicio FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);
            Expediente expediente = new Expediente();
            expediente.Previsao_Inicio = Convert.ToDateTime(select.ExecuteScalar().ToString()).AddMinutes(-horas_extras);
            conexao.Desconectar();
            return expediente;
        }
        public bool VerificarInicioDoServico(string colaborador)
        {
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Inicio FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);
            bool verificar;
            if (select.ExecuteScalar() == null) { verificar = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { verificar = false; }
            else { verificar = true; }
            conexao.Desconectar();
            return verificar;
        }
        public void RegistrarInicioDoServico(string colaborador)
        {
            string data = DateTime.Now.ToShortDateString();
            string inicio = DateTime.Now.ToString();
            string comando = "UPDATE tbl_Expediente SET Inicio = @inicio WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@inicio", inicio);
            update.Parameters.AddWithValue("@data", data);
            update.Parameters.AddWithValue("@colaborador", colaborador);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }
        #endregion

        #region Atividades
        public bool VerificarAtividadeEmAndamento(string colaborador)
        {
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Status FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Status = 'Em andamento'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);
            bool verificar;
            if (select.ExecuteScalar() == null) { verificar = false; }
            else { verificar = true; }
            conexao.Desconectar();
            return verificar;
        }
        public string NomeDaAtividadeEmAndamento(string colaborador)
        {
            string comando = "SELECT Nome_Atividade FROM tbl_Atividades WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Status = 'Em andamento')";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            string atividade = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return atividade;
        }
        public void ProximaAtividade(string colaborador)
        {
            AtividadeRealizada atividade = new AtividadeRealizada();
            string comando = "SELECT TOP (1) ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE Status = 'Pausado' AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            bool pausado;
            //try
            //{
            if (select.ExecuteScalar() == null) { pausado = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { pausado = false; }
            else { pausado = true; }
            //}
            //catch
            //{
            //    pausado = false;
            //}

            MessageBox.Show(pausado.ToString());
            if (pausado)
            {
                atividade.ID_Atividade = Convert.ToInt32(select.ExecuteScalar());
                atividade.Status = "Pausado";
            }
            else
            {
                string comando1 = "SELECT TOP (1) ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE Status = 'Pendente' AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) ORDER BY Previsao_Inicio";
                SqlCommand select1 = new SqlCommand(comando1, conexao.Conectar());
                select1.Parameters.AddWithValue("@colaborador", colaborador);
                bool sem_atividades;
                if (select1.ExecuteScalar() == null) { sem_atividades = true; }
                else if (select1.ExecuteScalar().ToString() == string.Empty) { sem_atividades = true; }
                else { sem_atividades = false; }

                if (sem_atividades)
                {
                    atividade.Status = "Sem atividades";
                }
                else
                {
                    atividade.ID_Atividade = Convert.ToInt32(select1.ExecuteScalar());
                    atividade.Status = "Pendente";
                }
            }

            if (atividade.Status == "Sem atividades")
            {
                MessageBox.Show("Não há atividades para serem executadas. Informe imediatamente ao chefe do seu setor.", "Atenção!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (atividade.Status == "Pausado")
            {
                ContinuarAtividadePausada(colaborador);
            }
            else if (atividade.Status == "Pendente")
            {
                int id = atividade.ID_Atividade;
                RegistrarInicioDaAtividade(colaborador, id);
            }
        }
        public void RegistrarInicioDaAtividade(string colaborador, int id_atividade)
        {
            string data = DateTime.Now.ToString();
            //MessageBox.Show("Até aqui");
            string comando = "UPDATE tbl_AtividadesRealizadas SET Inicio = @inicio, Status = 'Em andamento' WHERE ID_AtividadeRealizada = @id";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id", id_atividade);
            update.Parameters.AddWithValue("@inicio", data);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        #endregion

        #region Hora do Lanche
        public bool VerificarHoraDoLanche(string colaborador)
        {
            bool hora_do_lanche = false;
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Prev_lanche_inicio FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);

            if (select.ExecuteScalar() == null) { hora_do_lanche = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { hora_do_lanche = false; }
            else
            {
                DateTime lanche_inicio = Convert.ToDateTime(select.ExecuteScalar().ToString());
                int tolerancia = Convert.ToInt32(ObterValorDoParametro("Margem de erro para o ponto eletrônico"));
                if (DateTime.Now >= lanche_inicio.AddMinutes(-tolerancia) && DateTime.Now <= lanche_inicio.AddMinutes(tolerancia))
                {
                    hora_do_lanche = true;
                }
            }
            conexao.Desconectar();
            return hora_do_lanche;
        }
        public Expediente HoraDoLanche(string colaborador)
        {
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Prev_lanche_inicio, Prev_lanche_Termino FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();
            Expediente expediente = new Expediente();
            while (leitor.Read())
            {
                expediente.Previsao_Lanche_Inicio = Convert.ToDateTime(leitor[0].ToString());
                expediente.Previsao_Lanche_Termino = Convert.ToDateTime(leitor[1].ToString());
            }
            leitor.Close();
            conexao.Desconectar();
            return expediente;
        }
        public DateTime HoraQueOLancheComecou(string colaborador)
        {
            string comando = "SELECT Lanche_inicio FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", DateTime.Now.ToShortDateString());
            DateTime inicio = Convert.ToDateTime(select.ExecuteScalar().ToString());
            conexao.Desconectar();
            return inicio;
        }
        public bool VerificarInicioDoLanche(string colaborador)
        {
            bool inicio_do_lanche;
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT lanche_inicio FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);

            if (select.ExecuteScalar() == null) { inicio_do_lanche = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { inicio_do_lanche = false; }
            else
            {
                inicio_do_lanche = true;
            }
            conexao.Desconectar();
            return inicio_do_lanche;
        }
        public bool VerificarTerminoDoLanche(string colaborador)
        {
            bool termino_do_lanche;
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT lanche_termino FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);

            if (select.ExecuteScalar() == null) { termino_do_lanche = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { termino_do_lanche = false; }
            else
            {
                termino_do_lanche = true;
            }
            conexao.Desconectar();
            return termino_do_lanche;
        }
        public void IniciarLanche(string colaborador)
        {
            string motivo = "Intervalo do lanche";
            if (VerificarAtividadeEmAndamento(colaborador))
            {
                PausarAtividadeEmAndamento(colaborador, motivo);
            }

            string data = DateTime.Now.ToShortDateString();
            string inicio = DateTime.Now.ToString();
            string comand = "UPDATE tbl_Expediente SET Lanche_inicio = @inicio WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand update = new SqlCommand(comand, conexao.Conectar());
            update.Parameters.AddWithValue("@inicio", inicio);
            update.Parameters.AddWithValue("@colaborador", colaborador);
            update.Parameters.AddWithValue("@data", data);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }
        public void FinalizarLanche(string colaborador)
        {
            string data = DateTime.Now.ToShortDateString();
            string termino = DateTime.Now.ToString();
            string comand = "UPDATE tbl_Expediente SET Lanche_Termino = @termino WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand update = new SqlCommand(comand, conexao.Conectar());
            update.Parameters.AddWithValue("@termino", termino);
            update.Parameters.AddWithValue("@colaborador", colaborador);
            update.Parameters.AddWithValue("@data", data);
            update.ExecuteNonQuery();
            conexao.Desconectar();

            if (VerificarAtividadePausada(colaborador))
            {
                ContinuarAtividadePausada(colaborador);
            }
        }
        #endregion

        #region Hora do Almoço
        public bool VerificarHoraDoAlmoco(string colaborador)
        {
            bool hora_do_almoco = false;
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Prev_almoco_inicio FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);

            if (select.ExecuteScalar() == null) { hora_do_almoco = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { hora_do_almoco = false; }
            else
            {
                DateTime almoco_inicio = Convert.ToDateTime(select.ExecuteScalar().ToString());
                int tolerancia = Convert.ToInt32(ObterValorDoParametro("Margem de erro para o ponto eletrônico"));
                if (DateTime.Now >= almoco_inicio.AddMinutes(-tolerancia) && DateTime.Now <= almoco_inicio.AddMinutes(tolerancia))
                {
                    hora_do_almoco = true;
                }
            }
            conexao.Desconectar();
            return hora_do_almoco;
        }
        public Expediente HoraDoAlmoco(string colaborador)
        {
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Prev_almoco_inicio, Prev_almoco_Termino FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();
            Expediente expediente = new Expediente();
            while (leitor.Read())
            {
                expediente.Previsao_Almoco_Inicio = Convert.ToDateTime(leitor[0].ToString());
                expediente.Previsao_Almoco_Termino = Convert.ToDateTime(leitor[1].ToString());
            }
            leitor.Close();
            conexao.Desconectar();
            return expediente;
        }
        public DateTime HoraQueOAlmocoComecou(string colaborador)
        {
            string comando = "SELECT Almoco_inicio FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", DateTime.Now.ToShortDateString());
            DateTime inicio = Convert.ToDateTime(select.ExecuteScalar().ToString());
            return inicio;
        }
        public bool VerificarInicioDoAlmoco(string colaborador)
        {
            bool inicio_do_almoco;
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Almoco_inicio FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);

            if (select.ExecuteScalar() == null) { inicio_do_almoco = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { inicio_do_almoco = false; }
            else
            {
                inicio_do_almoco = true;
            }
            conexao.Desconectar();
            return inicio_do_almoco;
        }
        public bool VerificarTerminoDoAlmoco(string colaborador)
        {
            bool termino_do_almoco;
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Almoco_Termino FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);

            if (select.ExecuteScalar() == null) { termino_do_almoco = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { termino_do_almoco = false; }
            else
            {
                termino_do_almoco = true;
            }
            conexao.Desconectar();
            return termino_do_almoco;
        }
        public void IniciarAlmoco(string colaborador)
        {
            string motivo = "Intervalo do almoço";
            if (VerificarAtividadeEmAndamento(colaborador))
            {
                PausarAtividadeEmAndamento(colaborador, motivo);
            }

            string data = DateTime.Now.ToShortDateString();
            string inicio = DateTime.Now.ToString();
            string comand = "UPDATE tbl_Expediente SET Almoco_inicio = @inicio WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand update = new SqlCommand(comand, conexao.Conectar());
            update.Parameters.AddWithValue("@inicio", inicio);
            update.Parameters.AddWithValue("@colaborador", colaborador);
            update.Parameters.AddWithValue("@data", data);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }
        public void FinalizarAlmoco(string colaborador)
        {
            string data = DateTime.Now.ToShortDateString();
            string termino = DateTime.Now.ToString();
            string comand = "UPDATE tbl_Expediente SET Almoco_Termino = @termino WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand update = new SqlCommand(comand, conexao.Conectar());
            update.Parameters.AddWithValue("@termino", termino);
            update.Parameters.AddWithValue("@colaborador", colaborador);
            update.Parameters.AddWithValue("@data", data);
            update.ExecuteNonQuery();
            conexao.Desconectar();

            if (VerificarAtividadePausada(colaborador))
            {
                ContinuarAtividadePausada(colaborador);
            }
        }
        #endregion

        #region Fim do Serviço
        public bool VerificarFimDoServico(string colaborador)
        {
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Termino FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);
            bool verificar;
            if (select.ExecuteScalar() == null) { verificar = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { verificar = false; }
            else { verificar = true; }
            conexao.Desconectar();
            return verificar;
        }
        public bool HoraDeLargar(string colaborador)
        {
            bool hora_de_largar = false;
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Previsao_Termino FROM tbl_Expediente WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);

            if (select.ExecuteScalar() == null) { hora_de_largar = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { hora_de_largar = false; }
            else
            {
                DateTime lanche_inicio = Convert.ToDateTime(select.ExecuteScalar().ToString());
                if (DateTime.Now >= lanche_inicio)
                {
                    hora_de_largar = true;
                }
            }
            conexao.Desconectar();
            return hora_de_largar;
        }
        public void FinalizarServico(string colaborador)
        {
            if (VerificarAtividadeEmAndamento(colaborador))
            {
                PausarAtividadeEmAndamento(colaborador, "Fim do Serviço");
            }
            string data = DateTime.Now.ToShortDateString();
            string inicio = DateTime.Now.ToString();
            string comando = "UPDATE tbl_Expediente SET Inicio = @inicio WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Data = @data";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@inicio", inicio);
            update.Parameters.AddWithValue("@data", data);
            update.Parameters.AddWithValue("@colaborador", colaborador);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }
        #endregion

        #region Pausar
        public void PausarAtividadeEmAndamento(string colaborador, string motivo)
        {
            string comando = "UPDATE tbl_AtividadesRealizadas SET Status = 'Pausado' WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Status = 'Em andamento'";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@colaborador", colaborador);
            update.ExecuteNonQuery();
            conexao.Desconectar();

            string inicio = DateTime.Now.ToString();
            string comando1 = "INSERT INTO tbl_Pausas (ID_AtividadeRealizada, Responsavel, Motivo, Inicio) VALUES ((SELECT TOP (1) ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Status = 'Pausado' ORDER BY Previsao_Inicio DESC), @responsavel, @motivo, @inicio)";
            SqlCommand insert = new SqlCommand(comando1, conexao.Conectar());
            insert.Parameters.AddWithValue("@colaborador", colaborador);
            insert.Parameters.AddWithValue("@responsavel", colaborador);
            insert.Parameters.AddWithValue("@motivo", motivo);
            insert.Parameters.AddWithValue("@inicio", inicio);
            insert.ExecuteNonQuery();
            conexao.Desconectar();
        }
        public bool VerificarAtividadePausada(string colaborador)
        {
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Status FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Status = 'Pausado'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);
            bool verificar;
            if (select.ExecuteScalar() == null) { verificar = false; }
            else { verificar = true; }
            conexao.Desconectar();
            return verificar;
        }
        public void ContinuarAtividadePausada(string colaborador)
        {
            string comando = "UPDATE tbl_AtividadesRealizadas SET Status = 'Em andamento' WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Status = 'Pausado'";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@colaborador", colaborador);
            update.ExecuteNonQuery();
            conexao.Desconectar();

            string termino = DateTime.Now.ToString();
            string comando1 = "UPDATE tbl_Pausas SET Termino = @termino WHERE ID_AtividadeRealizada = (SELECT ID_AtividadeRealizada FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Status = 'Em andamento')";
            SqlCommand update1 = new SqlCommand(comando1, conexao.Conectar());
            update1.Parameters.AddWithValue("@colaborador", colaborador);
            update1.Parameters.AddWithValue("@termino", termino);
            update1.ExecuteNonQuery();
            conexao.Desconectar();
        }
        public void ConcluirAtividade(string colaborador)
        {
            string termino = DateTime.Now.ToString();
            string comando = "UPDATE tbl_AtividadesRealizadas SET Status = 'Concluído', Termino = @termino WHERE Status = 'Em andamento' AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador)";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@termino", termino);
            update.Parameters.AddWithValue("@colaborador", colaborador);
            update.ExecuteNonQuery();
            conexao.Desconectar();

            ProximaAtividade(colaborador);
        }
        public bool VerificarSeHaAtividadesPendentes(string colaborador)
        {
            string data = DateTime.Now.ToShortDateString();
            string comando = "SELECT Status FROM tbl_AtividadesRealizadas WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador) AND Status = 'Pendente'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            select.Parameters.AddWithValue("@data", data);
            bool verificar;
            if (select.ExecuteScalar() == null) { verificar = false; }
            else { verificar = true; }
            conexao.Desconectar();
            return verificar;
        }
        #endregion

        #endregion

        #region Métodos do Formulário Gestão

        #region Plano de Ação

        public List<Projeto> ListaDePlanosDeAcao()
        {
            List<Projeto> planos = new List<Projeto>();

            string comando = "SELECT ID, Descricao, Onde, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_PlanoDeAcao.ID_Responsavel) AS Colaborador FROM tbl_PlanoDeAcao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        planos.Add(new Projeto
                        {
                            ID_Projeto = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Onde = leitor[2].ToString(),
                            Colaborador = leitor[3].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return planos;
        }

        public Projeto TrazerInformacoesDoPlanoDeAcao(int id_projeto)
        {
            Projeto projeto = new Projeto();
            List<Etapa> etapas = new List<Etapa>();
            List<Custo> custos = new List<Custo>();
            List<Checklist> check_list = new List<Checklist>();

            string comando = "SELECT Descricao, O_Que, Por_Que, Onde, ID_Responsavel FROM tbl_PlanoDeAcao WHERE ID = @id";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_projeto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        projeto.ID_Projeto = id_projeto;
                        projeto.Descricao = leitor[0].ToString();
                        projeto.O_Que = leitor[1].ToString();
                        projeto.Por_Que = leitor[2].ToString();
                        projeto.Onde = leitor[3].ToString();
                        projeto.ID_Colaborador = Convert.ToInt32(leitor[4]);
                    }
                }
            }

            conexao.Desconectar();

            string comando2 = "SELECT ID, Descricao, Como, Quem, Prazo, Previsao_Inicio, Ordem FROM tbl_PlanoEtapas WHERE ID_PlanoDeAcao = @id";

            using (SqlCommand select = new SqlCommand(comando2, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_projeto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        etapas.Add(new Etapa
                        {
                            ID_Etapa = Convert.ToInt32(leitor[0]),
                            O_Que = leitor[1].ToString(),
                            Como = leitor[2].ToString(),
                            Quem = leitor[3].ToString(),
                            Prazo = Convert.ToInt32(leitor[4]),
                            Previsao_Inicio = Convert.ToDateTime(leitor[5]),
                            Ordem = Convert.ToInt32(leitor[6])
                        });
                    }
                }
            }

            conexao.Desconectar();

            string comando3 = "SELECT ID, Ordem, Descricao, Detalhes, Valor, Categoria FROM tbl_PlanoCustos WHERE ID_PlanoDeAcao = @id";

            using (SqlCommand select = new SqlCommand(comando3, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_projeto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        custos.Add(new Custo
                        {
                            ID = Convert.ToInt32(leitor[0]),
                            Ordem = Convert.ToInt32(leitor[1]),
                            Descricao = leitor[2].ToString(),
                            Detalhes = leitor[3].ToString(),
                            Valor = Convert.ToInt32(leitor[4]),
                            Categoria = leitor[5].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            string comando4 = "SELECT ID, ID_Etapa, Descricao, Ordem, Confirmacao FROM tbl_CheckList WHERE (SELECT ID_PlanoDeAcao FROM tbl_PlanoEtapas WHERE ID = ID_Etapa) = @id ORDER BY Ordem";

            using (SqlCommand select = new SqlCommand(comando4, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_projeto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        check_list.Add(new Checklist
                        {
                            ID = Convert.ToInt32(leitor[0]),
                            Referencia = Convert.ToInt32(leitor[1]),
                            Descricao = leitor[2].ToString(),
                            Ordem = Convert.ToInt32(leitor[3]),
                            Confirmacao = Convert.ToBoolean(leitor[4])
                        });
                    }
                }
            }

            conexao.Desconectar();


            projeto.Custos = custos;
            projeto.Etapas = etapas;
            projeto.Checklist = check_list;

            return projeto;
        }

        public List<Etapa> AtualizarEtapasDoPlano(int id_projeto)
        {
            List<Etapa> etapas = new List<Etapa>();

            string comando = "SELECT ID, Descricao, Como, Quem, Prazo, Previsao_Inicio, Ordem FROM tbl_PlanoEtapas WHERE ID_PlanoDeAcao = @id";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_projeto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        etapas.Add(new Etapa
                        {
                            ID_Etapa = Convert.ToInt32(leitor[0]),
                            O_Que = leitor[1].ToString(),
                            Como = leitor[2].ToString(),
                            Quem = leitor[3].ToString(),
                            Prazo = Convert.ToInt32(leitor[4]),
                            Previsao_Inicio = Convert.ToDateTime(leitor[5]),
                            Ordem = Convert.ToInt32(leitor[6])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return etapas;
        }

        public List<Checklist> AtualizarCheckListDoPlano(int id_projeto)
        {
            List<Checklist> checklist = new List<Checklist>();

            string comando = "SELECT ID, ID_Etapa, Descricao, Ordem, Confirmacao FROM tbl_CheckList WHERE (SELECT ID_PlanoDeAcao FROM tbl_PlanoEtapas WHERE ID = ID_Etapa) = @id ORDER BY Ordem";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_projeto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        checklist.Add(new Checklist
                        {
                            ID = Convert.ToInt32(leitor[0]),
                            Referencia = Convert.ToInt32(leitor[1]),
                            Descricao = leitor[2].ToString(),
                            Ordem = Convert.ToInt32(leitor[3]),
                            Confirmacao = Convert.ToBoolean(leitor[4])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return checklist;
        }

        public List<Custo> AtualizarCustosDoPlano(int id_projeto)
        {
            List<Custo> custos = new List<Custo>();

            string comando = "SELECT ID, Ordem, Descricao, Detalhes, Valor, Categoria FROM tbl_PlanoCustos WHERE ID_PlanoDeAcao = @id";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id_projeto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        custos.Add(new Custo
                        {
                            ID = Convert.ToInt32(leitor[0]),
                            Ordem = Convert.ToInt32(leitor[1]),
                            Descricao = leitor[2].ToString(),
                            Detalhes = leitor[3].ToString(),
                            Valor = Convert.ToInt32(leitor[4]),
                            Categoria = leitor[5].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return custos;
        }

        public void RegistrarPlanoDeAcao(Projeto projeto)
        {
            string comando = "INSERT INTO tbl_PlanoDeAcao (Descricao, O_Que, Por_Que, Onde, ID_Responsavel, Registro) VALUES (@descricao, @o_que, @por_que, @onde, @id_responsavel, GETDATE())";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", projeto.Descricao);
                insert.Parameters.AddWithValue("@o_que", projeto.O_Que);
                insert.Parameters.AddWithValue("@por_que", projeto.Por_Que);
                insert.Parameters.AddWithValue("@onde", projeto.Onde);
                insert.Parameters.AddWithValue("@id_responsavel", projeto.ID_Colaborador);

                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string comando2 = "INSERT INTO tbl_PlanoEtapas (Descricao, Como, Quem, Prazo, Previsao_Inicio, Conclusao, Ordem, ID_PlanoDeAcao) VALUES (@descricao, @como, @quem, @prazo, @previsao, 0, @ordem, (SELECT TOP(1) ID FROM tbl_PlanoDeAcao ORDER BY ID DESC))";

            foreach (Etapa etapa in projeto.Etapas)
            {
                using (SqlCommand insert = new SqlCommand(comando2, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@descricao", etapa.O_Que);
                    insert.Parameters.AddWithValue("@como", etapa.Como);
                    insert.Parameters.AddWithValue("@quem", etapa.Quem);
                    insert.Parameters.AddWithValue("@prazo", etapa.Prazo);
                    insert.Parameters.AddWithValue("@previsao", etapa.Previsao_Inicio);
                    insert.Parameters.AddWithValue("@ordem", etapa.Ordem);

                    insert.ExecuteNonQuery();
                }

                foreach (Checklist check in projeto.Checklist)
                {
                    if (check.Referencia == etapa.Ordem)
                    {
                        string cmd = "INSERT INTO tbl_CheckList (ID_Etapa, Descricao, Ordem, Confirmacao) VALUES ((SELECT TOP(1) ID FROM tbl_PlanoEtapas ORDER BY ID DESC), @descricao, @ordem, @confirmacao)";

                        using (SqlCommand insrt = new SqlCommand(cmd, conexao.Conectar()))
                        {
                            insrt.Parameters.AddWithValue("@descricao", check.Descricao);
                            insrt.Parameters.AddWithValue("@ordem", check.Ordem);
                            insrt.Parameters.AddWithValue("@confirmacao", check.Confirmacao);

                            insrt.ExecuteNonQuery();
                        }
                    }
                }

            }
          

            conexao.Desconectar();

            string comando3 = "INSERT INTO tbl_PlanoCustos (ID_PlanoDeAcao, Ordem, Descricao, Detalhes, Valor, Categoria) VALUES ((SELECT TOP(1) ID FROM tbl_PlanoDeAcao ORDER BY ID DESC), @ordem, @descricao, @detalhes, @valor, @categoria)";


            foreach (Custo custo in projeto.Custos)
            {
                using (SqlCommand insert = new SqlCommand(comando3, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@ordem", custo.Ordem);
                    insert.Parameters.AddWithValue("@descricao", custo.Descricao);
                    insert.Parameters.AddWithValue("@detalhes", custo.Detalhes);
                    insert.Parameters.AddWithValue("@valor", custo.Valor);
                    insert.Parameters.AddWithValue("@categoria", custo.Categoria);

                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Plano de ação registrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void EditarPlanoDeAcao(Projeto projeto)
        {
            string comando = "UPDATE tbl_PlanoDeAcao SET Descricao = @descricao, O_Que = @o_que, Por_Que = @por_que, Onde = @onde, ID_Responsavel = @id_responsavel WHERE ID = @id_projeto";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_projeto", projeto.ID_Projeto);
                update.Parameters.AddWithValue("@descricao", projeto.Descricao);
                update.Parameters.AddWithValue("@o_que", projeto.O_Que);
                update.Parameters.AddWithValue("@por_que", projeto.Por_Que);
                update.Parameters.AddWithValue("@onde", projeto.Onde);
                update.Parameters.AddWithValue("@id_responsavel", projeto.ID_Colaborador);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Plano de ação editado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void AdicionarEtapaDoPlanoDeAcao(Etapa etapa, List<Checklist> checklist, int id_projeto)
        {
            string comando = "INSERT INTO tbl_PlanoEtapas (Descricao, Como, Quem, Prazo, Previsao_Inicio, Conclusao, Ordem, ID_PlanoDeAcao) VALUES (@descricao, @como, @quem, @prazo, @previsao, 0, @ordem, @id_plano)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_plano", id_projeto);
                insert.Parameters.AddWithValue("@descricao", etapa.O_Que);
                insert.Parameters.AddWithValue("@como", etapa.Como);
                insert.Parameters.AddWithValue("@quem", etapa.Quem);
                insert.Parameters.AddWithValue("@prazo", etapa.Prazo);
                insert.Parameters.AddWithValue("@previsao", etapa.Previsao_Inicio);
                insert.Parameters.AddWithValue("@ordem", etapa.Ordem);

                insert.ExecuteNonQuery();

                foreach (Checklist check in checklist)
                {
                    if (check.Referencia == etapa.Ordem)
                    {
                        string cmd = "INSERT INTO tbl_CheckList (ID_Etapa, Descricao, Ordem, Confirmacao) VALUES ((SELECT TOP(1) ID FROM tbl_PlanoEtapas ORDER BY ID DESC), @descricao, @ordem, @confirmacao)";

                        using (SqlCommand insrt = new SqlCommand(cmd, conexao.Conectar()))
                        {
                            insrt.Parameters.AddWithValue("@descricao", check.Descricao);
                            insrt.Parameters.AddWithValue("@ordem", check.Ordem);
                            insrt.Parameters.AddWithValue("@confirmacao", check.Confirmacao);

                            insrt.ExecuteNonQuery();
                        }
                    }
                }
            }
        }

        public void EditarEtapaDoPlanoDeAcao(Etapa etapa)
        {
            string comando = "UPDATE tbl_PlanoEtapas SET Descricao = @descricao, Como = @como, Quem = @quem, Prazo = @prazo, Previsao_Inicio = @previsao WHERE ID = @id_etapa";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_etapa", etapa.ID_Etapa);
                insert.Parameters.AddWithValue("@descricao", etapa.O_Que);
                insert.Parameters.AddWithValue("@como", etapa.Como);
                insert.Parameters.AddWithValue("@quem", etapa.Quem);
                insert.Parameters.AddWithValue("@prazo", etapa.Prazo);
                insert.Parameters.AddWithValue("@previsao", etapa.Previsao_Inicio);

                insert.ExecuteNonQuery();
            }
        }

        public void AdicionarItemAoCheckList(Checklist checklist)
        {
            string comando = "INSERT INTO tbl_CheckList (ID_Etapa, Descricao, Ordem, Confirmacao) VALUES (@referencia, @descricao, @ordem, 0)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@referencia", checklist.Referencia);
                insert.Parameters.AddWithValue("@descricao", checklist.Descricao);
                insert.Parameters.AddWithValue("@ordem", checklist.Ordem);

                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void EditarItemDoCheckList(Checklist checklist)
        {
            string comando = "UPDATE tbl_CheckList SET Descricao = @descricao WHERE ID_Etapa = @referencia AND Ordem = @ordem";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@referencia", checklist.Referencia);
                update.Parameters.AddWithValue("@descricao", checklist.Descricao);
                update.Parameters.AddWithValue("@ordem", checklist.Ordem);

                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarItemDoCheckList(Checklist checklist)
        {
            string comando = "DELETE FROM tbl_CheckList WHERE ID_Etapa = @referencia AND Ordem = @ordem";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@referencia", checklist.Referencia);
                delete.Parameters.AddWithValue("@ordem", checklist.Ordem);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarPlanoDeAcao(int id)
        {
            string comando = "DELETE FROM tbl_CheckList WHERE (SELECT ID_PlanoDeAcao FROM tbl_PlanoEtapas WHERE ID = tbl_CheckList.ID_Etapa) = @id";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string comando2 = "DELETE FROM tbl_PlanoEtapas WHERE ID_PlanoDeAcao = @id";

            using (SqlCommand delete = new SqlCommand(comando2, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string comando3 = "DELETE FROM tbl_PlanoDeAcao WHERE ID = @id";

            using (SqlCommand delete = new SqlCommand(comando3, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarEtapaDoPlanoDeAcao(int id_etapa)
        {
            string comando2 = "DELETE FROM tbl_PlanoEtapas WHERE ID = @id";

            using (SqlCommand delete = new SqlCommand(comando2, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_etapa);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ReordenarEtapasDoPlano(int id_projeto)
        {
            List<int> Etapas = new List<int>();

            string comando = "SELECT ID FROM tbl_PlanoEtapas WHERE ID_PlanoDeAcao = @id_projeto ORDER BY Ordem";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_projeto", id_projeto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Etapas.Add(Convert.ToInt32(leitor["ID"]));
                    }
                }
            }
            conexao.Desconectar();

            int ordem = 1;
            string cmd = "UPDATE tbl_PlanoEtapas SET Ordem = @ordem WHERE ID = @id_etapa";

            foreach (int id_etapa in Etapas)
            {
                using (SqlCommand update = new SqlCommand(cmd, conexao.Conectar()))
                {
                    update.Parameters.AddWithValue("@id_etapa", id_etapa);
                    update.Parameters.AddWithValue("@ordem", ordem);
                    update.ExecuteNonQuery();
                }

                ordem++;
            }
        }

        public void ReordenarChecklist(int id_etapa)
        {
            List<int> lista = new List<int>();

            string comando = "SELECT ID FROM tbl_CheckList WHERE ID_Etapa = @id_etapa ORDER BY Ordem";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_etapa", id_etapa);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(Convert.ToInt32(leitor["ID"]));
                    }
                }
            }
            conexao.Desconectar();

            int ordem = 1;
            string cmd = "UPDATE tbl_CheckList SET Ordem = @ordem WHERE ID = @id";

            foreach (int id in lista)
            {
                using (SqlCommand update = new SqlCommand(cmd, conexao.Conectar()))
                {
                    update.Parameters.AddWithValue("@id", id);
                    update.Parameters.AddWithValue("@ordem", ordem);
                    update.ExecuteNonQuery();
                }

                ordem++;
            }
        }

        public void AlterarOrdemDoChecklist(int id, int nova_ordem)
        {
            string comando = "UPDATE tbl_CheckList SET Ordem = @nova_ordem WHERE ID = @id";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", id);
                update.Parameters.AddWithValue("@nova_ordem", nova_ordem);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AlterarOrdemDaEtapa(int id, int nova_ordem)
        {
            string comando = "UPDATE tbl_PlanoEtapas SET Ordem = @nova_ordem WHERE ID = @id";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", id);
                update.Parameters.AddWithValue("@nova_ordem", nova_ordem);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AdicionarCustoDoPlanoDeAcao(Custo custo, int id_projeto)
        {
            string comando = "INSERT INTO tbl_PlanoCustos (ID_PlanoDeAcao, Descricao, Detalhes, Valor, Categoria, Ordem) VALUES (@id_plano, @descricao, @detalhes, @valor, @categoria, @ordem)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_plano", id_projeto);
                insert.Parameters.AddWithValue("@descricao", custo.Descricao);
                insert.Parameters.AddWithValue("@detalhes", custo.Detalhes);
                insert.Parameters.AddWithValue("@valor", custo.Valor);
                insert.Parameters.AddWithValue("@categoria", custo.Categoria);
                insert.Parameters.AddWithValue("@ordem", custo.Ordem);

                insert.ExecuteNonQuery();
            }
        }

        public void EditarCustoDoPlanoDeAcao(Custo custo)
        {
            string comando = "UPDATE tbl_PlanoCustos SET Descricao = @descricao, Detalhes = @detalhes, Valor = @valor, Categoria = @categoria WHERE ID = @id";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", custo.ID);
                update.Parameters.AddWithValue("@descricao", custo.Descricao);
                update.Parameters.AddWithValue("@detalhes", custo.Detalhes);
                update.Parameters.AddWithValue("@valor", custo.Valor);
                update.Parameters.AddWithValue("@categoria", custo.Categoria);
 
                update.ExecuteNonQuery();
            }
        }

        public void ApagarCustoDoPlanoDeAcao(int id_custo)
        {
            string comando2 = "DELETE FROM tbl_PlanoCustos WHERE ID = @id";

            using (SqlCommand delete = new SqlCommand(comando2, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id_custo);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ReordenarCustosDoPlano(int id_projeto)
        {
            List<int> Custos = new List<int>();

            string comando = "SELECT ID FROM tbl_PlanoCustos WHERE ID_PlanoDeAcao = @id_projeto ORDER BY Ordem";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_projeto", id_projeto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Custos.Add(Convert.ToInt32(leitor["ID"]));
                    }
                }
            }

            conexao.Desconectar();

            int ordem = 1;
            string cmd = "UPDATE tbl_PlanoCustos SET Ordem = @ordem WHERE ID = @id_custo";

            foreach (int id_custo in Custos)
            {
                using (SqlCommand update = new SqlCommand(cmd, conexao.Conectar()))
                {
                    update.Parameters.AddWithValue("@id_custo", id_custo);
                    update.Parameters.AddWithValue("@ordem", ordem);
                    update.ExecuteNonQuery();
                }

                ordem++;
            }
        }

        public void ImprimirPlanoDeAcao(int id, bool impressao)
        {
            string data = DateTime.Now.ToShortDateString();
            string responsavel = string.Empty;
            string descricao = string.Empty;
            string inicio = string.Empty;
            string o_que = string.Empty;
            string por_que = string.Empty;
            string onde = string.Empty;

            string comando = "SELECT Descricao, O_Que, Por_Que, Onde, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_PlanoDeAcao.ID_Responsavel) AS Responsavel, CONVERT(DATE, (SELECT MIN(Previsao_Inicio) FROM tbl_PlanoEtapas WHERE ID_PlanoDeAcao = tbl_PlanoDeAcao.ID)) AS Inicio FROM tbl_PlanoDeAcao WHERE ID = @id";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        descricao = leitor[0].ToString();
                        o_que = leitor[1].ToString();
                        por_que = leitor[2].ToString();
                        onde = leitor[3].ToString();
                        responsavel = leitor[4].ToString();
                        inicio = Convert.ToDateTime(leitor[5]).ToShortDateString();
                    }
                }
            }

            conexao.Desconectar();

            formRepPlanoDeAcao relatorio = new formRepPlanoDeAcao(id);
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("data", data));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("responsavel", responsavel));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("descricao", descricao));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("inicio", inicio));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("o_que", o_que));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("por_que", por_que));
            relatorio.reportViewer1.LocalReport.SetParameters(new ReportParameter("onde", onde));

            relatorio.EtapasDoPlanoDeAcaoTableAdapter.Fill(relatorio.dataSetEtapasDoPlano.EtapasDoPlanoDeAcao, id);
            relatorio.CustosDoPlanoDeAcaoTableAdapter.Fill(relatorio.dataSetCustosDoPlano.CustosDoPlanoDeAcao, id);

            relatorio.reportViewer1.RefreshReport();

            if (impressao)
            {
                AutoPrintCls autoprintme = new AutoPrintCls(relatorio.reportViewer1.LocalReport);
                autoprintme.PrinterSettings.PrinterName = Program.Computador.Impressora_A4;
                autoprintme.Print();
            }
            else
            {
                relatorio.ShowDialog();
            }
        }

        #endregion

        #region Projetos e etapas

        public List<Projeto> ListaDeProjetos()
        {
            string matricula = Program.matricula;
            List<Projeto> projetos = new List<Projeto>();
            string comando = "SELECT DISTINCT ID_Projeto, Descricao, Detalhes, Inicio, Status FROM tbl_Projetos WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND (Status = 'Em andamento' OR  Status = 'Pendente')";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                string status = leitor[4].ToString();

                if (status == "Em andamento")
                {
                    projetos.Add(new Projeto
                    {
                        ID_Projeto = Convert.ToInt32(leitor[0]),
                        Descricao = leitor[1].ToString(),
                        Detalhes = leitor[2].ToString(),
                        Inicio = Convert.ToDateTime(leitor[3]),
                        Status = status
                    });
                }
                else
                {
                    projetos.Add(new Projeto
                    {
                        ID_Projeto = Convert.ToInt32(leitor[0]),
                        Descricao = leitor[1].ToString(),
                        Detalhes = leitor[2].ToString(),
                        Status = status
                    });
                }
            }
            leitor.Close();
            conexao.Desconectar();
            return projetos;
        }

        public void PreencherDataGridProjetos(BindingSource bindingSource, DataGridView dataGridView)
        {
            string comando = "SELECT DISTINCT ID_Projeto AS ID, Descricao AS Projeto, IIF(Status = 'Pendente', 0, 1) AS Status FROM tbl_Projetos WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", Program.matricula);
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            //SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            bindingSource.DataSource = dataSet;
            bindingSource.DataMember = dataSet.Tables[0].TableName;
            dataGridView.DataSource = bindingSource;
            conexao.Desconectar();
        }

        public string NomeDoProjeto(int id_projeto)
        {
            string comando = "SELECT Descricao WHERE ID_Projeto = @id_projeto";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_projeto", id_projeto);
            string projeto = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return projeto;
        }

        public void ConcluirProjeto(int id_projeto)
        {
            string comando = "UPDATE tbl_Projetos SET Status = 'Concluído' WHERE ID_Projeto = @id_projeto";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_projeto", id_projeto);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void ApagarProjeto(int id_projeto)
        {
            string comando = "DELETE FROM tbl_Projetos WHERE ID_Projeto = @id_projeto";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id_projeto", id_projeto);
            delete.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void ApagarEtapasDoProjeto(int id_projeto)
        {
            string comando = "DELETE FROM tbl_Etapas WHERE ID_Projeto = @id_projeto";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id_projeto", id_projeto);
            delete.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void RetomarProjeto(int id_projeto)
        {
            string comando = "UPDATE tbl_Projetos SET Status = 'Pendente' WHERE ID_Projeto = @id_projeto";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_projeto", id_projeto);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public List<Etapa> ListaDeEtapas(int id_projeto)
        {
            List<Etapa> etapas = new List<Etapa>();
            string comando = "SELECT Ordem, Descricao, Detalhes, Status, Inicio, Termino, ID_Etapa FROM tbl_Etapas WHERE ID_Projeto = @id_projeto ORDER BY Ordem";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_projeto", id_projeto);

            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                string status = leitor[3].ToString();
                if (status == "Pendente")
                {
                    etapas.Add(new Etapa
                    {
                        ID_Projeto = id_projeto,
                        Ordem = Convert.ToInt32(leitor[0]),
                        Descricao = leitor[1].ToString(),
                        Detalhes = leitor[2].ToString(),
                        ID_Etapa = Convert.ToInt32(leitor[6]),
                        Status = status
                    });
                }
                else if (status == "Em andamento")
                {
                    etapas.Add(new Etapa
                    {
                        ID_Projeto = id_projeto,
                        Ordem = Convert.ToInt32(leitor[0]),
                        Descricao = leitor[1].ToString(),
                        Detalhes = leitor[2].ToString(),
                        ID_Etapa = Convert.ToInt32(leitor[6]),
                        Status = status,
                        Inicio = Convert.ToDateTime(leitor[4])
                    });
                }
                else if (status == "Concluído")
                {
                    etapas.Add(new Etapa
                    {
                        ID_Projeto = id_projeto,
                        Ordem = Convert.ToInt32(leitor[0]),
                        Descricao = leitor[1].ToString(),
                        Detalhes = leitor[2].ToString(),
                        ID_Etapa = Convert.ToInt32(leitor[6]),
                        Status = status,
                        Inicio = Convert.ToDateTime(leitor[4]),
                        Termino = Convert.ToDateTime(leitor[5])
                    });
                }
            }
            leitor.Close();
            conexao.Desconectar();
            return etapas;
        }

        public string DetalhesDaEtapa(int id_projeto, int ordem)
        {
            string comando = "SELECT Detalhes FROM tbl_Etapas WHERE ID_Projeto = @id_projeto AND Ordem = @ordem";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_projeto", id_projeto);
            select.Parameters.AddWithValue("@ordem", ordem);
            string detalhes = select.ExecuteScalar().ToString();
            conexao.Desconectar();
            return detalhes;
        }

        public void ReordenarEtapas(List<Etapa> Etapas)
        {
            foreach (Etapa Etapa in Etapas)
            {
                int id_etapa = Etapa.ID_Etapa;
                int id_projeto = Etapa.ID_Projeto;
                int ordem = Etapa.Ordem;

                string comando = "UPDATE tbl_Etapas SET Ordem = @ordem WHERE ID_Etapa = @id_etapa AND ID_Projeto = @id_projeto";
                SqlCommand update = new SqlCommand(comando, conexao.Conectar());
                update.Parameters.AddWithValue("@ordem", ordem);
                update.Parameters.AddWithValue("@id_etapa", id_etapa);
                update.Parameters.AddWithValue("@id_projeto", id_projeto);
                update.ExecuteNonQuery();
            }
            conexao.Desconectar();

            if (Etapas.Count > 0)
            {
                MessageBox.Show("Etapas reordenadas com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public void IniciarEtapa(int id_projeto, int ordem)
        {
            string comando = "UPDATE tbl_Etapas SET Inicio = GETDATE(), Status = 'Em andamento' WHERE ID_Projeto = @id_projeto AND Ordem = @ordem";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_projeto", id_projeto);
            update.Parameters.AddWithValue("@ordem", ordem);
            update.ExecuteNonQuery();
        }

        public void ConcluirEtapa(int id_projeto, int ordem)
        {
            string comando = "UPDATE tbl_Etapas SET Termino = GETDATE(), Status = 'Concluído' WHERE ID_Projeto = @id_projeto AND Ordem = @ordem";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_projeto", id_projeto);
            update.Parameters.AddWithValue("@ordem", ordem);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void RetomarEtapa(int id_projeto, int ordem)
        {
            string comando = "UPDATE tbl_Etapas SET Termino = NULL, Status = 'Em andamento' WHERE ID_Projeto = @id_projeto AND Ordem = @ordem";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_projeto", id_projeto);
            update.Parameters.AddWithValue("@ordem", ordem);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void AlterarStatusDaEtapaParaPendente(int id_projeto, int ordem)
        {
            string comando = "UPDATE tbl_Etapas SET Inicio = NULL, Termino = NULL, Status = 'Pendente' WHERE ID_Projeto = @id_projeto AND Ordem = @ordem";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_projeto", id_projeto);
            update.Parameters.AddWithValue("@ordem", ordem);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void ApagarEtapa(int id_projeto, int ordem)
        {
            string comando = "DELETE FROM tbl_Etapas WHERE ID_Projeto = @id_projeto AND Ordem = @ordem";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id_projeto", id_projeto);
            delete.Parameters.AddWithValue("@ordem", ordem);
            delete.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void ReordenarEtapas(int id_projeto)
        {
            List<int> Etapas = new List<int>();
            string comando = "SELECT ID_Etapa FROM tbl_Etapas WHERE ID_Projeto = @id_projeto";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_projeto", id_projeto);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Etapas.Add(Convert.ToInt32(leitor["ID_Etapa"]));
                    }
                }
            }
            conexao.Desconectar();

            int ordem = 1;
            string cmd = "UPDATE tbl_Etapas SET Ordem = @ordem WHERE ID_Etapa = @id_etapa";

            foreach (int id_etapa in Etapas)
            {
                using (SqlCommand update = new SqlCommand(cmd, conexao.Conectar()))
                {
                    update.Parameters.AddWithValue("@id_etapa", id_etapa);
                    update.Parameters.AddWithValue("@ordem", ordem);
                    update.ExecuteNonQuery();
                }

                ordem++;
            }
        }

        public void CadastrarProjeto(Projeto projeto, List<Etapa> Etapas, string colaborador)
        {
            string descricao = projeto.Descricao;
            string detalhes = projeto.Detalhes;
            string resultado_esperado = projeto.Resultado_Esperado;
            DateTime inicio = DateTime.Now;

            string comando = "INSERT INTO tbl_Projetos (ID_Colaborador, Status, Descricao, Detalhes, Resultado_Esperado) VALUES ((SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador), 'Pendente', @descricao, @detalhes, @resultado_esperado)";

            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@colaborador", colaborador);
            insert.Parameters.AddWithValue("@descricao", descricao);
            insert.Parameters.AddWithValue("@detalhes", detalhes);
            insert.Parameters.AddWithValue("@resultado_esperado", resultado_esperado);
            insert.Parameters.AddWithValue("@inicio", inicio);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            foreach (Etapa Etapa in Etapas)
            {
                string etapa = Etapa.Descricao;
                string detalhe = Etapa.Detalhes;
                int ordem = Etapa.Ordem;

                string comando1 = "INSERT INTO tbl_Etapas (ID_Projeto, Status, Descricao, Detalhes, Ordem) VALUES ((SELECT TOP (1) ID_Projeto FROM tbl_Projetos ORDER BY ID_Projeto DESC), 'Pendente', @descricao, @detalhes, @ordem)";

                SqlCommand insert1 = new SqlCommand(comando1, conexao.Conectar());
                insert1.Parameters.AddWithValue("@descricao", etapa);
                insert1.Parameters.AddWithValue("@detalhes", detalhe);
                insert1.Parameters.AddWithValue("@ordem", ordem);
                insert1.ExecuteNonQuery();
            }
            conexao.Desconectar();
            MessageBox.Show("Projeto cadastrado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<string> PreencherComboProjetos(string colaborador)
        {
            List<string> projetos = new List<string>();
            string comando = "SELECT ID_Projeto, Descricao FROM tbl_Projetos WHERE Status <> 'Concluído' AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            SqlDataReader leitor = select.ExecuteReader();
            while (leitor.Read())
            {
                string projeto = leitor[0].ToString() + " - " + leitor[1].ToString();
                projetos.Add(projeto);
            }
            leitor.Close();
            conexao.Desconectar();
            return projetos;
        }

        public void AdicionarEtapaAoProjeto(Etapa Etapa)
        {
            string comando = "INSERT INTO tbl_Etapas (ID_Projeto, Status, Descricao, Detalhes, Ordem) VALUES (@id_projeto, 'Pendente', @descricao, @detalhes, (SELECT TOP (1) Ordem FROM tbl_Etapas WHERE ID_Projeto = @id_projeto ORDER BY Ordem DESC) + 1)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@id_projeto", Etapa.ID_Projeto);
            insert.Parameters.AddWithValue("@descricao", Etapa.Descricao);
            insert.Parameters.AddWithValue("@detalhes", Etapa.Detalhes);
            insert.ExecuteNonQuery();
            conexao.Desconectar();

            MessageBox.Show("Etapa adicionada!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public bool VerificarProjetoEmAndamento(string colaborador)
        {
            string comando = "SELECT Status FROM tbl_Projetos WHERE Status = 'Em andamento' AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@colaborador", colaborador);
            bool em_andamento;
            if (select.ExecuteScalar() == null) { em_andamento = false; }
            else { em_andamento = true; }
            conexao.Desconectar();
            return em_andamento;
        }

        public Etapa TrazerEtapa(int id_projeto, int ordem)
        {
            Etapa Etapa = new Etapa();

            string comando = "SELECT (SELECT Descricao FROM tbl_Projetos WHERE ID_Projeto = tbl_Etapas.ID_Projeto) AS Projeto, Status, Descricao, Detalhes, Inicio, Termino FROM tbl_Etapas WHERE ID_Projeto = @id_projeto AND Ordem = @ordem";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_projeto", id_projeto);
                select.Parameters.AddWithValue("@ordem", ordem);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Etapa.Projeto = leitor[0].ToString();
                        Etapa.Status = leitor[1].ToString();
                        Etapa.Descricao = leitor[2].ToString();
                        Etapa.Detalhes = leitor[3].ToString();
                        if (Etapa.Status == "Em andamento")
                        {
                            Etapa.Inicio = Convert.ToDateTime(leitor[4].ToString());
                        }
                        else if (Etapa.Status == "Concluído")
                        {
                            Etapa.Inicio = Convert.ToDateTime(leitor[4].ToString());
                            Etapa.Termino = Convert.ToDateTime(leitor[5].ToString());
                        }
                    }
                }
            }

            conexao.Desconectar();

            return Etapa;
        }

        public void EditarEtapa(Etapa etapa)
        {
            string comando = "UPDATE tbl_Etapas SET Descricao = @descricao, Detalhes = @detalhes WHERE ID_Projeto = @id_projeto AND Ordem = @ordem";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@descricao", etapa.Descricao);
            update.Parameters.AddWithValue("@detalhes", etapa.Detalhes);
            update.Parameters.AddWithValue("@id_projeto", etapa.ID_Projeto);
            update.Parameters.AddWithValue("@ordem", etapa.Ordem);
            update.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Etapa atualizada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public Afazer TrazerAfazerAPartirDaEtapa(int id_projeto, int ordem)
        {
            Afazer Etapa = new Afazer();

            string comando = "SELECT ID_Etapa, Descricao, Detalhes FROM tbl_Etapas WHERE ID_Projeto = @id_projeto AND Ordem = @ordem";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_projeto", id_projeto);
                select.Parameters.AddWithValue("@ordem", ordem);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Etapa.ID_Etapa = Convert.ToInt32(leitor[0]);
                        Etapa.Descricao = leitor[1].ToString();
                        Etapa.Detalhes = leitor[2].ToString();
                    }
                }
            }

            conexao.Desconectar();

            return Etapa;
        }
        #endregion

        #region Notificações
        
        public List<Notificacao> ListaDeEventos()
        {
            List<Notificacao> notificacoes = new List<Notificacao>();
            string comando = "SELECT ID_Notificacao, Descricao, Hora FROM tbl_Notificacoes WHERE Visto = 0 AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY Hora";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", Program.matricula);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Notificacao notificacao = new Notificacao()
                        {
                            ID_Notificacao = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Hora = Convert.ToDateTime(leitor[2])
                        };

                        notificacoes.Add(notificacao);
                    }
                }
            }

            conexao.Desconectar();

            return notificacoes;
        }

        public List<Notificacao> TrazerNotificacoesSemVisto()
        {
            List<Notificacao> notificacoes = new List<Notificacao>();
            string comando = "SELECT ID_Notificacao, Descricao, Detalhes, Hora, Tipo FROM tbl_Notificacoes WHERE Visto = 0 AND ID_Colaborador = @id_colaborador AND Hora <= GETDATE() ORDER BY Hora";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_colaborador", Program.colaborador.ID_Colaborador);

                int ordem = 1;

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Notificacao notificacao = new Notificacao()
                        {
                            Ordem = ordem,
                            ID_Notificacao = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Detalhes = leitor[2].ToString(),
                            Hora = Convert.ToDateTime(leitor[3]),
                            Tipo = leitor[4].ToString()
                        };

                        ordem++;
                        notificacoes.Add(notificacao);
                    }
                }
            }

            conexao.Desconectar();

            return notificacoes;
        }

        public void MarcarNotificacaoComoVisto(int id_notificacao)
        {
            string comando = "UPDATE tbl_Notificacoes SET Visto = 1 WHERE ID_Notificacao = @id_notificacao";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@id_notificacao", id_notificacao);
            update.ExecuteNonQuery();
            conexao.Desconectar();
        }

        public void NovoLembrete(Notificacao notificacao, string colaborador)
        {
            string descricao = notificacao.Descricao;
            string detalhes = notificacao.Detalhes;
            DateTime data = notificacao.Hora;
            string comando = "INSERT INTO tbl_Notificacoes (Tipo, Descricao, Detalhes, Hora, Visto, ID_Colaborador) VALUES ('Lembrete', @descricao, @detalhes, @data, 0, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador))";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@descricao", descricao);
            insert.Parameters.AddWithValue("@detalhes", detalhes);
            insert.Parameters.AddWithValue("@data", data);
            insert.Parameters.AddWithValue("@colaborador", colaborador);
            insert.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Lembrete adicionado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void NovoCompromisso(Notificacao notificacao, string colaborador)
        {
            string descricao = notificacao.Descricao;
            string detalhes = notificacao.Detalhes;
            DateTime data = notificacao.Hora;
            string comando = "INSERT INTO tbl_Notificacoes (Tipo, Descricao, Detalhes, Hora, Visto, ID_Colaborador) VALUES ('Compromisso', @descricao, @detalhes, @data, 0, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Nome_Colaborador = @colaborador))";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@descricao", descricao);
            insert.Parameters.AddWithValue("@detalhes", detalhes);
            insert.Parameters.AddWithValue("@data", data);
            insert.Parameters.AddWithValue("@colaborador", colaborador);
            insert.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Compromisso adicionado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        #endregion

        #region Estabelecimentos

        public List<Estabelecimento> ListaDeEstabelecimentos()
        {
            List<Estabelecimento> estabelecimentos = new List<Estabelecimento>();
            string comando = "SELECT ID_Estabelecimento, Descricao, Categoria, Endereco, Metros, Status, (SELECT COUNT(*) FROM tbl_AtivosImobilizados WHERE ID_Estabelecimento = tbl_Estabelecimentos.ID_Estabelecimento) AS Equipamentos, ISNULL((SELECT SUM(Quantidade) FROM tbl_EstabelecimentosCargos WHERE ID_Estabelecimento = tbl_Estabelecimentos.ID_Estabelecimento), 0) AS Colaboradores FROM tbl_Estabelecimentos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                estabelecimentos.Add(new Estabelecimento
                {
                    ID_Estabelecimento = Convert.ToInt32(leitor[0]),
                    Descricao = leitor[1].ToString(),
                    Categoria = leitor[2].ToString(),
                    Endereco = leitor[3].ToString(),
                    Metros = Convert.ToInt32(leitor[4]),
                    Status = leitor[5].ToString(),
                    Equipamentos = Convert.ToInt32(leitor[6]),
                    Colaboradores = Convert.ToInt32(leitor[7])
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return estabelecimentos;
        }

        public List<string> PreencherComboCategoriasDosEstabelecimentos()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT DISTINCT Categoria FROM tbl_Estabelecimentos ORDER BY Categoria";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(Convert.ToString(leitor[0]));
                    }
                }
            }
            
            conexao.Desconectar();

            return lista;
        }

        public void CadastrarEstabelecimento(Estabelecimento estabelecimento)
        {
            string comando = "INSERT INTO tbl_Estabelecimentos (Descricao, Categoria, Endereco, Metros, Status, Numero, Cidade, Estado, Bairro, CEP) VALUES (@descricao, @categoria, @endereco, @metros, @status, @numero, @cidade, @estado, @bairro, @cep)";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", estabelecimento.Descricao);
                insert.Parameters.AddWithValue("@categoria", estabelecimento.Categoria);
                insert.Parameters.AddWithValue("@endereco", estabelecimento.Endereco);
                insert.Parameters.AddWithValue("@metros", estabelecimento.Metros);
                insert.Parameters.AddWithValue("@status", estabelecimento.Status);
                insert.Parameters.AddWithValue("@numero", estabelecimento.Numero);
                insert.Parameters.AddWithValue("@cidade", estabelecimento.Cidade);
                insert.Parameters.AddWithValue("@estado", estabelecimento.Estado);
                insert.Parameters.AddWithValue("@bairro", estabelecimento.Bairro);
                insert.Parameters.AddWithValue("@cep", estabelecimento.CEP);

                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Estabelecimento cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public Estabelecimento InformacoesDoEstabelecimento(int id)
        {
            Estabelecimento estabelecimento = new Estabelecimento();
            string comando = "SELECT Descricao, Categoria, Endereco, Metros, Status, Numero, Cidade, Estado, Bairro, CEP FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = @id";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        estabelecimento.ID_Estabelecimento = id;
                        estabelecimento.Descricao = leitor[0].ToString();
                        estabelecimento.Categoria = leitor[1].ToString();
                        estabelecimento.Metros = Convert.ToInt32(leitor[3]);
                        estabelecimento.Endereco = leitor[2].ToString();
                        estabelecimento.Status = leitor[4].ToString();
                        estabelecimento.Numero = leitor[5].ToString();
                        estabelecimento.Bairro = leitor[8].ToString();
                        estabelecimento.Cidade = leitor[6].ToString();
                        estabelecimento.Estado = leitor[7].ToString();
                        estabelecimento.CEP = leitor[9].ToString();
                    }
                }
            }
            conexao.Desconectar();

            return estabelecimento;
        }

        public void EditarEstabelecimento(Estabelecimento estabelecimento)
        {
            string comando = "UPDATE tbl_Estabelecimentos SET Descricao = @descricao, Categoria = @categoria, Endereco = @endereco, Metros = @metros, Status = @status, Numero = @numero, Cidade = @cidade, Estado = @estado, Bairro = @bairro, CEP = @cep WHERE ID_Estabelecimento = @id";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", estabelecimento.ID_Estabelecimento);
                update.Parameters.AddWithValue("@descricao", estabelecimento.Descricao);
                update.Parameters.AddWithValue("@categoria", estabelecimento.Categoria);
                update.Parameters.AddWithValue("@endereco", estabelecimento.Endereco);
                update.Parameters.AddWithValue("@metros", estabelecimento.Metros);
                update.Parameters.AddWithValue("@status", estabelecimento.Status);
                update.Parameters.AddWithValue("@numero", estabelecimento.Numero);
                update.Parameters.AddWithValue("@cidade", estabelecimento.Cidade);
                update.Parameters.AddWithValue("@estado", estabelecimento.Estado);
                update.Parameters.AddWithValue("@bairro", estabelecimento.Bairro);
                update.Parameters.AddWithValue("@cep", estabelecimento.CEP);

                update.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Estabelecimento editado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarEstabelecimento(int id)
        {
            string comando = "DELETE FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Estabelecimento excluído permanentemente!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<Equipamento> ListaDeEquipamentos()
        {
            List<Equipamento> equipamentos = new List<Equipamento>();
            string comando = "SELECT ID_Equipamento, Descricao, (SELECT Categoria FROM tbl_Depreciacoes WHERE ID_Depreciacao = tbl_Equipamentos.ID_Depreciacao) FROM tbl_Equipamentos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                equipamentos.Add(new Equipamento
                {
                    ID_Equipamento = Convert.ToInt32(leitor[0]),
                    Descricao = leitor[1].ToString(),
                    Categoria = leitor[2].ToString(),
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return equipamentos;
        }

        public List<string> PreencherComboCategoriasDosEquipamentos()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Categoria FROM tbl_Depreciacoes ORDER BY Categoria";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public void CadastrarEquipamento(Equipamento equipamento)
        {
            string comando = "INSERT INTO tbl_Equipamentos (Descricao, ID_Depreciacao) VALUES (@descricao, (SELECT ID_Depreciacao FROM tbl_Depreciacoes WHERE Categoria = @categoria))";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", equipamento.Descricao);
                insert.Parameters.AddWithValue("@categoria", equipamento.Categoria);
                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Equipamento cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarEquipamento(int id)
        {
            string comando = "DELETE FROM tbl_Equipamentos WHERE ID_Equipamento = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Equipamento excluído permanentemente!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<Depreciacao> ListaDeDepreciacoes()
        {
            List<Depreciacao> depreciacoes = new List<Depreciacao>();
            string comando = "SELECT ID_Depreciacao, Categoria, Percentual FROM tbl_Depreciacoes";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                depreciacoes.Add(new Depreciacao
                {
                    ID_Equipamento = Convert.ToInt32(leitor[0]),
                    Categoria = leitor[1].ToString(),
                    Percentual = Convert.ToDecimal(leitor[2])
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return depreciacoes;
        }

        #region Repartições
        public List<Reparticao> ListaDeRepartições()
        {
            List<Reparticao> reparticoes = new List<Reparticao>();
            string comando = "SELECT ID_Estabelecimento, ID_Reparticao, Descricao, Metros, (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = tbl_ReparticoesEstabelecimentos.ID_Estabelecimento) AS Estabelecimento, (SELECT Nome_Setor FROM tbl_Setores WHERE ID_Setor = tbl_ReparticoesEstabelecimentos.ID_Setor) AS Setor, ID_Gerente FROM tbl_ReparticoesEstabelecimentos";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        reparticoes.Add(new Reparticao
                        {
                            ID_Estabelecimento = Convert.ToInt32(leitor[0]),
                            ID_Reparticao = Convert.ToInt32(leitor[1]),
                            Descricao = leitor[2].ToString(),
                            Metros = Convert.ToInt32(leitor[3]),
                            Estabelecimento = leitor[4].ToString(),
                            Setor = leitor[5].ToString(),
                            ID_Gerente = Convert.ToInt32(leitor[6])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return reparticoes;
        }

        public List<Reparticao> ListaDeRepartiçõesPorGerente()
        {
            List<Reparticao> reparticoes = new List<Reparticao>();
            string comando = "SELECT ID_Estabelecimento, ID_Reparticao, Descricao, Metros, (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = tbl_ReparticoesEstabelecimentos.ID_Estabelecimento) AS Estabelecimento, (SELECT Nome_Setor FROM tbl_Setores WHERE ID_Setor = tbl_ReparticoesEstabelecimentos.ID_Setor) AS Setor, ID_Gerente FROM tbl_ReparticoesEstabelecimentos WHERE ID_Gerente = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", Program.matricula);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        reparticoes.Add(new Reparticao
                        {
                            ID_Estabelecimento = Convert.ToInt32(leitor[0]),
                            ID_Reparticao = Convert.ToInt32(leitor[1]),
                            Descricao = leitor[2].ToString(),
                            Metros = Convert.ToInt32(leitor[3]),
                            Estabelecimento = leitor[4].ToString(),
                            Setor = leitor[5].ToString(),
                            ID_Gerente = Convert.ToInt32(leitor[6])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return reparticoes;
        }

        public void CadastrarReparticao(Reparticao Reparticao)
        {
            string comando = "INSERT INTO tbl_ReparticoesEstabelecimentos (Descricao, Metros, ID_Estabelecimento, ID_Setor, ID_Gerente) VALUES (@descricao, @metros, (SELECT ID_Estabelecimento FROM tbl_Estabelecimentos WHERE Descricao = @estabelecimento), (SELECT ID_Setor FROM tbl_Setores WHERE Nome_Setor = @setor), @id_gerente)";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", Reparticao.Descricao);
                insert.Parameters.AddWithValue("@metros", Reparticao.Metros);
                insert.Parameters.AddWithValue("@estabelecimento", Reparticao.Estabelecimento);
                insert.Parameters.AddWithValue("@setor", Reparticao.Setor);
                insert.Parameters.AddWithValue("@id_gerente", Reparticao.ID_Gerente);

                insert.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Repartição cadastrada!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void EditarReparticao(Reparticao Reparticao)
        {
            string comando = "UPDATE tbl_ReparticoesEstabelecimentos SET Descricao = @descricao, Metros = @metros, ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_Estabelecimentos WHERE Descricao = @estabelecimento), ID_Setor = (SELECT ID_Setor FROM tbl_Setores WHERE Nome_Setor = @setor) WHERE ID_Reparticao = @id";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", Reparticao.ID_Reparticao);
                update.Parameters.AddWithValue("@descricao", Reparticao.Descricao);
                update.Parameters.AddWithValue("@metros", Reparticao.Metros);
                update.Parameters.AddWithValue("@estabelecimento", Reparticao.Estabelecimento);
                update.Parameters.AddWithValue("@setor", Reparticao.Setor);

                update.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Repartição editada!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<string> PreencherComboEstabelecimentos()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Descricao FROM tbl_Estabelecimentos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public List<string> PreencherComboEstabelecimentosParaAbastecimento()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Descricao FROM tbl_Estabelecimentos WHERE Descricao <> 'CENTRO DE DISTRIBUIÇÃO - CENTRAL'";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                lista.Add(Convert.ToString(leitor[0]));
            }
            leitor.Close();
            conexao.Desconectar();
            return lista;
        }

        public string TrazerEstabelecimento(int id_estabelecimento)
        {
            string estabelecimento = string.Empty;
            string comando = "SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = @id_estabelecimento";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_estabelecimento", id_estabelecimento);
                estabelecimento = select.ExecuteScalar().ToString();
            }
            conexao.Desconectar();

            return estabelecimento;
        }

        public void ApagarReparticao(int id)
        {
            string comando = "DELETE FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            MessageBox.Show("Repartição excluída permanentemente!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<Colaborador> ListaDeColaboradoresPorReparticao(int id_reparticao)
        {
            List<Colaborador> colaboradores = new List<Colaborador>();
            string comando = "SELECT tbl_Colaboradores.ID_Colaborador, Nome_Colaborador + ' ' + Sobrenome AS Nome, Matricula FROM tbl_ReparticoesColaboradores INNER JOIN tbl_Colaboradores ON tbl_ReparticoesColaboradores.ID_Colaborador = tbl_Colaboradores.ID_Colaborador WHERE ID_Reparticao = @id_reparticao ORDER BY Nome";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_reparticao", id_reparticao);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        colaboradores.Add(new Colaborador
                        {
                            ID_Colaborador = Convert.ToInt32(leitor[0]),
                            Nome_Colaborador = leitor[1].ToString(),
                            Matricula = leitor[2].ToString(),
                        });
                    }
                }
            }

            conexao.Desconectar();

            return colaboradores;
        }

        public List<Colaborador> PreencherComboColaboradoresParaReparticao()
        {
            List<Colaborador> lista = new List<Colaborador>();
            string comando = "SELECT ID_Colaborador, Nome_Colaborador + ' (' + Matricula + ')' AS Colaborador FROM tbl_Colaboradores WHERE (SELECT COUNT(*) FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = tbl_Colaboradores.ID_Colaborador) = 0";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", Program.matricula);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(new Colaborador
                        {
                            ID_Colaborador = Convert.ToInt32(leitor[0]),
                            Nome_Colaborador = leitor[1].ToString()
                        });
                    }
                }
            }
            conexao.Desconectar();

            return lista;
        }

        public void AtribuirColaboradorAReparticao(int id_colaborador, int id_reparticao)
        {
            string comando = "INSERT INTO tbl_ReparticoesColaboradores (ID_Colaborador, ID_Reparticao) VALUES (@id_colaborador, @id_reparticao)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                insert.Parameters.AddWithValue("@id_reparticao", id_reparticao);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void RemoverColaboradorDaReparticao(int id_colaborador, int id_reparticao)
        {
            string comando = "DELETE FROM tbl_ReparticoesColaboradores WHERE ID_Reparticao = @id_reparticao AND ID_Colaborador = @id_colaborador";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                delete.Parameters.AddWithValue("@id_reparticao", id_reparticao);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        public List<string> AtividadesDisponiveisParaReparticao(int id_reparticao)
        {
            List<string> atividades = new List<string>();

            string comando = "SELECT Descricao FROM tbl_Atividades WHERE (ID_Setor = (SELECT ID_Setor FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = @id_reparticao) OR ID_Setor IS NULL) AND (SELECT COUNT(*) FROM tbl_ReparticoesAtividades WHERE ID_Atividade = tbl_Atividades.ID_Atividade AND ID_Reparticao = @id_reparticao) = 0";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_reparticao", id_reparticao);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        atividades.Add((string)leitor[0]);
                    }
                }
            }

            conexao.Desconectar();

            return atividades;
        }

        public List<Atividade> AtividadesAtreladasAReparticao(int id_reparticao)
        {
            List<Atividade> atividades = new List<Atividade>();

            string comando = "SELECT Descricao, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_ReparticoesAtividades WHERE ID_Atividade = tbl_Atividades.ID_Atividade AND ID_Reparticao = @id_reparticao)) AS Nome_Colaborador FROM tbl_Atividades WHERE (ID_Setor = (SELECT ID_Setor FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = @id_reparticao) OR ID_Setor IS NULL) AND (SELECT COUNT(*) FROM tbl_ReparticoesAtividades WHERE ID_Atividade = tbl_Atividades.ID_Atividade AND ID_Reparticao = @id_reparticao) > 0";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_reparticao", id_reparticao);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        atividades.Add(new Atividade
                        {
                            Descricao = leitor[0].ToString(),
                            Nome_Colaborador = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return atividades;
        }

        public void AdicionarVinculoEntreAtividadeEReparticao(int id_reparticao, string atividade)
        {
            string comando = "INSERT INTO tbl_ReparticoesAtividades (ID_Atividade, ID_Reparticao) VALUES ((SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade), @id_reparticao)";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@atividade", atividade);
                insert.Parameters.AddWithValue("@id_reparticao", id_reparticao);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AdicionarInformacoesDaRotina(string atividade, int id_reparticao)
        {
            string comando2 = "INSERT INTO tbl_AtividadesIntervalos (ID_Atividade, Intervalo_Dias, Proxima) VALUES ((SELECT ID_ReparticaoAtividade FROM tbl_ReparticoesAtividades WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade) AND ID_Reparticao = @id_reparticao), (SELECT Intervalo FROM tbl_Atividades WHERE Descricao = @atividade), DATEADD(DD, (SELECT Intervalo FROM tbl_Atividades WHERE Descricao = @atividade), GETDATE()))";

            using (SqlCommand insert = new SqlCommand(comando2, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@atividade", atividade);
                insert.Parameters.AddWithValue("@id_reparticao", id_reparticao);

                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public Atividade TrazerInformacoesDaRotina(string atividade, int id_reparticao)
        {
            Atividade Atividade = new Atividade();

            string comando = "SELECT Intervalo_Dias, Proxima FROM tbl_AtividadesIntervalos WHERE ID_Atividade = (SELECT ID_ReparticaoAtividade FROM tbl_ReparticoesAtividades WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade) AND ID_Reparticao = @id_reparticao)";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@atividade", atividade);
                select.Parameters.AddWithValue("@id_reparticao", id_reparticao);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Atividade.Intervalo = Convert.ToInt32(leitor[0]);
                        Atividade.Proxima_Execucao = Convert.ToDateTime(leitor[1]);
                    }
                }
            }

            conexao.Desconectar();
            return Atividade;
        }

        public void EditarInformacoesDaRotina(Atividade atividade, int id_reparticao)
        {
            string cmd = "UPDATE tbl_AtividadesIntervalos SET Intervalo_Dias = @intervalo, Proxima = @proxima WHERE ID_Atividade = (SELECT ID_ReparticaoAtividade FROM tbl_ReparticoesAtividades WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade) AND ID_Reparticao = @id_reparticao)";

            using (SqlCommand update = new SqlCommand(cmd, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@atividade", atividade.Descricao);
                update.Parameters.AddWithValue("@proxima", atividade.Proxima_Execucao);
                update.Parameters.AddWithValue("@intervalo", atividade.Intervalo);
                update.Parameters.AddWithValue("@id_reparticao", id_reparticao);

                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void RemoverVinculoEntreAtividadeEReparticao(int id_reparticao, string atividade)
        {
            string cmd = "DELETE FROM tbl_AtividadesIntervalos WHERE ID_Atividade = (SELECT ID_ReparticaoAtividade FROM tbl_ReparticoesAtividades WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade) AND ID_Reparticao = @id_reparticao)";
            using (SqlCommand delete = new SqlCommand(cmd, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@atividade", atividade);
                delete.Parameters.AddWithValue("@id_reparticao", id_reparticao);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();

            string comando = "DELETE FROM tbl_ReparticoesAtividades WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade) AND ID_Reparticao = @id_reparticao";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@atividade", atividade);
                delete.Parameters.AddWithValue("@id_reparticao", id_reparticao);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        public List<Colaborador> ListaDeColaboradoresPorReparticaoComMatricula(int id_reparticao)
        {
            List<Colaborador> colaboradores = new List<Colaborador>();
            string comando = "SELECT tbl_Colaboradores.ID_Colaborador, Nome_Colaborador + ' (' +  Matricula + ')' AS Nome_Colaborador FROM tbl_ReparticoesColaboradores INNER JOIN tbl_Colaboradores ON tbl_ReparticoesColaboradores.ID_Colaborador = tbl_Colaboradores.ID_Colaborador WHERE ID_Reparticao = @id_reparticao ORDER BY Nome_Colaborador";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_reparticao", id_reparticao);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        colaboradores.Add(new Colaborador
                        {
                            ID_Colaborador = Convert.ToInt32(leitor[0]),
                            Nome_Colaborador = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return colaboradores;
        }

        public void ColaboradorPadraoDaAtividadeDaReparticao(int id_reparticao, string atividade, string matricula)
        {
            string comando = "UPDATE tbl_ReparticoesAtividades SET ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) WHERE ID_Atividade = (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @atividade) AND ID_Reparticao = @id_reparticao";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_reparticao", id_reparticao);
                update.Parameters.AddWithValue("@atividade", atividade);
                update.Parameters.AddWithValue("@matricula", matricula);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        #endregion

        #region Abastecimentos

        public List<string> PreencherComboReparticoesParaAbastecimento(string estabelecimento)
        {
            List<string> lista = new List<string>();
            string comando = "SELECT CONVERT(VARCHAR(10), ID_Reparticao) + '. ' + Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Setor <> 1 AND ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_Estabelecimentos WHERE Descricao = @estabelecimento)";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@estabelecimento", estabelecimento);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(Convert.ToString(leitor[0]));
                    }
                }
            }

            conexao.Desconectar();
            return lista;
        }

        public bool VerificarReposicaoLocal(string reparticao)
        {
            bool verificar;

            string[] partir = reparticao.Split('.');
            int id_reparticao = Convert.ToInt32(partir[0]);

            string comando = "SELECT IIF(ID_Setor = 3, 1, 0) FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = @id_reparticao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_reparticao", id_reparticao);
                verificar = Convert.ToBoolean(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return verificar;
        }

        public void LancarReposicaoLocal(int id_reparticao, string estabelecimento)
        {
            string comando = "INSERT INTO tbl_Reposicoes (ID_Origem, ID_Destino, Registro, Conclusao) VALUES ((SELECT ID_Reparticao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_Estabelecimentos WHERE Descricao = @estabelecimento) AND Descricao = 'ESTOQUE'), @id_destino, GETDATE(), 0)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_destino", id_reparticao);
                insert.Parameters.AddWithValue("@estabelecimento", estabelecimento);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            RegistrarProdutosDaReposicao(ProdutosDaReposicao(TrazerReparticaoDeOrigemDaReposicaoLocal(estabelecimento), id_reparticao));
        }

        public void LancarAbastecimento(int id_reparticao)
        {
            string comando = "INSERT INTO tbl_Reposicoes (ID_Origem, ID_Destino, Registro, Conclusao) VALUES (5, @id_destino, GETDATE(), 0)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_destino", id_reparticao);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            RegistrarProdutosDaReposicao(ProdutosDaReposicao(5, id_reparticao));
        }

        public List<ProdutoReposicao> ProdutosDaReposicao(int id_origem, int id_destino)
        {
            List<ProdutoReposicao> produtos = new List<ProdutoReposicao>();
            List<ProdutoReposicao> reposicao = new List<ProdutoReposicao>();

            string comando = "SELECT tbl_ProdutoVariacao.ID_ProdutoVariacao, (SELECT Nome_Produto FROM tbl_Produtos2 WHERE ID_Produto = tbl_ProdutoVariacao.ID_Produto) + IIF((SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) = 'SORTIDO', '', ' ' + (SELECT Cor FROM tbl_Cores WHERE ID_Cor = tbl_ProdutoVariacao.ID_Cor) + IIF((SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa) = 'SEM ESTAMPA', '', ' ' + (SELECT Estampa FROM tbl_Estampas WHERE ID_Estampa = tbl_ProdutoVariacao.ID_Estampa))) AS Produto, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = (SELECT ID_Prateleira FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = tbl_Catalogo.ID_Catalogo AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) = @id_origem)) AS Origem, (SELECT COUNT(*) FROM tbl_ProdutosLote WHERE (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = @id_origem AND Disponibilidade = 1) AS Qtd_Origem, (SELECT CMR FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = tbl_Catalogo.ID_Catalogo AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) = @id_origem) AS CMR, (SELECT Qtd_Ideal FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = tbl_Catalogo.ID_Catalogo AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) = @id_origem) AS Ideal, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = (SELECT ID_Prateleira FROM tbl_ProdutosLocalizacoes WHERE ID_Catalogo = tbl_Catalogo.ID_Catalogo AND (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLocalizacoes.ID_Prateleira) = @id_destino)) AS Destino, (SELECT COUNT(*) FROM tbl_ProdutosLote WHERE (SELECT ID_Reparticao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosLote.ID_Localizacao) = @id_destino AND Disponibilidade = 1) AS Qtd_Destino FROM tbl_Catalogo INNER JOIN tbl_ProdutoVariacao ON tbl_ProdutoVariacao.ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao INNER JOIN tbl_ProdutosLote ON tbl_ProdutosLote.ID_ProdutoVariacao = tbl_Catalogo.ID_ProdutoVariacao WHERE tbl_ProdutosLote.Disponibilidade = 1 GROUP BY ID_Produto, tbl_ProdutosLote.ID_ProdutoVariacao, ID_Cor, ID_Estampa, tbl_ProdutoVariacao.ID_ProdutoVariacao, tbl_ProdutosLote.Disponibilidade, tbl_Catalogo.ID_Catalogo";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_origem", id_origem);
                select.Parameters.AddWithValue("@id_destino", id_destino);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        produtos.Add(new ProdutoReposicao
                        {
                            ID_ProdutoVariacao = Convert.ToInt32(leitor[0]),
                            Nome_Produto = leitor[1].ToString(),
                            Local_Origem = leitor[2].ToString(),
                            Qtd_Origem = Convert.ToInt32(leitor[3]),
                            CMR = Convert.ToInt32(leitor[4]),
                            Qtd_Ideal = Convert.ToInt32(leitor[5]),
                            Local_Destino = leitor[6].ToString(),
                            Qtd_Atual = Convert.ToInt32(leitor[7])
                        });
                    }
                }
            }

            conexao.Desconectar();

            foreach (ProdutoReposicao produto in produtos)
            {
                bool repor;

                int quantidade = produto.Qtd_Ideal - produto.Qtd_Atual;

                if (quantidade >= produto.CMR && quantidade > 0)
                {
                    if (produto.Qtd_Origem >= quantidade && produto.Qtd_Origem > 0)
                    {
                        repor = true;
                    }
                    else if (produto.Qtd_Origem < quantidade && produto.Qtd_Origem > 0)
                    {
                        quantidade = produto.Qtd_Origem;
                        repor = true;
                    }
                    else
                    {
                        repor = false;
                    }
                }
                else
                {
                    repor = false;
                }

                if (repor)
                {
                    reposicao.Add(new ProdutoReposicao()
                    {
                        ID_ProdutoVariacao = produto.ID_ProdutoVariacao,
                        Nome_Produto = produto.Nome_Produto,
                        Quantidade = quantidade,
                        Local_Destino = produto.Local_Destino,
                        Local_Origem = produto.Local_Origem
                    });
                }
            }

            return reposicao;
        }

        public void RegistrarProdutosDaReposicao(List<ProdutoReposicao> produtos)
        {
            string comando = "INSERT INTO tbl_ProdutosReposicao (ID_Reposicao, ID_ProdutoVariacao, ID_Origem, ID_Destino, Reposicao) VALUES ((SELECT TOP(1) ID_Reposicao FROM tbl_Reposicoes ORDER BY ID_Reposicao DESC), @id_produtoVariacao, (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @origem), (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @destino), @quantidade)";

            foreach (ProdutoReposicao produto in produtos)
            {
                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@id_produtoVariacao", produto.ID_ProdutoVariacao);
                    insert.Parameters.AddWithValue("@origem", produto.Local_Origem);
                    insert.Parameters.AddWithValue("@destino", produto.Local_Destino);
                    insert.Parameters.AddWithValue("@quantidade", produto.Quantidade);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();
        }

        public int IdDaUltimaReposicao()
        {
            int id;
            string comando = "SELECT TOP(1) ID_Reposicao FROM tbl_Reposicoes ORDER BY ID_Reposicao DESC";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                id = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return id;
        }



        public int TrazerReparticaoDeOrigemDaReposicaoLocal(string estabelecimento)
        {
            int id_reparticao;

            string comando = "SELECT ID_Reparticao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_Estabelecimentos WHERE Descricao = @estabelecimento) AND Descricao = 'ESTOQUE'";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@estabelecimento", estabelecimento);
                id_reparticao = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return id_reparticao;
        }

        public List<Reposicao> ListaDeReposicoes()
        {
            List<Reposicao> reposicoes = new List<Reposicao>();
            string comando = "SELECT ID_Reposicao, IIF((SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Reposicoes.ID_Origem) = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Reposicoes.ID_Destino), 'Reposição', 'Abastecimento') AS Tipo, IIF((SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Reposicoes.ID_Origem) = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Reposicoes.ID_Destino),(SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Reposicoes.ID_Origem)), 'CENTRO DE DISTRIBUIÇÃO > ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = tbl_Reposicoes.ID_Destino))) AS Descricao, Registro, IIF(Conclusao = 1, 'Concluído', 'Pendente') AS Status FROM tbl_Reposicoes";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        reposicoes.Add(new Reposicao
                        {
                            ID_Reposicao = Convert.ToInt32(leitor[0]),
                            Tipo = leitor[1].ToString(),
                            Descricao = leitor[2].ToString(),
                            Registro = Convert.ToDateTime(leitor[3]),
                            Status = leitor[4].ToString()
                        });
                    }
                }
            }                

            conexao.Desconectar();

            return reposicoes;
        }

        public List<ProdutoReposicao> ListaDeProdutosParaConfirmarReposicao(int id_reposicao)
        {
            List<ProdutoReposicao> produtos = new List<ProdutoReposicao>();
            string comando = "SELECT ID_ProdutoVariacao, (SELECT Nome FROM tbl_Catalogo WHERE ID_ProdutoVariacao = tbl_ProdutosReposicao.ID_ProdutoVariacao) AS Produto, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosReposicao.ID_Origem) AS Origem, (SELECT Localizacao FROM tbl_Prateleiras WHERE ID_Prateleira = tbl_ProdutosReposicao.ID_Destino) AS Destino, Reposicao FROM tbl_ProdutosReposicao WHERE ID_Reposicao = @id_reposicao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_reposicao", id_reposicao);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        produtos.Add(new ProdutoReposicao
                        {
                            ID_ProdutoVariacao = Convert.ToInt32(leitor[0]),
                            Nome_Produto = leitor[1].ToString(),
                            Local_Origem = leitor[2].ToString(),
                            Local_Destino = leitor[3].ToString(),
                            Quantidade = Convert.ToInt32(leitor[4])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return produtos;
        }

        public void ConfirmarReposicao(List<ProdutoReposicao> produtos, string status, int id_reposicao)
        {
            List<int> produtos_lote = new List<int>();

            string comando = "UPDATE tbl_ProdutosLote SET ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @destino), Status = @status WHERE ID_ProdutoLote = @id_produtolote";
            string comando1 = "SELECT TOP(@confirmacao) ID_ProdutoLote FROM tbl_ProdutosLote WHERE ID_ProdutoVariacao = @id_produtoVariacao AND ID_Localizacao = (SELECT ID_Prateleira FROM tbl_Prateleiras WHERE Localizacao = @origem) AND Disponibilidade = 1";
            string cmd = "UPDATE tbl_ProdutosReposicao SET Confirmacao = @confirmacao WHERE ID_ProdutoVariacao = @id_produtoVariacao AND ID_Reposicao = @id_reposicao";
            string command = "UPDATE tbl_Reposicoes SET Conclusao = 1 WHERE ID_Reposicao = @id_reposicao";

            using (SqlCommand update = new SqlCommand(command, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_reposicao", id_reposicao);
                update.ExecuteNonQuery();
            }

            foreach (ProdutoReposicao produto in produtos)
            {
                using (SqlCommand select = new SqlCommand(comando1, conexao.Conectar()))
                {
                    select.Parameters.AddWithValue("@confirmacao", produto.Confirmacao);
                    select.Parameters.AddWithValue("@id_produtoVariacao", produto.ID_ProdutoVariacao);
                    select.Parameters.AddWithValue("@origem", produto.Local_Origem);

                    using (SqlDataReader leitor = select.ExecuteReader())
                    {
                        while (leitor.Read())
                        {
                            produtos_lote.Add(Convert.ToInt32(leitor[0]));
                        }
                    }
                }

                foreach (int id_produtolote in produtos_lote)
                {
                    using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
                    {
                        update.Parameters.AddWithValue("@destino", produto.Local_Destino);
                        update.Parameters.AddWithValue("@id_produtolote", id_produtolote);
                        update.Parameters.AddWithValue("@status", status);
                        update.ExecuteNonQuery();
                    }

                    Produto_Lote produto_lote = new Produto_Lote { ID_ProdutoLote = id_produtolote, Status = status };
                    RegistrarAtualizacaoDeStatus(produto_lote);
                }

                produtos_lote.Clear();

                using (SqlCommand update = new SqlCommand(cmd, conexao.Conectar()))
                {
                    update.Parameters.AddWithValue("@id_reposicao", id_reposicao);
                    update.Parameters.AddWithValue("@confirmacao", produto.Confirmacao);
                    update.Parameters.AddWithValue("@id_produtoVariacao", produto.ID_ProdutoVariacao);
                    update.ExecuteNonQuery();
                }
            }
        }

        #endregion

        #endregion

        #region Escala

        public List<Horario> InformacoesDaEscala(int id_colaborador)
        {
            List<Horario> Horarios = new List<Horario>();
            string comando = "SELECT ID_Horario, ID_Colaborador, Dia, Descricao, Inicio, Termino FROM tbl_Horarios WHERE ID_Colaborador = @id_colaborador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Horarios.Add(new Horario
                {
                    ID_Horario = Convert.ToInt32(leitor[0]),
                    ID_Colaborador = Convert.ToInt32(leitor[1]),
                    Dia = leitor[2].ToString(),
                    Descricao = leitor[3].ToString(),
                    Inicio = leitor[4].ToString(),
                    Termino = leitor[5].ToString()
                });
            }
            leitor.Close();
            conexao.Desconectar();

            return Horarios;
        }

        public List<string> DiasDeFolga(int id_colaborador)
        {
            string comando = "SELECT Folga FROM tbl_Folgas WHERE ID_Colaborador = @id_colaborador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            List<string> folgas = new List<string>();

            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                if (leitor[0].ToString() != string.Empty)
                    folgas.Add(leitor[0].ToString());
            }
            leitor.Close();

            conexao.Desconectar();

            return folgas;
        }

        public Escala ExpedienteDoDia(int id_colaborador, DateTime data)
        {
            Escala fulano = new Escala();
            string comando = "SELECT Previsao_Inicio, Previsao_Termino, Status FROM tbl_Expediente WHERE Data = @data AND ID_Colaborador = @id_colaborador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            select.Parameters.AddWithValue("@data", data);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                fulano.segServicoInicio = leitor[0].ToString();
                fulano.segServicoTermino = leitor[1].ToString();
                fulano.Folga = leitor[2].ToString();
            }
            leitor.Close();
            conexao.Desconectar();
            return fulano;
        }

        public string TrazerRodizioDeTurno(int id_colaborador)
        {
            string comando = "SELECT ISNULL((SELECT Turno FROM tbl_Turnos WHERE ID_Turno = tbl_TurnosColaboradores.ID_Turno), '') FROM tbl_TurnosColaboradores WHERE ID_Colaborador = @id_colaborador";

            string turno = string.Empty;

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                if (select.ExecuteScalar() == null) { turno = string.Empty; }
                else { turno = select.ExecuteScalar().ToString(); }
            }

            conexao.Desconectar();

            return turno;
        }

        public void RemoverRodizioDeTurnos(int id_colaborador, string turno)
        {
            string comando = "DELETE FROM tbl_TurnosColaboradores WHERE ID_Turno = (SELECT ID_Turno FROM tbl_Turnos WHERE Turno = @turno) AND ID_Colaborador = @id_colaborador";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                delete.Parameters.AddWithValue("@turno", turno);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AdicionarRodizioDeTurnos(int id_colaborador, string turno)
        {
            string comando = "INSERT INTO tbl_TurnosColaboradores (ID_Turno, ID_Colaborador) VALUES ((SELECT ID_Turno FROM tbl_Turnos WHERE Turno = @turno), @id_colaborador)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                insert.Parameters.AddWithValue("@turno", turno);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void EditarHorariosIndividuais(List<Horario> Horarios, int id_colaborador)
        {
            string comando = "DELETE FROM tbl_Folgas WHERE ID_Colaborador = @id_colaborador";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            delete.ExecuteNonQuery();

            foreach (Horario Horario in Horarios)
            {
                string command = "UPDATE tbl_Horarios SET Inicio = @inicio, Termino = @termino WHERE ID_Horario = @id_horario";
                SqlCommand update = new SqlCommand(command, conexao.Conectar());
                update.Parameters.AddWithValue("@inicio", Horario.Inicio);
                update.Parameters.AddWithValue("@termino", Horario.Termino);
                update.Parameters.AddWithValue("id_horario", Horario.ID_Horario);
                update.ExecuteNonQuery();

                if (Horario.Folga && Horario.Descricao == "Serviço")
                {
                    string cmd = "INSERT INTO tbl_Folgas (ID_Colaborador, Folga) VALUES (@id_colaborador, @dia)";
                    SqlCommand insert = new SqlCommand(cmd, conexao.Conectar());
                    insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                    insert.Parameters.AddWithValue("@dia", Horario.Dia);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Horário atualizado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }



        public List<Horario> HorariosDoTurno(int id_colaborador)
        {
            List<Horario> Horarios = new List<Horario>();
            string comando = "SELECT ID_Horario, ID_Colaborador, Dia, Descricao, Inicio, Termino FROM tbl_Horarios WHERE ID_Colaborador = @id_colaborador";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Horarios.Add(new Horario
                {
                    ID_Horario = Convert.ToInt32(leitor[0]),
                    ID_Colaborador = Convert.ToInt32(leitor[1]),
                    Dia = leitor[2].ToString(),
                    Descricao = leitor[3].ToString(),
                    Inicio = leitor[4].ToString(),
                    Termino = leitor[5].ToString()
                });
            }
            leitor.Close();
            conexao.Desconectar();

            return Horarios;
        }

        public void AtribuirHorariosDoUltimoColaboradorCadastrado(List<Horario> Horarios, int id_turno)
        {
            string cmd1 = "INSERT INTO tbl_Horarios (ID_Colaborador, Dia, Descricao, Inicio, Termino) VALUES ((SELECT TOP (1) ID_Colaborador FROM tbl_Colaboradores ORDER BY ID_Colaborador DESC), @dia, @descricao, @inicio, @termino)";

            foreach (Turno Horario in Horarios)
            {
                using (SqlCommand insert = new SqlCommand(cmd1, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@dia", Horario.Dia);
                    insert.Parameters.AddWithValue("@descricao", Horario.Descricao);
                    insert.Parameters.AddWithValue("@inicio", Horario.Inicio);
                    insert.Parameters.AddWithValue("@termino", Horario.Termino);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            string cmd2 = "UPDATE tbl_Horarios SET Inicio = (SELECT Inicio FROM tbl_HorariosTurno WHERE ID_Turno = @id_turno AND Dia = tbl_Horarios.Dia AND Descricao = tbl_Horarios.Descricao), Termino = (SELECT Termino FROM tbl_HorariosTurno WHERE ID_Turno = @id_turno AND Dia = tbl_Horarios.Dia AND Descricao = tbl_Horarios.Descricao) WHERE ID_Colaborador = (SELECT TOP (1) ID_Colaborador FROM tbl_Colaboradores ORDER BY ID_Colaborador DESC)";

            using (SqlCommand update = new SqlCommand(cmd2, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_turno", id_turno);
                update.ExecuteNonQuery();
            }

            string cmd3 = "INSERT INTO tbl_Folgas (ID_Colaborador, Folga) SELECT (SELECT TOP (1) ID_Colaborador FROM tbl_Colaboradores ORDER BY ID_Colaborador DESC), Folga FROM tbl_FolgasTurno WHERE ID_Turno = @id_turno";

            using (SqlCommand insert = new SqlCommand(cmd3, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_turno", id_turno);
                insert.ExecuteNonQuery();
            }
        }

        #endregion

        #region Turnos

        public List<Turno> ListaDeTurnos()
        {
            List<Turno> Turnos = new List<Turno>();
            string comando = "SELECT ID_Turno, Turno FROM tbl_Turnos";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Turnos.Add(new Turno
                        {
                            ID_Turno = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return Turnos;
        }

        public List<Turno> EscalaDoTurno(int id_turno)
        {
            List<Turno> Horarios = new List<Turno>();
            string comando = "SELECT ID_HorarioTurno, ID_Turno, Dia, Descricao, Inicio, Termino FROM tbl_HorariosTurno WHERE ID_Turno = @id_turno";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_turno", id_turno);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                Horarios.Add(new Turno
                {
                    ID_HorarioTurno = Convert.ToInt32(leitor[0]),
                    ID_Turno = Convert.ToInt32(leitor[1]),
                    Dia = leitor[2].ToString(),
                    Descricao = leitor[3].ToString(),
                    Inicio = leitor[4].ToString(),
                    Termino = leitor[5].ToString()
                });
            }
            leitor.Close();
            conexao.Desconectar();

            return Horarios;
        }

        public List<string> DiasDeFolgaDoTurno(int id_turno)
        {
            string comando = "SELECT Folga FROM tbl_FolgasTurno WHERE ID_Turno = @id_turno";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_turno", id_turno);
            List<string> folgas = new List<string>();

            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                if (leitor[0].ToString() != string.Empty)
                    folgas.Add(leitor[0].ToString());
            }
            leitor.Close();

            conexao.Desconectar();

            return folgas;
        }

        public bool VerificarSeTurnoJaExiste(string turno)
        {
            string comando = "SELECT Turno FROM tbl_Turnos WHERE Turno = @turno";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@turno", turno);
            string resultado;
            try
            {
                resultado = select.ExecuteScalar().ToString();
            }
            catch { resultado = string.Empty; }

            bool verificar;

            if (resultado == string.Empty)
            {
                verificar = false;
            }
            else
            {
                verificar = true;
            }

            conexao.Desconectar();
            return verificar;
        }

        public void CadastrarTurno(Turno turno)
        {
            string comando = "INSERT INTO tbl_Turnos (Turno, Rodizio) VALUES (@descricao, @rodizio)";
            SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
            insert.Parameters.AddWithValue("@descricao", turno.Descricao);
            insert.Parameters.AddWithValue("@rodizio", turno.Rodizio);
            insert.ExecuteNonQuery();
        }

        public void InserirHorariosDoTurno(List<Turno> Horarios, string turno)
        {
            foreach (Turno Horario in Horarios)
            {
                string comando = "INSERT INTO tbl_HorariosTurno (ID_Turno, Dia, Descricao, Inicio, Termino) VALUES ((SELECT ID_Turno FROM tbl_Turnos WHERE Turno = @turno), @dia, @descricao, @inicio, @termino)";
                SqlCommand insert = new SqlCommand(comando, conexao.Conectar());
                insert.Parameters.AddWithValue("@turno", turno);
                insert.Parameters.AddWithValue("@dia", Horario.Dia);
                insert.Parameters.AddWithValue("@descricao", Horario.Descricao);
                insert.Parameters.AddWithValue("@inicio", Horario.Inicio);
                insert.Parameters.AddWithValue("@termino", Horario.Termino);
                insert.ExecuteNonQuery();

                if (Horario.Folga && Horario.Descricao == "Serviço")
                {
                    string cmd = "INSERT INTO tbl_FolgasTurno (ID_Turno, Folga) VALUES ((SELECT ID_Turno FROM tbl_Turnos WHERE Turno = @turno), @dia)";
                    SqlCommand insert2 = new SqlCommand(cmd, conexao.Conectar());
                    insert2.Parameters.AddWithValue("@turno", turno);
                    insert2.Parameters.AddWithValue("@dia", Horario.Dia);
                    insert2.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Turno cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void EditarHorariosDoTurno(List<Turno> Horarios, int id_turno)
        {
            string comando = "DELETE FROM tbl_FolgasTurno WHERE ID_Turno = @id_turno";
            SqlCommand delete = new SqlCommand(comando, conexao.Conectar());
            delete.Parameters.AddWithValue("@id_turno", id_turno);
            delete.ExecuteNonQuery();

            foreach (Turno Horario in Horarios)
            {
                string command = "UPDATE tbl_HorariosTurno SET Inicio = @inicio, Termino = @termino WHERE ID_HorarioTurno = @id_turno";
                SqlCommand update = new SqlCommand(command, conexao.Conectar());
                update.Parameters.AddWithValue("@inicio", Horario.Inicio);
                update.Parameters.AddWithValue("@termino", Horario.Termino);
                update.Parameters.AddWithValue("id_turno", Horario.ID_HorarioTurno);
                update.ExecuteNonQuery();

                if (Horario.Folga && Horario.Descricao == "Serviço")
                {
                    string cmd = "INSERT INTO tbl_FolgasTurno (ID_Turno, Folga) VALUES (@id_turno, @dia)";
                    SqlCommand insert = new SqlCommand(cmd, conexao.Conectar());
                    insert.Parameters.AddWithValue("@id_turno", id_turno);
                    insert.Parameters.AddWithValue("@dia", Horario.Dia);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Turno atualizado com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public List<Turno> TrazerTurnos()//Preencher Combobox Turnos
        {
            List<Turno> Turnos = new List<Turno>();
            using (SqlCommand select = new SqlCommand("SELECT ID_Turno, Turno FROM tbl_Turnos ORDER BY Turno", conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Turnos.Add(new Turno
                        {
                            ID_Turno = (int)leitor[0],
                            Descricao = (string)leitor[1]
                        });
                    }
                }
            }
            conexao.Desconectar();

            return Turnos;
        }

        public List<Turno> TrazerTurnosDoRodizio()
        {
            List<Turno> Turnos = new List<Turno>();
            using (SqlCommand select = new SqlCommand("SELECT ID_Turno, Turno FROM tbl_Turnos WHERE Rodizio = 1 ORDER BY Turno", conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Turnos.Add(new Turno
                        {
                            ID_Turno = (int)leitor[0],
                            Descricao = (string)leitor[1]
                        });
                    }
                }
            }
            conexao.Desconectar();

            return Turnos;
        }

        public void AtribuirTurnoParaOColaborador(string turno, int id_colaborador)
        {
            string comando = "UPDATE tbl_Horarios SET Inicio = (SELECT Inicio FROM tbl_HorariosTurno WHERE ID_Turno = (SELECT ID_Turno FROM tbl_Turnos WHERE Turno = @turno) AND Dia = tbl_Horarios.Dia AND Descricao = tbl_Horarios.Descricao), Termino = (SELECT Termino FROM tbl_HorariosTurno WHERE ID_Turno = (SELECT ID_Turno FROM tbl_Turnos WHERE Turno = @turno) AND Dia = tbl_Horarios.Dia AND Descricao = tbl_Horarios.Descricao) WHERE ID_Colaborador = @id_colaborador";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@turno", turno);
            update.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            update.ExecuteNonQuery();

            string cmd = "DELETE FROM tbl_Folgas WHERE ID_Colaborador = @id_colaborador";
            SqlCommand delete = new SqlCommand(cmd, conexao.Conectar());
            delete.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            delete.ExecuteNonQuery();

            string cmdo = "INSERT INTO tbl_Folgas (ID_Colaborador, Folga) SELECT @id_colaborador, Folga FROM tbl_FolgasTurno WHERE ID_Turno = (SELECT ID_Turno FROM tbl_Turnos WHERE Turno = @turno)";
            SqlCommand insert = new SqlCommand(cmdo, conexao.Conectar());
            insert.Parameters.AddWithValue("@turno", turno);
            insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            insert.ExecuteNonQuery();
        }

        #endregion

        #region Configurações

        public List<Parametro> TrazerListaDeParametros()
        {
            List<Parametro> lista = new List<Parametro>();
            string comando = "SELECT ID_Parametro, Nome_Parametro, CONVERT(VARCHAR(300), Valor_Parametro) AS Valor, 'Decimal' AS Tipo FROM tbl_Parametros UNION SELECT ID_Parametro, Nome_Parametro, Valor_Parametro, 'Texto' FROM tbl_ParametrosTexto UNION SELECT ID_Parametro, Nome_Parametro, CONVERT(VARCHAR(300), Valor_Parametro), 'Booleano' FROM tbl_ParametrosBooleanos ORDER BY Nome_Parametro";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        string tipo = leitor[3].ToString();
                        string valor = leitor[2].ToString();

                        if (tipo == "Booleano")
                        {
                            if (valor == "1") { valor = "Verdadeiro"; }
                            else { valor = "Falso"; }
                        }
                        else if (tipo == "Decimal")
                        {
                            valor = Convert.ToDecimal(valor).ToString();
                        }

                        lista.Add(new Parametro
                        {
                            ID_Parametro = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Valor = leitor[2].ToString(),
                            Tipo = leitor[3].ToString()
                        });
                    }
                    conexao.Desconectar();
                }

                return lista;
            }

        }

        public void EditarParametros(List<Parametro> Parametros)
        {
            foreach (Parametro Parametro in Parametros)
            {
                if (Parametro.Edicao)
                {
                    string comando = string.Empty;

                    if (Parametro.Tipo == "Decimal")
                    {
                        comando = "UPDATE tbl_Parametros SET Valor_Parametro = @valor WHERE Nome_Parametro = @parametro";
                        decimal valor = Convert.ToDecimal(Parametro.Valor);

                        using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
                        {
                            update.Parameters.AddWithValue("@valor", valor);
                            update.Parameters.AddWithValue("@parametro", Parametro.Descricao);
                            update.ExecuteNonQuery();
                        }
                    }
                    else if (Parametro.Tipo == "Texto")
                    {
                        comando = "UPDATE tbl_ParametrosTexto SET Valor_Parametro = @valor WHERE Nome_Parametro = @parametro";

                        using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
                        {
                            update.Parameters.AddWithValue("@valor", Parametro.Valor);
                            update.Parameters.AddWithValue("@parametro", Parametro.Descricao);
                            update.ExecuteNonQuery();
                        }
                    }
                    else if (Parametro.Tipo == "Booleano")
                    {
                        comando = "UPDATE tbl_ParametrosBooleanos SET Valor_Parametro = @valor WHERE Nome_Parametro = @parametro";
                        bool valor = Convert.ToBoolean(Parametro.Valor);

                        using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
                        {
                            update.Parameters.AddWithValue("@valor", valor);
                            update.Parameters.AddWithValue("@parametro", Parametro.Descricao);
                            update.ExecuteNonQuery();
                        }
                    }
                }
            }

            conexao.Desconectar();
        }

        public void EditarParametroBooleano()
        {

        }

        public void EditarDefinicoesDoComputador(CPU Computador)
        {
            string comando = "UPDATE tbl_CPUs SET Impressora_A4 = @a4, Impressora_Termica = @termica, Porta_Serial = @serial, ID_Reparticao = @id_reparticao WHERE ID_Unico = @id";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@a4", Computador.Impressora_A4);
                update.Parameters.AddWithValue("@termica", Computador.Impressora_Termica);
                update.Parameters.AddWithValue("@serial", Computador.Porta_Serial);
                update.Parameters.AddWithValue("@id", Computador.ID);
                update.Parameters.AddWithValue("@id_reparticao", Computador.ID_Reparticao);

                update.ExecuteNonQuery();
            }
        }

        public CPU InformacoesDoComputador(string id, string usuario)
        {
            CPU Computador = new CPU();
            string comando = "SELECT Nome_Computador, Nome_Usuario, Porta_Serial FROM tbl_CPUs INNER JOIN tbl_ReparticoesEstabelecimentos ON tbl_CPUs.ID_Reparticao = tbl_ReparticoesEstabelecimentos.ID_Reparticao WHERE ID_Unico = @id";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);
                select.Parameters.AddWithValue("@usuario", usuario);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        Computador.ID = id;
                        Computador.Computador = leitor[0].ToString();
                        Computador.Usuario = leitor[1].ToString();
                        Computador.Porta_Serial = leitor[2].ToString();
                    }
                }
                conexao.Desconectar();
            }
            return Computador;
        }

        public void CadastrarParametro(Parametro Parametro)
        {
            string comando;

            if (Parametro.Tipo == "Decimal")
            {
                comando = "INSERT INTO tbl_Parametros (Nome_Parametro, Valor_Parametro) VALUES (@parametro, @valor)";
                decimal valor = Convert.ToDecimal(Parametro.Valor);

                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@valor", valor);
                    insert.Parameters.AddWithValue("@parametro", Parametro.Descricao);
                    insert.ExecuteNonQuery();
                }
            }
            else if (Parametro.Tipo == "Texto")
            {
                comando = "INSERT INTO tbl_ParametrosTexto (Nome_Parametro, Valor_Parametro) VALUES (@parametro, @valor)";

                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@valor", Parametro.Valor);
                    insert.Parameters.AddWithValue("@parametro", Parametro.Descricao);
                    insert.ExecuteNonQuery();
                }
            }
            else if (Parametro.Tipo == "Booleano")
            {
                comando = "INSERT INTO tbl_ParametrosBooleanos (Nome_Parametro, Valor_Parametro) VALUES (@parametro, @valor)";
                bool valor = Convert.ToBoolean(Convert.ToInt32(Parametro.Valor));

                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@valor", valor);
                    insert.Parameters.AddWithValue("@parametro", Parametro.Descricao);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Parâmetro cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarParametro(Parametro Parametro)
        {
            string comando;

            if (Parametro.Tipo == "Decimal")
            {
                comando = "DELETE FROM tbl_Parametros WHERE Nome_Parametro = @parametro";

                using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
                {
                    delete.Parameters.AddWithValue("@parametro", Parametro.Descricao);
                    delete.ExecuteNonQuery();
                }
            }
            else if (Parametro.Tipo == "Texto")
            {
                comando = "DELETE FROM tbl_ParametrosTexto WHERE Nome_Parametro = @parametro";

                using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
                {
                    delete.Parameters.AddWithValue("@parametro", Parametro.Descricao);
                    delete.ExecuteNonQuery();
                }
            }
            else if (Parametro.Tipo == "Booleano")
            {
                comando = "DELETE FROM tbl_ParametrosBooleanos WHERE Nome_Parametro = @parametro";

                using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
                {
                    delete.Parameters.AddWithValue("@parametro", Parametro.Descricao);
                    delete.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Parâmetro apagado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public string TrazerReparticaoDoComputador(string id)
        {
            string reparticao = string.Empty;
            string comando = "SELECT CONVERT(VARCHAR(10), ID_Reparticao) + '. ' + Descricao + ' - ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = tbl_ReparticoesEstabelecimentos.ID_Estabelecimento) FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT ID_Reparticao FROM tbl_CPUs WHERE ID_Unico = @id)";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);
                reparticao = select.ExecuteScalar().ToString();
            }
            conexao.Desconectar();

            return reparticao;
        }

        #endregion

        #region Identificações das prateleiras
        public List<Identificacao> ListaDeIdentificacoes()
        {
            List<Identificacao> identificacoes = new List<Identificacao>();
            string comando = "SELECT ID_Identificacao, Identificacao, (SELECT Nome_Setor FROM tbl_Setores WHERE ID_Setor = tbl_IdentificacoesPrateleiras.ID_Setor) AS Setor, Auto_Impressao FROM tbl_IdentificacoesPrateleiras";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        identificacoes.Add(new Identificacao
                        {
                            ID_Identificacao = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString(),
                            Setor = leitor[2].ToString(),
                            Auto_Impressao = Convert.ToBoolean(leitor[3])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return identificacoes;
        }
        public Identificacao InformacoesDaIdentificacao(int id)
        {
            Identificacao identificacao = new Identificacao();
            string comando = "SELECT Identificacao, (SELECT Nome_Setor FROM tbl_Setores WHERE ID_Setor = tbl_IdentificacoesPrateleiras.ID_Setor) FROM tbl_IdentificacoesPrateleiras WHERE ID_Identificacao = @id";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id", id);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        identificacao.ID_Identificacao = id;
                        identificacao.Descricao = leitor[0].ToString();
                        identificacao.Setor = leitor[1].ToString();
                    }
                }
            }
            conexao.Desconectar();

            return identificacao;
        }
        public bool VerificarSeIdentificacaoJaExiste(string identificacao)
        {
            bool verificar;
            string comando = "SELECT ID_Identificacao FROM tbl_IdentificacoesPrateleiras WHERE Identificacao = @identificacao";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@identificacao", identificacao);

                if (select.ExecuteScalar() == null) { verificar = false; }
                else { verificar = true; }
            }
            conexao.Desconectar();

            return verificar;
        }
        public void CadastrarIdentifacao(Identificacao Identificacao)
        {
            string comando = "INSERT INTO tbl_IdentificacoesPrateleiras (Identificacao, ID_Setor, Auto_Impressao) VALUES (@identificacao, (SELECT ID_Setor FROM tbl_Setores WHERE Nome_Setor = @setor), @auto)";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@identificacao", Identificacao.Descricao);
                insert.Parameters.AddWithValue("@setor", Identificacao.Setor);
                insert.Parameters.AddWithValue("@auto", Identificacao.Auto_Impressao);

                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void EditarIdentifacao(Identificacao Identificacao)
        {
            string comando = "UPDATE tbl_IdentificacoesPrateleiras SET Identificacao = @identificacao, ID_Setor = (SELECT ID_Setor FROM tbl_Setores WHERE Nome_Setor = @setor), Auto_Impressao = @auto WHERE ID_Identificacao = @id";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", Identificacao.ID_Identificacao);
                update.Parameters.AddWithValue("@identificacao", Identificacao.Descricao);
                update.Parameters.AddWithValue("@setor", Identificacao.Setor);
                update.Parameters.AddWithValue("@auto", Identificacao.Auto_Impressao);

                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void ApagarIdentificacao(int id)
        {
            string comando = "DELETE FROM tbl_IdentificacoesPrateleiras WHERE ID_Identificacao = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }
        public void AlterarImpressaoAutomaticaDaIdentificacao(int id)
        {
            string comando = "UPDATE tbl_IdentificacoesPrateleiras SET Auto_Impressao = IIF(Auto_Impressao = 1, 0, 1) WHERE ID_Identificacao = @id";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", id);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        #endregion

        #region Abreviações

        public List<Abreviacao> ListaDeAbreviacoes()
        {
            List<Abreviacao> abreviacoes = new List<Abreviacao>();
            string comando = "SELECT ID_Abreviacao, Texto, Abreviacao FROM tbl_Abreviacoes";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        abreviacoes.Add(new Abreviacao
                        {
                            ID_Abreviacao = Convert.ToInt32(leitor[0]),
                            Texto = leitor[1].ToString(),
                            Descricao = leitor[2].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return abreviacoes;
        }
        public bool VerificarSePalavraJaContemAbreviacao(string texto)
        {
            bool verificar;
            string comando = "SELECT ID_Abreviacao FROM tbl_Abreviacoes WHERE Texto = @texto";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@texto", texto);

                if (select.ExecuteScalar() == null) { verificar = false; }
                else { verificar = true; }
            }
            conexao.Desconectar();

            return verificar;
        }
        public void CadastrarAbreviacao(Abreviacao Abreviacao)
        {
            string comando = "INSERT INTO tbl_Abreviacoes (Texto, Abreviacao) VALUES (@texto, @abreviacao)";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@texto", Abreviacao.Texto);
                insert.Parameters.AddWithValue("@abreviacao", Abreviacao.Descricao);

                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void EditarAbreviacao(Abreviacao Abreviacao)
        {
            string comando = "UPDATE tbl_Abreviacoes SET Abreviacao = @abreviacao WHERE ID_Abreviacao = @id";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id", Abreviacao.ID_Abreviacao);
                update.Parameters.AddWithValue("@abreviacao", Abreviacao.Descricao);

                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }
        public void ApagarAbreviacao(int id)
        {
            string comando = "DELETE FROM tbl_Abreviacoes WHERE ID_Abreviacao = @id";
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id", id);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }
        public string TrazerAbreviacao(string texto)
        {
            string abreviacao = string.Empty;

            string comando = "SELECT Abreviacao FROM tbl_Abreviacoes WHERE Texto = @texto";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@texto", texto);

                if (select.ExecuteScalar() == null) { abreviacao = texto; }
                else { abreviacao = select.ExecuteScalar().ToString(); }
            }
            conexao.Desconectar();

            return abreviacao;
        }

        #endregion

        #region Regulamento

        public void Regulamentos(DataGridView dataGrid, BindingSource bindingSource)
        {
            string comando = "SELECT ID_Regulamento AS ID, Descricao, Tipo FROM tbl_Regulamentos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            bindingSource.DataSource = dataSet;
            bindingSource.DataMember = dataSet.Tables[0].TableName;
            dataGrid.DataSource = bindingSource;
            conexao.Desconectar();
        }

        public List<string> ListaDeTiposDeRegulamento()
        {
            List<string> tipos = new List<string>();
            string comando = "SELECT DISTINCT Tipo FROM tbl_Regulamentos ORDER BY Tipo";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        tipos.Add(leitor[0].ToString());
                    }
                }
            }

            conexao.Desconectar();

            return tipos;
        }

        public List<Topico_Regulamento> ListaDeTopicosDoRegulamento(int id_regulamento)
        {
            List<Topico_Regulamento> topicos = new List<Topico_Regulamento>();
            string comando = "SELECT Ordem, Descricao, Detalhes FROM tbl_RegulamentosTopicos WHERE ID_Regulamento = @id_regulamento";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_regulamento", id_regulamento);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        topicos.Add(new Topico_Regulamento
                        {
                            Ordem = Convert.ToInt32(leitor[0]),
                            Topico = leitor[1].ToString(),
                            Detalhes = leitor[2].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return topicos;
        }

        public bool VerificarSeRegulamentoJaExiste(string descricao)
        {
            bool verificar;
            string comando = "SELECT Descricao FROM tbl_Regulamentos WHERE Descricao = @descricao";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@descricao", descricao);

                if (select.ExecuteScalar() == null) { verificar = false; }
                else { verificar = true; }
            }
            conexao.Desconectar();

            return verificar;
        }

        public void CadastrarRegulamento(Regulamento regulamento, List<Topico_Regulamento> topicos)
        {
            string comando = "INSERT INTO tbl_Regulamentos (Descricao, Tipo, Registro) VALUES (@descricao, @tipo, GETDATE())";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", regulamento.Descricao);
                insert.Parameters.AddWithValue("@tipo", regulamento.Tipo);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            foreach(Topico_Regulamento topico in topicos)
            {
                string cmd = "INSERT INTO tbl_RegulamentosTopicos (ID_Regulamento, Detalhes, Descricao, Ordem, Registro) VALUES ((SELECT TOP(1) ID_Regulamento FROM tbl_Regulamentos ORDER BY ID_Regulamento DESC), @detalhes, @descricao, @ordem, GETDATE())";
                using (SqlCommand insert = new SqlCommand(cmd, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@descricao", topico.Topico);
                    insert.Parameters.AddWithValue("@detalhes", topico.Detalhes);
                    insert.Parameters.AddWithValue("@ordem", topico.Ordem);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            MessageBox.Show("Regulamento cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarRegulamento(int id_regulamento)
        {
            string comando = "DELETE FROM tbl_Regulamentos WHERE ID_Regulamento = @id_regulamento";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_regulamento", id_regulamento);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string cmd = "DELETE FROM tbl_RegulamentosTopicos  WHERE ID_Regulamento = @id_regulamento";

            using (SqlCommand delete = new SqlCommand(cmd, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_regulamento", id_regulamento);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void EditarRegulamento(Regulamento regulamento)
        {
            string comando = "UPDATE tbl_Regulamentos SET Descricao = @descricao, Tipo = @tipo WHERE ID_Regulamento = @id_regulamento";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@descricao", regulamento.Descricao);
                update.Parameters.AddWithValue("@tipo", regulamento.Tipo);
                update.Parameters.AddWithValue("@id_regulamento", regulamento.ID_Regulamento);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void EditarTopicosDoRegulamento(List<Topico_Regulamento> topicos, int id_regulamento)
        {
            string comando = "DELETE FROM tbl_RegulamentosTopicos WHERE ID_Regulamento = @id_regulamento";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_regulamento", id_regulamento);
                delete.ExecuteNonQuery();
            }

            foreach (Topico_Regulamento topico in topicos)
            {
                string cmd = "INSERT INTO tbl_RegulamentosTopicos (ID_Regulamento, Detalhes, Descricao, Ordem, Registro) VALUES (@id_regulamento, @detalhes, @descricao, @ordem, GETDATE())";
                using (SqlCommand insert = new SqlCommand(cmd, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@descricao", topico.Topico);
                    insert.Parameters.AddWithValue("@id_regulamento", id_regulamento);
                    insert.Parameters.AddWithValue("@detalhes", topico.Detalhes);
                    insert.Parameters.AddWithValue("@ordem", topico.Ordem);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();
        }
        #endregion

        #region Treinamentos

        #region Cursos

        public void ListaDeCursos(DataGridView dataGrid, BindingSource bindingSource)
        {
            string comando = "SELECT ID_Curso AS ID, Descricao AS Curso, Nivel, ISNULL((SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = tbl_Cursos.ID_Cargo), 'Genérico') AS Cargo, (SELECT COUNT(*) FROM tbl_CursosMaterias WHERE ID_Curso = tbl_Cursos.ID_Curso) AS Materias, (SELECT SUM(Horas) FROM tbl_CursosMaterias WHERE ID_Curso = tbl_Cursos.ID_Curso) AS Horas FROM tbl_Cursos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            bindingSource.DataSource = dataSet;
            bindingSource.DataMember = dataSet.Tables[0].TableName;
            dataGrid.DataSource = bindingSource;
            conexao.Desconectar();
        }

        public List<string> preencherComboCargos()
        {
            List<string> lista = new List<string>();
            string comando = "SELECT Cargo FROM tbl_Cargos ORDER BY Cargo";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        lista.Add(Convert.ToString(leitor[0]));
                    }
                }
            }

            conexao.Desconectar();

            return lista;
        }

        public List<Materia> MateriasDisponiveis(string cargo)
        {
            List<Materia> materias = new List<Materia>();

            string comando = "SELECT Descricao AS Materia, Tipo FROM tbl_Regulamentos UNION SELECT UPPER(Descricao), 'PROCEDIMENTOS' AS Tipo FROM tbl_Atividades WHERE (ID_Cargo IS NULL AND ID_Setor IS NULL) OR (ID_Cargo IS NULL AND ID_Setor = (SELECT ID_Setor FROM tbl_Cargos WHERE Cargo = @cargo)) OR ID_Cargo = (SELECT ID_Cargo FROM tbl_Cargos WHERE Cargo = @cargo) ORDER BY Tipo";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@cargo", cargo);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        materias.Add(new Materia
                        {
                            Descricao = leitor[0].ToString(),
                            Tipo = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return materias;
        }

        public List<Materia> MateriasDisponiveisParaCursoGenerico()
        {
            List<Materia> materias = new List<Materia>();

            string comando = "SELECT Descricao AS Materia, Tipo FROM tbl_Regulamentos UNION SELECT UPPER(Descricao), 'PROCEDIMENTOS' AS Tipo FROM tbl_Atividades WHERE (ID_Cargo IS NULL AND ID_Setor IS NULL) ORDER BY Tipo";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        materias.Add(new Materia
                        {
                            Descricao = leitor[0].ToString(),
                            Tipo = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return materias;
        }

        public void AdicionarMateriaAoCurso(Materia materia, int id_curso)
        {
            string comando = "INSERT INTO tbl_CursosMaterias (ID_Curso, ID_Materia, Tipo, Horas, ID_Sessao, Ordem) VALUES (@id_curso, CASE WHEN @tipo = 'PROCEDIMENTOS' THEN (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @materia) ELSE (SELECT ID_Regulamento FROM tbl_Regulamentos WHERE Descricao = @materia) END, @tipo, @horas, 3, @ordem)";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_curso", id_curso);
                insert.Parameters.AddWithValue("@materia", materia.Descricao);
                insert.Parameters.AddWithValue("@tipo", materia.Tipo);
                insert.Parameters.AddWithValue("@horas", materia.Horas);
                insert.Parameters.AddWithValue("@ordem", materia.Ordem);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void EditarOrdemDaMateria(Materia materia, int id_curso, int nova_ordem)
        {
            string comando = "UPDATE tbl_CursosMaterias SET Ordem = @nova_ordem WHERE ID_Curso = @id_curso AND ID_Materia = CASE WHEN @tipo = 'PROCEDIMENTOS' THEN (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @materia) ELSE (SELECT ID_Regulamento FROM tbl_Regulamentos WHERE Descricao = @materia) END AND Ordem = @ordem";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_curso", id_curso);
                insert.Parameters.AddWithValue("@materia", materia.Descricao);
                insert.Parameters.AddWithValue("@tipo", materia.Tipo);
                insert.Parameters.AddWithValue("@ordem", materia.Ordem);
                insert.Parameters.AddWithValue("@nova_ordem", nova_ordem);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void RemoverMateriaDoCurso(Materia materia, int id_curso)
        {
            string comando = "DELETE FROM tbl_CursosMaterias WHERE ID_Curso = @id_curso AND ID_Materia = CASE WHEN @tipo = 'PROCEDIMENTOS' THEN (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @materia) ELSE (SELECT ID_Regulamento FROM tbl_Regulamentos WHERE Descricao = @materia) END AND Ordem = @ordem";
            
            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_curso", id_curso);
                delete.Parameters.AddWithValue("@materia", materia.Descricao);
                delete.Parameters.AddWithValue("@tipo", materia.Tipo);
                delete.Parameters.AddWithValue("@ordem", materia.Ordem);
                delete.ExecuteNonQuery();
            }
            conexao.Desconectar();
        }

        public Curso TrazerInformacoesDoCurso(int id_curso)
        {
            Curso curso = new Curso();

            string comando = "SELECT ID_Curso, Descricao, (SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = tbl_Cursos.ID_Cargo), Nivel FROM tbl_Cursos WHERE ID_Curso = @id_curso";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_curso", id_curso);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        curso.ID_Curso = Convert.ToInt32(leitor[0]);
                        curso.Descricao = leitor[1].ToString();
                        curso.Cargo = leitor[2].ToString();
                        curso.Nivel = leitor[3].ToString();
                    }
                }
            }

            conexao.Desconectar();

            return curso;
        }

        public List<Materia> MateriasDisponiveisParaOCurso(Curso curso)
        {
            List<Materia> materias = new List<Materia>();

            string comando = "SELECT Descricao AS Materia, Tipo FROM tbl_Regulamentos WHERE (SELECT COUNT(*) FROM tbl_CursosMaterias WHERE ID_Curso = @id_curso AND ID_Materia = tbl_Regulamentos.ID_Regulamento AND Tipo <> 'PROCEDIMENTOS') = 0 UNION SELECT UPPER(Descricao), 'PROCEDIMENTOS' AS Tipo FROM tbl_Atividades WHERE (SELECT COUNT(*) FROM tbl_CursosMaterias WHERE ID_Curso = @id_curso AND ID_Materia = tbl_Atividades.ID_Atividade AND Tipo = 'PROCEDIMENTOS') = 0 AND ((ID_Cargo IS NULL AND ID_Setor IS NULL) OR (ID_Cargo IS NULL AND ID_Setor = (SELECT ID_Setor FROM tbl_Cargos WHERE Cargo = @cargo)) OR ID_Cargo = (SELECT ID_Cargo FROM tbl_Cargos WHERE Cargo = @cargo))";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_curso", curso.ID_Curso);
                select.Parameters.AddWithValue("@cargo", curso.Cargo);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        materias.Add(new Materia
                        {
                            Descricao = leitor[0].ToString(),
                            Tipo = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return materias;
        }

        public List<Materia> MateriasAtreladasAoCurso(int id_curso)
        {
            List<Materia> materias = new List<Materia>();

            string comando = "SELECT CASE WHEN Tipo = 'PROCEDIMENTOS' THEN UPPER((SELECT Descricao FROM tbl_Atividades WHERE ID_Atividade = tbl_CursosMaterias.ID_Materia)) ELSE (SELECT Descricao FROM tbl_Regulamentos WHERE ID_Regulamento = tbl_CursosMaterias.ID_Materia) END AS Materia, Tipo, (SELECT Descricao FROM tbl_SessoesDeTreinamento WHERE ID_Sessao = tbl_CursosMaterias.ID_Sessao) AS Sessao, Horas, Ordem FROM tbl_CursosMaterias WHERE ID_Curso = @id_curso ORDER BY Ordem";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_curso", id_curso);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        materias.Add(new Materia
                        {
                            Descricao = leitor[0].ToString(),
                            Tipo = leitor[1].ToString(),
                            Sessao = leitor[2].ToString(),
                            Horas = Convert.ToDecimal(leitor[3]),
                            Ordem = Convert.ToInt32(leitor[4])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return materias;
        }

        public void AlterarHorasDaMateria(Materia materia)
        {
            string comando = "UPDATE tbl_CursosMaterias SET Horas = @horas WHERE Tipo = @tipo AND ID_Materia = CASE WHEN @tipo = 'PROCEDIMENTOS' THEN (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @materia) ELSE (SELECT ID_Regulamento FROM tbl_Regulamentos WHERE Descricao = @materia) END AND Ordem = @ordem";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@materia", materia.Descricao);
                update.Parameters.AddWithValue("@tipo", materia.Tipo);
                update.Parameters.AddWithValue("@horas", materia.Horas);
                update.Parameters.AddWithValue("@ordem", materia.Ordem);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AlterarSessaoDaMateria(Materia materia)
        {
            string comando = "UPDATE tbl_CursosMaterias SET ID_Sessao = (SELECT ID_Sessao FROM tbl_SessoesDeTreinamento WHERE Descricao = @sessao) WHERE Tipo = @tipo AND ID_Materia = CASE WHEN @tipo = 'PROCEDIMENTOS' THEN (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @materia) ELSE (SELECT ID_Regulamento FROM tbl_Regulamentos WHERE Descricao = @materia) END AND Ordem = @ordem";
            
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@materia", materia.Descricao);
                update.Parameters.AddWithValue("@tipo", materia.Tipo);
                update.Parameters.AddWithValue("@sessao", materia.Sessao);
                update.Parameters.AddWithValue("@ordem", materia.Ordem);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AlterarOrdemDaMateria(Materia materia, int nova_ordem)
        {
            string comando = "UPDATE tbl_CursosMaterias SET Ordem = @nova_ordem WHERE Tipo = @tipo AND ID_Materia = CASE WHEN @tipo = 'PROCEDIMENTOS' THEN (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @materia) ELSE (SELECT ID_Regulamento FROM tbl_Regulamentos WHERE Descricao = @materia) END AND Ordem = @ordem";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@materia", materia.Descricao);
                update.Parameters.AddWithValue("@tipo", materia.Tipo);
                update.Parameters.AddWithValue("@ordem", materia.Ordem);
                update.Parameters.AddWithValue("@nova_ordem", nova_ordem);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void CadastrarCurso(Curso curso)
        {
            string comando = "INSERT INTO tbl_Cursos (Descricao, ID_Cargo, Nivel) VALUES (@descricao, (SELECT ID_Cargo FROM tbl_Cargos WHERE Cargo = @cargo), @nivel)";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", curso.Descricao);
                insert.Parameters.AddWithValue("@cargo", curso.Cargo);
                insert.Parameters.AddWithValue("@nivel", curso.Nivel);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Curso cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void CadastrarMateriasDoCurso(List<Materia> materias)
        {
            string comando = "INSERT INTO tbl_CursosMaterias (ID_Curso, ID_Materia, Tipo, Horas, Ordem, ID_Sessao) VALUES ((SELECT TOP(1) ID_Curso FROM tbl_Cursos ORDER BY ID_Curso DESC), CASE WHEN @tipo = 'PROCEDIMENTOS' THEN (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @descricao) ELSE (SELECT ID_Regulamento FROM tbl_Regulamentos WHERE Descricao = @descricao) END, @tipo, @horas, @ordem, (SELECT ID_Sessao FROM tbl_SessoesDeTreinamento WHERE Descricao = @sessao))";
            
            foreach (Materia materia in materias)
            {
                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@descricao", materia.Descricao);
                    insert.Parameters.AddWithValue("@tipo", materia.Tipo);
                    insert.Parameters.AddWithValue("@horas", materia.Horas);
                    insert.Parameters.AddWithValue("@ordem", materia.Ordem);
                    insert.Parameters.AddWithValue("@sessao", materia.Sessao);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();
        }

        public void EditarCurso(Curso curso)
        {
            string comando = "UPDATE tbl_Cursos SET Descricao = @descricao, ID_Cargo = (SELECT ID_Cargo FROM tbl_Cargos WHERE Cargo = @cargo), Nivel = @nivel WHERE ID_Curso = @id_curso";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_curso", curso.ID_Curso);
                insert.Parameters.AddWithValue("@descricao", curso.Descricao);
                insert.Parameters.AddWithValue("@cargo", curso.Cargo);
                insert.Parameters.AddWithValue("@nivel", curso.Nivel);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Curso cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void ApagarCurso(int id_curso)
        {
            string comando = "DELETE FROM tbl_Cursos WHERE ID_Curso = @id_curso";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_curso", id_curso);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string cmd = "DELETE FROM tbl_CursosMaterias  WHERE ID_Curso = @id_curso";

            using (SqlCommand delete = new SqlCommand(cmd, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_curso", id_curso);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        #endregion

        #region Sessões

        public List<Sessao> ListaDeSessoes()
        {
            List<Sessao> sessoes = new List<Sessao>();

            string comando = "SELECT ID_Sessao, Descricao FROM tbl_SessoesDeTreinamento";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        sessoes.Add(new Sessao
                        {
                            ID_Sessao = Convert.ToInt32(leitor[0]),
                            Descricao = leitor[1].ToString()
                        });
                    }
                }
            }

            conexao.Desconectar();

            return sessoes;
        }

        public void CadastrarSessao(Sessao sessao)
        {
            string comando = "INSERT INTO tbl_SessoesDeTreinamento (Descricao, Detalhes) VALUES (@descricao, @detalhes)";
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", sessao.Descricao);
                insert.Parameters.AddWithValue("@detalhes", sessao.Detalhes);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Sessão cadastrada!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void EditarSessao(Sessao sessao)
        {
            string comando = "UPDATE tbl_SessoesDeTreinamento SET Descricao = @sessao, Detalhes = @detalhes WHERE ID_Sessao = @id_sessao";
            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@descricao", sessao.Descricao);
                update.Parameters.AddWithValue("@detalhes", sessao.Detalhes);
                update.Parameters.AddWithValue("@detalhes", sessao.ID_Sessao);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarSessao(int id_sessao)
        {
            string comando = "DELETE FROM tbl_SessoesDeTreinamento WHERE ID_Sessao = @id_sessao";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_sessao", id_sessao);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public Sessao TrazerInformacoesDaSessao(int id_sessao)
        {
            Sessao sessao = new Sessao();

            string comando = "SELECT ID_Sessao, Descricao, Detalhes FROM tbl_SessoesDeTreinamento WHERE ID_Sessao = @id_sessao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_sessao", id_sessao);
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        sessao.ID_Sessao = Convert.ToInt32(leitor[0]);
                        sessao.Descricao = leitor[1].ToString();
                        sessao.Detalhes = leitor[2].ToString();
                    }
                }
            }

            conexao.Desconectar();

            return sessao;
        }

        #endregion

        #region Aulas

        public List<Aula> AulasDoTreinamento(int id_curso)
        {
            List<Aula> aulas = new List<Aula>();

            string comando = "SELECT CASE WHEN Tipo = 'PROCEDIMENTOS' THEN UPPER((SELECT Descricao FROM tbl_Atividades WHERE ID_Atividade = tbl_CursosMaterias.ID_Materia)) ELSE (SELECT Descricao FROM tbl_Regulamentos WHERE ID_Regulamento = tbl_CursosMaterias.ID_Materia) END AS Materia, Tipo, (SELECT Descricao FROM tbl_SessoesDeTreinamento WHERE ID_Sessao = tbl_CursosMaterias.ID_Sessao) AS Sessao, Horas, Ordem FROM tbl_CursosMaterias WHERE ID_Curso = @id_curso ORDER BY Ordem";
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_curso", id_curso);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        aulas.Add(new Aula
                        {
                            Descricao = leitor[0].ToString(),
                            Tipo = leitor[1].ToString(),
                            Sessao = leitor[2].ToString(),
                            Horas = Convert.ToDecimal(leitor[3]),
                            Ordem = Convert.ToInt32(leitor[4])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return aulas;
        }

        public List<Colaborador> ListaDeInstrutores()
        {
            string comando = "SELECT ID_Colaborador, Nome_Colaborador + ' (' + Matricula + ')'  AS Nome FROM tbl_Colaboradores WHERE (SELECT COUNT(*) FROM tbl_PermissoesDeAcesso WHERE ID_Acesso = 18 AND ID_Colaborador = tbl_Colaboradores.ID_Colaborador) > 0";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataReader leitor = select.ExecuteReader();

            List<Colaborador> Colaboradores = new List<Colaborador>();

            while (leitor.Read())
            {
                Colaboradores.Add(new Colaborador
                {
                    ID_Colaborador = Convert.ToInt32(leitor[0]),
                    Nome_Colaborador = leitor[1].ToString()
                });
            }
            leitor.Close();

            conexao.Desconectar();

            return Colaboradores;
        }

        public void PossiveisParticipantesDoTreinamento(DataGridView dataGridView, BindingSource bindingSource, int id_curso)
        {
            string comando = "IF (SELECT ID_Cargo FROM tbl_Cursos WHERE ID_Curso = @id_curso) IS NULL (SELECT ID_Colaborador, Nome_Colaborador + ' ' + Sobrenome AS Colaborador, Matricula, (SELECT Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT TOP(1) ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = tbl_Colaboradores.ID_Colaborador)) + ' ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT TOP(1) ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = tbl_Colaboradores.ID_Colaborador))) AS Reparticao, (SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo) AS Cargo FROM tbl_Colaboradores) ELSE (SELECT ID_Colaborador, Nome_Colaborador + ' ' + Sobrenome AS Colaborador, Matricula, (SELECT Descricao FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT TOP(1) ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = tbl_Colaboradores.ID_Colaborador)) + ' ' + (SELECT Descricao FROM tbl_Estabelecimentos WHERE ID_Estabelecimento = (SELECT ID_Estabelecimento FROM tbl_ReparticoesEstabelecimentos WHERE ID_Reparticao = (SELECT TOP(1) ID_Reparticao FROM tbl_ReparticoesColaboradores WHERE ID_Colaborador = tbl_Colaboradores.ID_Colaborador))) AS Reparticao, (SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo) AS Cargo FROM tbl_Colaboradores WHERE ID_Cargo = (SELECT ID_Cargo FROM tbl_Cursos WHERE ID_Curso = @id_curso))";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_curso", id_curso);
                SqlDataAdapter adaptador = new SqlDataAdapter(select);
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
                DataSet dataSet = new DataSet();
                adaptador.Fill(dataSet);
                bindingSource.DataSource = dataSet;
                bindingSource.DataMember = dataSet.Tables[0].TableName;
                dataGridView.DataSource = bindingSource;
            }
            conexao.Desconectar();
        }

        public void CadastrarTreinamento(int id_curso, int id_colaborador)
        {
            string comando = "INSERT INTO tbl_Treinamentos (ID_Curso, Data_Registro, Status, ID_Colaborador) VALUES (@id_curso, GETDATE(), 'Não iniciou', @id_colaborador)";
            
            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_curso", id_curso);
                insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();

            MessageBox.Show("Treinamento cadastrado!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        public void CadastrarAulasDoTreinamento(List<Aula> aulas, List<int> colaboradores)
        {
            string comando = "INSERT INTO tbl_Aulas (ID_Treinamento, ID_Materia, Tipo, Status, ID_Sessao, Horas, Data) VALUES ((SELECT TOP (1) ID_Treinamento FROM tbl_Treinamentos ORDER BY ID_Treinamento DESC),CASE WHEN @tipo = 'PROCEDIMENTOS' THEN (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @descricao) ELSE (SELECT ID_Regulamento FROM tbl_Regulamentos WHERE Descricao = @descricao) END, @tipo, 'Agendado', (SELECT ID_Sessao FROM tbl_SessoesDeTreinamento WHERE Descricao = @sessao), @horas, @data)";
            string cmd = "INSERT INTO tbl_AulasColaboradores (ID_Aula, ID_Colaborador) VALUES ((SELECT TOP(1) ID_Aula FROM tbl_Aulas ORDER BY ID_Aula DESC), @id_colaborador)";

            foreach (Aula aula in aulas)
            {
                using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@descricao", aula.Descricao);
                    insert.Parameters.AddWithValue("@tipo", aula.Tipo);
                    insert.Parameters.AddWithValue("@horas", aula.Horas);
                    insert.Parameters.AddWithValue("@data", aula.Data);
                    insert.Parameters.AddWithValue("@sessao", aula.Sessao);
                    insert.ExecuteNonQuery();
                }

                foreach (int id_colaborador in colaboradores)
                {
                    using (SqlCommand insert = new SqlCommand(cmd, conexao.Conectar()))
                    {
                        insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                        insert.ExecuteNonQuery();
                    }
                }
            }

            conexao.Desconectar();

            IEnumerable<Materia> materias =
            aulas.Distinct(
            (aula1, aula2) => aula1.Descricao == aula2.Descricao && aula1.Tipo == aula2.Tipo,
            produto => produto.Descricao.GetHashCode()
             );

            string cmd2 = "INSERT INTO tbl_TreinamentosMaterias (ID_Treinamento, ID_Materia, Tipo, Horas) VALUES ((SELECT TOP (1) ID_Treinamento FROM tbl_Treinamentos ORDER BY ID_Treinamento DESC), CASE WHEN @tipo = 'PROCEDIMENTOS' THEN (SELECT ID_Atividade FROM tbl_Atividades WHERE Descricao = @descricao) ELSE (SELECT ID_Regulamento FROM tbl_Regulamentos WHERE Descricao = @descricao) END, @tipo, @horas)";

            foreach (Materia materia in materias)
            {
                materia.Horas = aulas.Where(x => x.Descricao == materia.Descricao && x.Tipo == materia.Tipo).Sum(x => x.Horas);

                using (SqlCommand insert = new SqlCommand(cmd2, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@descricao", materia.Descricao);
                    insert.Parameters.AddWithValue("@tipo", materia.Tipo);
                    insert.Parameters.AddWithValue("@horas", materia.Horas);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();

            string cmd3 = "INSERT INTO tbl_TreinamentosColaboradores (ID_Treinamento, ID_Colaborador) VALUES ((SELECT TOP (1) ID_Treinamento FROM tbl_Treinamentos ORDER BY ID_Treinamento DESC), @id_colaborador)";

            foreach (int id_colaborador in colaboradores)
            {
                using (SqlCommand insert = new SqlCommand(cmd3, conexao.Conectar()))
                {
                    insert.Parameters.AddWithValue("@id_colaborador", id_colaborador);
                    insert.ExecuteNonQuery();
                }
            }

            conexao.Desconectar();
        }

        public void ListaDeTreinamentos(DataGridView dataGrid, BindingSource bindingSource)
        {
            string comando = "SELECT ID_Treinamento AS ID, (SELECT Descricao FROM tbl_Cursos WHERE ID_Curso = tbl_Treinamentos.ID_Curso) AS Curso, Status, (SELECT Nome_Colaborador + ' (' + Matricula + ')' FROM tbl_Colaboradores WHERE ID_Colaborador = tbl_Treinamentos.ID_Colaborador) AS Instrutor, (SELECT COUNT(*) FROM tbl_TreinamentosColaboradores WHERE ID_Treinamento = tbl_Treinamentos.ID_Treinamento) AS Participantes, (SELECT COUNT(*) FROM tbl_TreinamentosMaterias WHERE ID_Treinamento = tbl_Treinamentos.ID_Treinamento) AS Materias, (SELECT TOP(1) FORMAT(Data, 'dd/MM/yyyy hh:mm') FROM tbl_Aulas WHERE ID_Treinamento = tbl_Treinamentos.ID_Treinamento) AS Proxima FROM tbl_Treinamentos";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            SqlDataAdapter adaptador = new SqlDataAdapter(select);
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adaptador);
            DataSet dataSet = new DataSet();
            adaptador.Fill(dataSet);
            bindingSource.DataSource = dataSet;
            bindingSource.DataMember = dataSet.Tables[0].TableName;
            dataGrid.DataSource = bindingSource;
            conexao.Desconectar();
        }

        public void ApagarTreinamento(int id_treinamento)
        {
            string comando = "DELETE FROM tbl_Treinamentos WHERE ID_Treinamento = @id_treinamento";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_treinamento", id_treinamento);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string comando1 = "DELETE FROM tbl_TreinamentosMaterias WHERE ID_Treinamento = @id_treinamento";

            using (SqlCommand delete = new SqlCommand(comando1, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_treinamento", id_treinamento);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string comando2 = "DELETE FROM tbl_AulasColaboradores WHERE (SELECT ID_Treinamento FROM tbl_Aulas WHERE ID_Aula = tbl_AulasColaboradores.ID_Aula) = @id_treinamento";

            using (SqlCommand delete = new SqlCommand(comando2, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_treinamento", id_treinamento);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string comando3 = "DELETE FROM tbl_AulasStatus WHERE (SELECT ID_Treinamento FROM tbl_Aulas WHERE ID_Aula = tbl_AulasStatus.ID_Aula) = @id_treinamento";

            using (SqlCommand delete = new SqlCommand(comando3, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_treinamento", id_treinamento);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string comando4 = "DELETE FROM tbl_TreinamentosColaboradores WHERE ID_Treinamento = @id_treinamento";

            using (SqlCommand delete = new SqlCommand(comando4, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_treinamento", id_treinamento);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();

            string comando5 = "DELETE FROM tbl_Aulas WHERE ID_Treinamento = @id_treinamento";

            using (SqlCommand delete = new SqlCommand(comando5, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_treinamento", id_treinamento);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        #endregion

        #endregion

        #region Ferramentas da Gestão

        #region Matriz SWOT

        public void CadastrarSwot(SWOT swot)
        {
            string comando = "INSERT INTO tbl_SWOT (Descricao, Categoria, Registro) VALUES (@descricao, @categoria, GETDATE())";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@descricao", swot.Descricao);
                select.Parameters.AddWithValue("@categoria", swot.Categoria);
                select.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public List<SWOT> MatrizSwot()
        {
            List<SWOT> matriz_swot = new List<SWOT>();

            string comando = "SELECT ID, Descricao, Categoria FROM tbl_SWOT ORDER BY Descricao";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        int ID = Convert.ToInt32(leitor[0]);
                        string descricao = leitor[1].ToString();
                        string categoria = leitor[2].ToString();

                        matriz_swot.Add(new SWOT
                        {
                            ID = ID,
                            Descricao = descricao,
                            Categoria = categoria
                        });
                    }
                }


            }

            conexao.Desconectar();

            return matriz_swot;
        }

        #endregion

        #endregion

        #region Lista de Afazeres

        public List<Afazer> ListaDeAfazeres(DateTime data)
        {
            List<Afazer> afazeres = new List<Afazer>();

            string comando = "SELECT ID_Afazer, Ordem, Descricao, Minutos, Conclusao FROM tbl_Afazeres WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Data = CONVERT(DATE, @data) ORDER BY Ordem";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", Program.matricula);
                select.Parameters.AddWithValue("@data", data);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        afazeres.Add(new Afazer
                        {
                            ID_Afazer = Convert.ToInt32(leitor[0]),
                            Ordem = Convert.ToInt32(leitor[1]),
                            Descricao = leitor[2].ToString(),
                            Minutos = Convert.ToInt32(leitor[3]),
                            Conclusao = Convert.ToBoolean(leitor[4])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return afazeres;
        }

        public void AdicionarAfazer(Afazer afazer)
        {
            string comando = "INSERT INTO tbl_Afazeres (Ordem, Descricao, Detalhes, Minutos, ID_Colaborador, Conclusao, Registro, Data, ID_Etapa) VALUES ((SELECT COUNT(*) FROM tbl_Afazeres WHERE Data = @data AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)) + 1, @descricao, @detalhes, @minutos, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), 0, GETDATE(), @data, IIF(@id_etapa = 0, NULL, @id_etapa))";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", afazer.Descricao);
                insert.Parameters.AddWithValue("@detalhes", afazer.Detalhes);
                insert.Parameters.AddWithValue("@minutos", afazer.Minutos);
                insert.Parameters.AddWithValue("@data", afazer.Data);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.Parameters.AddWithValue("@id_etapa", afazer.ID_Etapa);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void TrazerInformacoesDoAfazer(Afazer afazer)
        {
            string comando = "SELECT ID_Afazer, Descricao, Detalhes, Minutos, Data, Ordem FROM tbl_Afazeres WHERE ID_Afazer = @id_afazer";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_afazer", afazer.ID_Afazer);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        afazer.ID_Afazer = Convert.ToInt32(leitor[0]);
                        afazer.Descricao = Convert.ToString(leitor[1]);
                        afazer.Detalhes = Convert.ToString(leitor[2]);
                        afazer.Minutos = Convert.ToInt32(leitor[3]);
                        afazer.Data = Convert.ToDateTime(leitor[4]);
                        afazer.Ordem = Convert.ToInt32(leitor[5]);
                    }
                }
            }

            conexao.Desconectar();
        }

        public void EditarAfazer(Afazer afazer)
        {
            string comando = "UPDATE tbl_Afazeres SET Descricao = @descricao, Detalhes = @detalhes, Minutos = @minutos, Data = CONVERT(DATE, @data), Ordem = IIF(CONVERT(DATE, @data) = Data, Ordem, (SELECT COUNT(*) FROM tbl_Afazeres WHERE Data = @data AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)) + 1) WHERE ID_Afazer = @id_afazer";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@descricao", afazer.Descricao);
                update.Parameters.AddWithValue("@detalhes", afazer.Detalhes);
                update.Parameters.AddWithValue("@minutos", afazer.Minutos);
                update.Parameters.AddWithValue("@data", afazer.Data);
                update.Parameters.AddWithValue("@id_afazer", afazer.ID_Afazer);
                update.Parameters.AddWithValue("@matricula", Program.matricula);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AlterarConclusaoDoAfazer(int id_afazer, bool conclusao)
        {
            string comando = "UPDATE tbl_Afazeres SET Conclusao = @conclusao WHERE ID_Afazer = @id_afazer";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_afazer", id_afazer);
                update.Parameters.AddWithValue("@conclusao", conclusao);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void ApagarAfazer(int id_afazer)
        {
            string comando = "DELETE FROM tbl_Afazeres WHERE ID_Afazer = @id_afazer";

            using (SqlCommand delete = new SqlCommand(comando, conexao.Conectar()))
            {
                delete.Parameters.AddWithValue("@id_afazer", id_afazer);
                delete.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AlterarOrdemDoAfazer(int id_afazer, int nova_ordem)
        {
            string comando = "UPDATE tbl_Afazeres SET Ordem = @nova_ordem WHERE ID_Afazer = @id_afazer";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_afazer", id_afazer);
                update.Parameters.AddWithValue("@nova_ordem", nova_ordem);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public bool VerificarAfazeresPendentes()
        {
            bool pendentes;

            string comando = "SELECT IIF(COUNT(*) > 0, 1, 0) FROM tbl_Afazeres WHERE Data < CONVERT(DATE, GETDATE()) AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) AND Conclusao = 0";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", Program.matricula);
                pendentes = Convert.ToBoolean(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return pendentes;
        }

        public void AtualizarDataDosAfazeresPendentes()
        {
            string comando = "[AtualizarDataDosAfazeresPendentes] @matricula";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@matricula", Program.matricula);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public int IdDaEtapaRelacionadaAoAfazer(int id_afazer)
        {
            int id;

            string comando = "SELECT ISNULL(ID_Etapa, 0) FROM tbl_Afazeres WHERE ID_Afazer = @id_afazer";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@id_afazer", id_afazer);
                id = Convert.ToInt32(select.ExecuteScalar());
            }

            conexao.Desconectar();

            return id;
        }

        public void ConcluirEtapaAPartirDoAfazer(int id_etapa)
        {
            string comando = "UPDATE tbl_Etapas SET Inicio = IIF(Inicio IS NULL, GETDATE(), Inicio), Termino = GETDATE(), Status = 'Concluído' WHERE ID_Etapa = @id_etapa";

            using (SqlCommand update = new SqlCommand(comando, conexao.Conectar()))
            {
                update.Parameters.AddWithValue("@id_etapa", id_etapa);
                update.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void AgendarAfazerParaAmanha(int id_afazer)
        {
            string comando = "INSERT INTO tbl_Afazeres (Descricao, Detalhes, Minutos, ID_Colaborador, Conclusao, Registro, Data, Ordem, ID_Etapa) SELECT Descricao, Detalhes, Minutos, ID_Colaborador, 0, GETDATE(), DATEADD(DAY, 1, CONVERT(DATE, GETDATE())), (SELECT COUNT(*) FROM tbl_Afazeres WHERE Data = DATEADD(DAY, 1, CONVERT(DATE, GETDATE())) AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)) + 1, ID_Etapa FROM tbl_Afazeres WHERE ID_Afazer = @id_afazer";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@id_afazer", id_afazer);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        #endregion

        #endregion

        #region Métodos da Página Inicial

        #region Assuntos

        public void RegistrarSugestao(string descricao)
        {
            string comando = "INSERT INTO tbl_SugestoesColaboradores (Descricao, ID_Colaborador, Registro) VALUES (@descricao, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE())";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", descricao);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void RegistrarReclamacao(string descricao)
        {
            string comando = "INSERT INTO tbl_ReclamacoesColaboradores (Descricao, ID_Colaborador, Registro) VALUES (@descricao, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE())";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", descricao);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public void RegistrarAssunto(string descricao)
        {
            string comando = "INSERT INTO tbl_AssuntosColaboradores (Descricao, ID_Colaborador, Registro, Impressao) VALUES (@descricao, (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula), GETDATE(), 0)";

            using (SqlCommand insert = new SqlCommand(comando, conexao.Conectar()))
            {
                insert.Parameters.AddWithValue("@descricao", descricao);
                insert.Parameters.AddWithValue("@matricula", Program.matricula);
                insert.ExecuteNonQuery();
            }

            conexao.Desconectar();
        }

        public List<Assunto> MeusAssuntos()
        {
            List<Assunto> assuntos = new List<Assunto>();

            string comando = "SELECT Descricao, Registro, Impressao FROM tbl_AssuntosColaboradores WHERE ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula) ORDER BY Registro DESC";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", Program.matricula);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        assuntos.Add(new Assunto
                        {
                            Descricao = leitor[0].ToString(),
                            Registro = Convert.ToDateTime(leitor[1]),
                            Impressao = Convert.ToBoolean(leitor[2])
                        });
                    }
                }
            }

            conexao.Desconectar();

            return assuntos;
        }

        #endregion

        #region Escala e Horas

        public decimal HorasSemanaisTrabalhadasDoFuncionario()
        {
            DateTime hoje = DateTime.Now;
            CultureInfo cultura = new CultureInfo("pt-BR");
            DateTimeFormatInfo formato = cultura.DateTimeFormat;


            string dia_da_semana = formato.GetDayName(hoje.DayOfWeek).PrimeiraLetraMaiuscula();
            DateTime inicio = new DateTime();
            DateTime termino = new DateTime();

            if (dia_da_semana == "Domingo")
            {
                inicio = DateTime.Now;
                termino = DateTime.Now.AddDays(6);
            }
            else if (dia_da_semana == "Segunda-feira")
            {
                inicio = DateTime.Now.AddDays(-1);
                termino = DateTime.Now.AddDays(5);
            }
            else if (dia_da_semana == "Terça-feira")
            {
                inicio = DateTime.Now.AddDays(-2);
                termino = DateTime.Now.AddDays(4);
            }
            else if (dia_da_semana == "Quarta-feira")
            {
                inicio = DateTime.Now.AddDays(-3);
                termino = DateTime.Now.AddDays(3);
            }
            else if (dia_da_semana == "Quinta-feira")
            {
                inicio = DateTime.Now.AddDays(-4);
                termino = DateTime.Now.AddDays(2);
            }
            else if (dia_da_semana == "Sexta-feira")
            {
                inicio = DateTime.Now.AddDays(-5);
                termino = DateTime.Now.AddDays(1);
            }
            else if (dia_da_semana == "Sábado")
            {
                inicio = DateTime.Now.AddDays(-6);
                termino = DateTime.Now;
            }

            decimal horas;

            string comando = "SELECT SUM(CONVERT(INT, REPLACE(CONVERT(VARCHAR(5), (CONVERT(TIME, Termino - Inicio, 108))), ':', '')) / 100 + CONVERT(INT, REPLACE(CONVERT(VARCHAR(5), (CONVERT(TIME, Termino - Inicio, 108))) , ':', '')) % 100 / 60.0) FROM tbl_Expediente WHERE Data BETWEEN @inicio AND @termino AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)";
            
            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@inicio", inicio.ToShortDateString());
                select.Parameters.AddWithValue("@termino", termino.ToShortDateString());
                select.Parameters.AddWithValue("@matricula", Program.matricula);


                if (select.ExecuteScalar() == DBNull.Value) { horas = 0; }
                else { horas = Convert.ToDecimal(select.ExecuteScalar()); }
            }

            conexao.Desconectar();

            return horas;
        }

        public decimal HorasSemanaisDoFuncionario()
        {
            DateTime hoje = DateTime.Now;
            CultureInfo cultura = new CultureInfo("pt-BR");
            DateTimeFormatInfo formato = cultura.DateTimeFormat;


            string dia_da_semana = formato.GetDayName(hoje.DayOfWeek).PrimeiraLetraMaiuscula();
            DateTime inicio = new DateTime();
            DateTime termino = new DateTime();

            if (dia_da_semana == "Domingo")
            {
                inicio = DateTime.Now;
                termino = DateTime.Now.AddDays(6);
            }
            else if (dia_da_semana == "Segunda-feira")
            {
                inicio = DateTime.Now.AddDays(-1);
                termino = DateTime.Now.AddDays(5);
            }
            else if (dia_da_semana == "Terça-feira")
            {
                inicio = DateTime.Now.AddDays(-2);
                termino = DateTime.Now.AddDays(4);
            }
            else if (dia_da_semana == "Quarta-feira")
            {
                inicio = DateTime.Now.AddDays(-3);
                termino = DateTime.Now.AddDays(3);
            }
            else if (dia_da_semana == "Quinta-feira")
            {
                inicio = DateTime.Now.AddDays(-4);
                termino = DateTime.Now.AddDays(2);
            }
            else if (dia_da_semana == "Sexta-feira")
            {
                inicio = DateTime.Now.AddDays(-5);
                termino = DateTime.Now.AddDays(1);
            }
            else if (dia_da_semana == "Sábado")
            {
                inicio = DateTime.Now.AddDays(-6);
                termino = DateTime.Now;
            }

            string comando = "SELECT SUM(CONVERT(INT, REPLACE(CONVERT(VARCHAR(5), (CONVERT(TIME, Previsao_Termino - Previsao_Inicio, 108))), ':', '')) / 100 + CONVERT(INT, REPLACE(CONVERT(VARCHAR(5), (CONVERT(TIME, Previsao_Termino - Previsao_Inicio, 108))) , ':', '')) % 100 / 60.0) FROM tbl_Expediente WHERE Data BETWEEN @inicio AND @termino AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@inicio", inicio.ToShortDateString());
            select.Parameters.AddWithValue("@termino", termino.ToShortDateString());
            select.Parameters.AddWithValue("@matricula", Program.matricula);

            decimal horas;
            if (select.ExecuteScalar() == DBNull.Value) { horas = 0; }
            else { horas = Convert.ToDecimal(select.ExecuteScalar()); }

            conexao.Desconectar();

            return horas;
        }

        public decimal HorasMensaisDoFuncionario()
        {
            int dia_inicial = 1;
            int dia_final = DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month);

            DateTime inicio = new DateTime(DateTime.Now.Year, DateTime.Now.Month, dia_inicial);
            DateTime termino = new DateTime(DateTime.Now.Year, DateTime.Now.Month, dia_final);

            string comando = "SELECT SUM(CONVERT(INT, REPLACE(CONVERT(VARCHAR(5), (CONVERT(TIME, Previsao_Termino - Previsao_Inicio, 108))), ':', '')) / 100 + CONVERT(INT, REPLACE(CONVERT(VARCHAR(5), (CONVERT(TIME, Previsao_Termino - Previsao_Inicio, 108))) , ':', '')) % 100 / 60.0) FROM tbl_Expediente WHERE Data BETWEEN @inicio AND @termino AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@inicio", inicio.ToShortDateString());
            select.Parameters.AddWithValue("@termino", termino.ToShortDateString());
            select.Parameters.AddWithValue("@matricula", Program.matricula);

            decimal horas;
            if (select.ExecuteScalar() == DBNull.Value) { horas = 0; }
            else { horas = Convert.ToDecimal(select.ExecuteScalar()); }

            conexao.Desconectar();

            return horas;
        }

        public decimal HorasMensaisTrabalhadasDoFuncionario()
        {
            int dia_inicial = 1;
            int dia_final = DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month);

            DateTime inicio = new DateTime(DateTime.Now.Year, DateTime.Now.Month, dia_inicial);
            DateTime termino = new DateTime(DateTime.Now.Year, DateTime.Now.Month, dia_final);

            string comando = "SELECT SUM(CONVERT(INT, REPLACE(CONVERT(VARCHAR(5), (CONVERT(TIME, Termino - Inicio, 108))), ':', '')) / 100 + CONVERT(INT, REPLACE(CONVERT(VARCHAR(5), (CONVERT(TIME, Termino - Inicio, 108))) , ':', '')) % 100 / 60.0) FROM tbl_Expediente WHERE Data BETWEEN @inicio AND @termino AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@inicio", inicio.ToShortDateString());
            select.Parameters.AddWithValue("@termino", termino.ToShortDateString());
            select.Parameters.AddWithValue("@matricula", Program.matricula);

            decimal horas;
            if (select.ExecuteScalar() == DBNull.Value) { horas = 0; }
            else { horas = Convert.ToDecimal(select.ExecuteScalar()); }

            conexao.Desconectar();

            return horas;
        }

        public decimal HorasExtrasComputadas()
        {
            int dia_inicial = 1;
            int dia_final;
            if (DateTime.Now.Day == 1)
            {
                dia_final = 1;
            }
            else if (DateTime.Now.Day == DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month))
            {
                dia_final = DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month);
            }
            else
            {
                dia_final = DateTime.Now.AddDays(-1).Day;
            }

            DateTime inicio = new DateTime(DateTime.Now.Year, DateTime.Now.Month, dia_inicial);
            DateTime termino = new DateTime(DateTime.Now.Year, DateTime.Now.Month, dia_final);

            List<Expediente> Expedientes = new List<Expediente>();
            string comando = "SELECT Previsao_Inicio, Inicio, Previsao_Termino, Termino, Data, Status FROM tbl_Expediente WHERE Data BETWEEN @inicio AND @termino AND ID_Colaborador = (SELECT ID_Colaborador FROM tbl_Colaboradores WHERE Matricula = @matricula)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@inicio", inicio.ToShortDateString());
            select.Parameters.AddWithValue("@termino", termino.ToShortDateString());
            select.Parameters.AddWithValue("@matricula", Program.matricula);
            SqlDataReader leitor = select.ExecuteReader();

            while (leitor.Read())
            {
                string Status = leitor[5].ToString();

                if (Status == "Serviço")
                {
                    string Data = Convert.ToDateTime(leitor[4].ToString()).ToShortDateString();
                    DateTime Previsao_inicio = Convert.ToDateTime(leitor[0].ToString());
                    DateTime Inicio;
                    DateTime Previsao_termino = Convert.ToDateTime(leitor[2].ToString());
                    DateTime Termino;
                    try { Inicio = Convert.ToDateTime(leitor[1].ToString()); } catch { Inicio = Previsao_inicio; }
                    try { Termino = Convert.ToDateTime(leitor[3].ToString()); } catch { Termino = Previsao_termino; }

                    Expedientes.Add(new Expediente
                    {
                        Data = Data,
                        Previsao_Inicio = Previsao_inicio,
                        Inicio = Inicio,
                        Previsao_Termino = Previsao_termino,
                        Termino = Termino
                    });
                }
            }
            leitor.Close();
            conexao.Desconectar();

            decimal horas_extras = 0;

            foreach(Expediente Expediente in Expedientes)
            {
                DateTime data_atual = Convert.ToDateTime(Expediente.Data);

                if ((Expediente.Inicio - Expediente.Previsao_Inicio).TotalMinutes > 15)
                {
                    horas_extras = Math.Round(horas_extras - Convert.ToDecimal((Expediente.Previsao_Inicio - Expediente.Inicio).TotalHours), 2);
                }
                else if ((Expediente.Previsao_Inicio - Expediente.Inicio).TotalMinutes > 15)
                {
                    horas_extras = Math.Round(horas_extras + Convert.ToDecimal((Expediente.Previsao_Inicio - Expediente.Inicio).TotalHours), 2);
                }

                if ((Expediente.Termino - Expediente.Previsao_Termino).TotalMinutes > 15)
                {
                    horas_extras = Math.Round(horas_extras + Convert.ToDecimal((Expediente.Termino - Expediente.Previsao_Termino).TotalHours), 2);
                }
                else if ((Expediente.Previsao_Termino - Expediente.Termino).TotalMinutes > 15)
                {
                    horas_extras = Math.Round(horas_extras - Convert.ToDecimal((Expediente.Previsao_Termino - Expediente.Termino).TotalHours), 2);
                }

                #region Codigo Alternativo
                //if (data_atual.Day == 1)
                //{
                //    if ((Expediente.Previsao_Inicio - Expediente.Inicio).Days < 15)
                //    {
                //        horas_extras = Math.Round(horas_extras + ((Expediente.Previsao_Inicio - Expediente.Inicio).Minutes / 60), 2);
                //    }
                //    else if ((Expediente.Inicio - Expediente.Previsao_Inicio).Days < Convert.ToInt32(ObterValorDoParametro("Margem de erro para o ponto eletrônico")))
                //    {
                //        horas_extras = Math.Round(horas_extras - ((Expediente.Inicio - Expediente.Previsao_Inicio).Minutes / 60), 2);
                //    }
                //}
                //else if (data_atual.Day == DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month))
                //{

                //}
                //else
                //{
                //    horas_extras = horas_extras + 
                //}
                #endregion
            }

            return horas_extras;
        }

        #endregion

        #endregion

        #region Métodos do Formulário Login
        public void AlterarSenha(string senha, string matricula)
        {
            string comando = "UPDATE tbl_Colaboradores SET Senha = @senha WHERE Matricula = @matricula";
            SqlCommand update = new SqlCommand(comando, conexao.Conectar());
            update.Parameters.AddWithValue("@senha", senha);
            update.Parameters.AddWithValue("@matricula", matricula);
            update.ExecuteNonQuery();
            conexao.Desconectar();
            MessageBox.Show("Senha alterada com sucesso!", "Sucesso!", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        public bool VerificarMatricula(string matricula)
        {
            string comando = "SELECT Matricula FROM tbl_Colaboradores WHERE Matricula = @matricula";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);            
            bool verificar;
            if (select.ExecuteScalar() == null) { verificar = false; }
            else if (select.ExecuteScalar().ToString() == string.Empty) { verificar = false; }
            else { verificar = true; }
            conexao.Desconectar();
            return verificar;
        }
        public string VerificarSenhaAtual(string matricula)
        {
            string comando = "SELECT Senha FROM tbl_Colaboradores WHERE Matricula = @matricula";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@matricula", matricula);
            string senha = string.Empty;
            if (select.ExecuteScalar() == null) { }
            else if (select.ExecuteScalar().ToString() == string.Empty) { }
            else { senha = select.ExecuteScalar().ToString(); }
            conexao.Desconectar();
            return senha;
        }
        public Colaborador TrazerColaboradorPelaMatricula(string matricula)
        {
            Colaborador colaborador = new Colaborador();

            string comando = "SELECT ID_Colaborador, Nome_Colaborador, Sobrenome, Matricula, UPPER((SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo)) AS Cargo, (SELECT Imagem FROM tbl_Imagens WHERE Descricao = Matricula + ' OFF') AS Foto FROM tbl_Colaboradores WHERE Matricula = @matricula";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@matricula", matricula);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        colaborador.ID_Colaborador = (int)leitor[0];
                        colaborador.Nome_Colaborador = (string)leitor[1];
                        colaborador.Sobrenome = (string)leitor[2];
                        colaborador.Matricula = (string)leitor[3];
                        colaborador.Cargo = (string)leitor[4];
                        colaborador.Foto = (byte[])leitor[5];
                    }
                }
            }

            conexao.Desconectar();

            return colaborador;
        }

        public Colaborador TrazerColaboradorPeloLogin(string login)
        {
            Colaborador colaborador = new Colaborador();

            string comando = "SELECT ID_Colaborador, Nome_Colaborador, Sobrenome, Matricula, UPPER((SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = tbl_Colaboradores.ID_Cargo)) AS Cargo, (SELECT Imagem FROM tbl_Imagens WHERE Descricao = Matricula + ' OFF') AS Foto FROM tbl_Colaboradores WHERE Login_Sistema = @login";

            using (SqlCommand select = new SqlCommand(comando, conexao.Conectar()))
            {
                select.Parameters.AddWithValue("@login", login);

                using (SqlDataReader leitor = select.ExecuteReader())
                {
                    while (leitor.Read())
                    {
                        colaborador.ID_Colaborador = (int)leitor[0];
                        colaborador.Nome_Colaborador = (string)leitor[1];
                        colaborador.Sobrenome = (string)leitor[2];
                        colaborador.Matricula = (string)leitor[3];
                        colaborador.Cargo = (string)leitor[4];
                        colaborador.Foto = (byte[])leitor[5];
                    }
                }
            }

            conexao.Desconectar();

            return colaborador;
        }

        public string TrazerCargoPeloID(int id_colaborador)
        {
            string comando = "SELECT Cargo FROM tbl_Cargos WHERE ID_Cargo = (SELECT ID_Cargo FROM tbl_Colaboradores WHERE ID_Colaborador = @id_colaborador)";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            select.Parameters.AddWithValue("@id_colaborador", id_colaborador);
            string cargo = string.Empty;
            if (select.ExecuteScalar() == null) { }
            else if (select.ExecuteScalar().ToString() == string.Empty) { }
            else { cargo = select.ExecuteScalar().ToString(); }
            conexao.Desconectar();
            return cargo;
        }
        #endregion

        #region Informações do Softcom

        public DateTime UltimoRegistroVendasSoftcom()
        {
            string comando = "SELECT TOP(1) CONVERT(DATE, Data) FROM Vendas_Softcom ORDER BY Data DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            DateTime data = Convert.ToDateTime(select.ExecuteScalar().ToString());
            conexao.Desconectar();

            return data;
        }

        public DateTime UltimoRegistroProdutosSoftcom()
        {
            string comando = "SELECT TOP(1) CONVERT(DATE, Data) FROM Produtos_Softcom ORDER BY Data DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            DateTime data = Convert.ToDateTime(select.ExecuteScalar().ToString());
            conexao.Desconectar();

            return data;
        }

        public DateTime UltimoRegistroVendasStone()
        {
            string comando = "SELECT TOP(1) CONVERT(DATE, Data) FROM Vendas_Stone ORDER BY Data DESC";
            SqlCommand select = new SqlCommand(comando, conexao.Conectar());
            DateTime data = Convert.ToDateTime(select.ExecuteScalar().ToString());
            conexao.Desconectar();

            return data;
        }

        #endregion
    }

    public class Retirada
    {
        public int ID { get; set; }
        public string CPF { get; set; }
        public string Cliente { get; set; }
        public decimal Valor { get; set; }
        public string Data { get; set; }
        public string Validade { get; set; }
        public string Status { get; set; }

    }
    public class Reserva
    {
        public int ID { get; set; }
        public string CPF { get; set; }
        public string Cliente { get; set; }
        public string Data { get; set; }
        public string Validade { get; set; }
        public string Status { get; set; }
    }
    public class Informacoes_Contabeis
    {
        public int Produtos_Vendidos { get; set; }
        public int Periodo { get; set; }
        public decimal CMV { get; set; }
        public decimal Receita_Vendas { get; set; }
        public int Quantidade_Vendas { get; set; }
        public decimal Despesa_Fixa { get; set; }
        public decimal Despesa_Variavel { get; set; }

    }
    public class Periodo
    {
        public DateTime Inicio { get; set; }
        public DateTime Termino { get; set; }
    }
}
